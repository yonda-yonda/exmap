"use strict";(self.webpackChunkexmap=self.webpackChunkexmap||[]).push([[851],{1949:function(e,t,r){r.r(t),r.d(t,{default:function(){return L}});var n=r(7294),a=r(2055),l=r(532),o=r(5616),i=r(9308),c=r(4382),m=r(4320),u=r(3827),s=r(4649),d=r(8423),p=r(2990),f=r(6968),E=r(26),g=r(1570),y=r(4548),h=r(6449),b=r(2840),v=r(8362),Z=r(8177),P=r(2349),S=r(8128),x=r(2562),w=r(3135),k=r(5493),G=r(7391),j=r(9044),O=r(1842),C=r(8935),F=r(6534),N=r(8066),I=r(2250),J=JSON.parse('{"type":"FeatureCollection","crs":{"type":"name","properties":{"name":"urn:ogc:def:crs:EPSG::32630"}},"features":[{"type":"Feature","properties":{},"geometry":{"type":"MultiPolygon","coordinates":[[[[724375.8473259555,5773051.300383034],[1012671.6531214155,6913699.923312895],[-102907.76930449251,7289737.93087219],[724375.8473259555,5773051.300383034]]]]}}]}'),L=function(){var e=(0,h.Z)(),t=(0,b.Z)(e.breakpoints.up("md")),r=(0,F.e)(),L=(0,F.e)(),T=n.useRef(),W=n.useRef(),z=(0,Z.cI)({mode:"onSubmit",criteriaMode:"all",defaultValues:{code:"",coordinates:"",partition:"0",split:!1}}),R=z.control,V=z.watch,q=z.handleSubmit,M=z.setValue,Q=V(),A=n.useRef(),U=n.useState(null),_=U[0],$=U[1],B=n.useState(),D=B[0],H=B[1];n.useEffect((function(){r.map&&(T.current||(T.current=new w.Z({source:new k.Z({})}),r.map.addLayer(T.current)))}),[r.map]),n.useEffect((function(){L.map&&(W.current||(W.current=new w.Z({source:new k.Z({})}),L.map.addLayer(W.current),L.map.setView(new S.ZP({projection:(0,G.U2)("EPSG:4326"),center:[0,0],zoom:1}))))}),[L.map]),n.useEffect((function(){if(r.map&&T.current&&A.current!==JSON.stringify(Q)){if(0===Q.code.length||0===Q.coordinates.length)return;var e=(0,N.kL)(Q.coordinates);if(!Q.code.match(/^[0-9]{1,}$/)||!e)return;A.current=JSON.stringify(Q);var t="EPSG:"+Q.code,n=r.map.getView().getProjection().getCode();try{if(t!==n){if(!(0,G.U2)(t)){var a=C.utils.getCrs(t);O.default.defs(t,a),(0,j.z)(O.default)}var l=(0,G.U2)(t);r.map.setView(new S.ZP({projection:l,center:[0,0],zoom:1}))}}catch(m){return}try{var o=T.current.getSource();o.clear();var i=new x.Z({dataProjection:t,featureProjection:t}).readFeature({type:"Polygon",coordinates:[e]});o.addFeature(i);var c=i.getGeometry();c&&r.map.getView().fit(c,{padding:[40,20,40,20],maxZoom:20})}catch(u){return}}}),[Q,r.map]);var K=n.useCallback((function(e){W.current&&W.current.getSource().clear();var t,r="EPSG:"+e.code;try{t=C.utils.getCrs(r)}catch(l){return void $({type:"code"})}var n=(0,N.kL)(e.coordinates);if(n){try{var a=C.transform.geojsonFromLinearRing(n,t,{partition:parseInt(e.partition,10),expand:!e.split});H(a),P.OK.scrollTo("result",{duration:1500,delay:300,smooth:"easeInOutQuart"})}catch(o){return void $({type:"transform"})}$(null)}else $({type:"coordinates"})}),[$,H]);n.useEffect((function(){if(L.map&&W.current)try{var e=W.current.getSource();e.clear();var t=new x.Z({dataProjection:"EPSG:4326",featureProjection:"EPSG:4326"}).readFeature(D);e.addFeature(t);var r=null!=D&&D.bbox?D.bbox:[-180,-90,180,90];r[0]>r[2]&&(r[2]+=360),L.map.getView().fit(r,{padding:[40,20,40,20],maxZoom:20})}catch(n){$({type:"display"})}}),[L.map,D,$]);var X=n.useCallback((function(){D&&(0,I.L)(JSON.stringify(D),"transformed.geojson","text/json")}),[D]),Y=n.useCallback((function(){var e,t=(0,N.yh)(J,["Polygon","MultiPolygon"]),r=null===(e=(0,N.Br)(J))||void 0===e?void 0:e.coordinates;t&&Array.isArray(r)&&(M("code",String(t)),M("coordinates",JSON.stringify(r[0])))}),[M]);return n.createElement(n.Fragment,null,n.createElement(l.ZP,null),n.createElement(a.Helmet,null,n.createElement("title",null,"Transform to EPSG:4326"),n.createElement("meta",{name:"description",content:"Transform Polygon and export GeoJSON."}),n.createElement("link",{rel:"canonical",href:"https://yonda-yonda.github.io/exmap/transform"}),n.createElement("link",{rel:"icon",type:"image/x-icon",href:"https://github.githubassets.com/favicon.ico"}),n.createElement("link",{rel:"stylesheet",href:"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"}),n.createElement("meta",{name:"twitter:card",content:"summary_large_image"}),n.createElement("meta",{name:"twitter:title",content:"Transform to EPSG:4326"}),n.createElement("meta",{name:"twitter:description",content:"様々な投影座標系のポリゴンをEPSG:4326のGeoJSONに変換します。"}),n.createElement("meta",{property:"og:url",content:"https://yonda-yonda.github.io/exmap/transform"}),n.createElement("meta",{name:"twitter:image",content:"https://yonda-yonda.github.io/exmap/image/twitter_transform.png"})),n.createElement(o.Z,null,n.createElement(i.Z,{variant:"h2",component:"h1"},"Transform to EPSG:4326"),n.createElement(c.Z,{my:4,spacing:8},n.createElement("section",null,n.createElement(i.Z,{variant:"h4",component:"h2",sx:{mb:2}},"Input"),n.createElement("form",{onSubmit:q(K)},n.createElement(m.ZP,{container:!0,spacing:2},n.createElement(m.ZP,{item:!0,xs:12,md:5},n.createElement(c.Z,{spacing:3},n.createElement(Z.Qr,{control:R,name:"code",render:function(e){var t=e.field,r=e.fieldState,a=r.invalid,l=r.error;return n.createElement(u.Z,{error:a,fullWidth:!0},n.createElement(s.Z,Object.assign({},t,{label:"Projection Code",error:a,InputProps:{startAdornment:n.createElement(d.Z,{position:"start"},"EPSG:")}})),"required"===(null==l?void 0:l.type)&&n.createElement(p.Z,null,"Required. ",n.createElement("br",null),"必須です。入力してください。"),"pattern"===(null==l?void 0:l.type)&&n.createElement(p.Z,null,"Must be number. ",n.createElement("br",null),"数値を入力してください。"))},rules:{required:!0,pattern:/^[0-9]{1,}$/}}),n.createElement(Z.Qr,{control:R,name:"coordinates",render:function(e){var t=e.field,r=e.fieldState,a=r.invalid,l=r.error;return n.createElement("div",null,n.createElement(u.Z,{error:a,fullWidth:!0},n.createElement(s.Z,Object.assign({},t,{error:a,label:"Coordinates",fullWidth:!0,multiline:!0,rows:4,placeholder:"[[0,0],[1,0],[1,1],[0,1],[0,0]]"})),"required"===(null==l?void 0:l.type)&&n.createElement(p.Z,null,"Required. ",n.createElement("br",null),"必須です。入力してください。"),"parse"===(null==l?void 0:l.type)&&n.createElement(p.Z,null,"Wrong format. ",n.createElement("br",null),"座標の配列(3点以上)を入力してください。"),"selfintersection"===(null==l?void 0:l.type)&&n.createElement(p.Z,null,"not allow self-intersection. ",n.createElement("br",null),"自己交差しています。")),n.createElement(f.Z,{variant:"outlined",onClick:Y,size:"small",sx:{mt:1}},"set sample"))},rules:{required:!0,validate:{parse:function(e){return!!(0,N.kL)(e)},selfintersection:function(e){var t=(0,N.kL)(e);return!t||!C.utils.selfintersection(t)}}}}),n.createElement(Z.Qr,{control:R,name:"partition",render:function(e){var r=e.field,a=e.fieldState,l=a.invalid,o=a.error;return n.createElement(E.Z,{title:n.createElement("span",null,"The number of points to be inserted between vertices during the transformation.",n.createElement("br",null),"変換時に頂点間に挿入する点の数を指定します。"),arrow:!0,placement:t?"right":"top"},n.createElement(u.Z,{error:!0,fullWidth:!0,sx:{mb:2}},n.createElement(s.Z,Object.assign({},r,{label:"Insertion Points",type:"number",size:"small",error:l,InputProps:{inputProps:{max:20,min:0}}})),"min"===(null==o?void 0:o.type)&&n.createElement(p.Z,null,"Must be gte 0. ",n.createElement("br",null),"0以上の値を入力してください。"),"max"===(null==o?void 0:o.type)&&n.createElement(p.Z,null,"Must be lte 20. ",n.createElement("br",null),"20以下の値を入力してください。")))},rules:{min:0,max:20}}),n.createElement(Z.Qr,{control:R,name:"split",render:function(e){var r=e.field;return n.createElement(E.Z,{title:n.createElement("span",null,"Polygon crossing the antemerdian will be split.",n.createElement("br",null),"180度線をまたぐ図形ではポリゴンを分割します。"),arrow:!0,placement:t?"right":"top"},n.createElement(u.Z,{fullWidth:!0,sx:{ml:1}},n.createElement(g.Z,Object.assign({},r,{control:n.createElement(y.Z,{size:"small"}),label:"Split when crossing the antemerdian."}))))}}))),n.createElement(m.ZP,{item:!0,xs:12,md:7},n.createElement("div",{ref:r.ref,style:{width:"100%",height:"340px"}})),n.createElement(m.ZP,{item:!0,xs:12,sx:{mt:1}},n.createElement(u.Z,{error:!!_,fullWidth:!0,sx:{mb:2}},n.createElement(f.Z,{variant:"contained",type:"submit"},"Transform"),"code"===(null==_?void 0:_.type)&&n.createElement(p.Z,null,"Nonexistent Projection Code. ",n.createElement("br",null),"存在しないEPSGコードです。"),"coordinates"===(null==_?void 0:_.type)&&n.createElement(p.Z,null,"Invalid Coordinates. ",n.createElement("br",null),"無効なポリゴンです。"),"transform"===(null==_?void 0:_.type)&&n.createElement(p.Z,null,"Failed Transform. ",n.createElement("br",null),"変換に失敗しました。"),"display"===(null==_?void 0:_.type)&&n.createElement(p.Z,null,"Failed Display. ",n.createElement("br",null),"地図への表示に失敗しました。")))))),D&&n.createElement("section",{id:"result"},n.createElement(i.Z,{variant:"h4",component:"h2",sx:{mb:2}},"Output"),n.createElement(m.ZP,{container:!0,spacing:2},n.createElement(m.ZP,{item:!0,xs:12,md:5},n.createElement(s.Z,{fullWidth:!0,multiline:!0,label:"GeoJSON of EPSG:4326",rows:12,value:JSON.stringify(D,null,2)}),n.createElement(f.Z,{variant:"outlined",startIcon:n.createElement(v.Z,null),onClick:X,size:"small",sx:{mt:1}},"Export")),n.createElement(m.ZP,{item:!0,xs:12,md:7},n.createElement("div",{ref:L.ref,style:{width:"100%",height:"340px"}})))))))}}}]);
//# sourceMappingURL=component---src-pages-transform-index-tsx-27a5405240a493e8e524.js.map