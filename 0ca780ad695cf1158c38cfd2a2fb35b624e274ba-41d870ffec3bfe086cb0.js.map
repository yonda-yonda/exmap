{"version":3,"file":"0ca780ad695cf1158c38cfd2a2fb35b624e274ba-41d870ffec3bfe086cb0.js","mappings":"wGACMA,E,sBADFC,GACED,EAAiB,SAAuBE,EAAGC,GAW7C,OAVAH,EAAiBI,OAAOC,gBAAkB,CACxCC,UAAW,cACAC,OAAS,SAAUL,EAAGC,GACjCD,EAAEI,UAAYH,IACX,SAAUD,EAAGC,GAChB,IAAK,IAAIK,KAAKL,EACRC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,KAItDR,EAAeE,EAAGC,IAGpB,SAAUD,EAAGC,GAClB,GAAiB,mBAANA,GAA0B,OAANA,EAAY,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAIpG,SAASW,IACPC,KAAKC,YAAcd,EAHrBF,EAAeE,EAAGC,GAMlBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,KA2B/EI,EAEJ,SAAUC,GAOR,SAASD,EAASE,GAChB,IAAIC,EAAQN,KAERO,EAAQ,SAuBZ,OAtBAD,EAAQF,EAAOR,KAAKI,KAAMK,EAAQG,UAAWD,EAAO,CAClDE,WAAYJ,EAAQI,WACpBC,YAAaL,EAAQK,eACjBV,MAMAW,QAAUN,EAAQO,OAMxBN,EAAMO,MAAQ,KAMdP,EAAMQ,OAAS,KACRR,EA2CT,OA3EApB,EAAUiB,EAAUC,GAyCpBD,EAAST,UAAUqB,QAAU,WAC3B,OAAOf,KAAKa,OASdV,EAAST,UAAUsB,SAAW,WAC5B,OAAOhB,KAAKc,QAQdX,EAAST,UAAUuB,KAAO,WACxBjB,KAAKO,MAAQ,YACbP,KAAKkB,UACL,IAAIC,EAAOnB,KACXA,KAAKW,UAAUS,MAAK,SAAUC,GAC5BF,EAAKN,MAAQQ,EACbF,EAAKZ,MAAQ,WACbY,EAAKD,aACJI,OAAM,SAAUC,GACjBJ,EAAKL,OAASS,EACdJ,EAAKZ,MAAQ,UACbY,EAAKD,cAIFf,EA5ET,CA6EE,KAEF,O,4LCnHWqB,EAAe,MAUfC,EAAuB,MAgBvBC,EAAc,MAyCrBC,EAAc,CAAC,qBAAsB,QAAS,YAAa,aAOxD,SAASC,EAAWC,EAAQC,GAMjC,IALA,IAAIC,GAAa,QAAO,CACtBC,uBAAuB,GACtBF,GACCG,EAAKN,EAAYO,OAEZC,EAAI,EAAGA,EAAIF,IAAME,EACxB,IACE,IAAIC,EAAUP,EAAOD,WAAWD,EAAYQ,GAAIJ,GAEhD,GAAIK,EACF,OAAO,EAKT,MAAOC,IAIX,OAAO,K,eCpGEC,EACIZ,EAqBXa,EAEJ,WAME,SAASA,EAAiBC,EAAMC,GAK9BzC,KAAK0C,MAAQ,KAMb1C,KAAKwC,KAAOA,GACZ,OAAOA,IAAShB,GAAgBgB,IAASf,EAAsB,IAM/DzB,KAAK2C,WAAsBC,IAAdH,EAA0BA,EAAYH,EAkErD,OA1DAC,EAAiB7C,UAAUmD,OAAS,SAAUC,GAC5C9C,KAAK0C,MAAQ,IAAKK,EAAqB/C,KAAKwC,MAA/B,CAAsCM,IAQrDP,EAAiB7C,UAAUsD,UAAY,SAAUN,GAC/C,IAAIO,EAAaF,EAAqB/C,KAAKwC,MAC3CxC,KAAK0C,MAAQO,EAAWC,KAAOD,EAAWC,KAAKR,GAAS,IAAIO,EAAWP,IASzEH,EAAiB7C,UAAUyD,gBAAkB,SAAUC,GACrDpD,KAAK0C,MAAQ,IAAKK,EAAqB/C,KAAKwC,MAA/B,CAAsCY,IAOrDb,EAAiB7C,UAAU2D,QAAU,WACnC,OAAOrD,KAAKwC,MAQdD,EAAiB7C,UAAU4D,SAAW,WACpC,OAAOtD,KAAK0C,OAOdH,EAAiB7C,UAAU6D,SAAW,WACpC,OAAOvD,KAAK2C,OAQdJ,EAAiB7C,UAAU8D,QAAU,WACnC,OAAOxD,KAAK0C,MAAQ1C,KAAK0C,MAAMR,OAAS,GAGnCK,EA1FT,GAmGO,SAASQ,EAAqBP,GACnC,OAAQA,GACN,KAAKhB,EACH,OAAOiC,aAET,KAAKhC,EACH,OAAOiC,YAET,QACE,OAAOD,cAGb,IC9IMxE,ED8IN,I,iCC/IIC,GACED,EAAiB,SAAuBE,EAAGC,GAW7C,OAVAH,EAAiBI,OAAOC,gBAAkB,CACxCC,UAAW,cACAC,OAAS,SAAUL,EAAGC,GACjCD,EAAEI,UAAYH,IACX,SAAUD,EAAGC,GAChB,IAAK,IAAIK,KAAKL,EACRC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,KAItDR,EAAeE,EAAGC,IAGpB,SAAUD,EAAGC,GAClB,GAAiB,mBAANA,GAA0B,OAANA,EAAY,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAIpG,SAASW,IACPC,KAAKC,YAAcd,EAHrBF,EAAeE,EAAGC,GAMlBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,KAsBnF,SAAS4D,EAAiBC,EAAIC,EAASnD,GACrC,IAAIoD,EAAiBpD,EAAckD,EAAGG,OAASH,EAAGI,QAClDJ,EAAGK,YAAYL,EAAGM,WAAYL,GAC9BD,EAAGO,cAAcP,EAAGM,WAAYN,EAAGQ,eAAgBR,EAAGS,eACtDT,EAAGO,cAAcP,EAAGM,WAAYN,EAAGU,eAAgBV,EAAGS,eACtDT,EAAGO,cAAcP,EAAGM,WAAYN,EAAGW,mBAAoBT,GACvDF,EAAGO,cAAcP,EAAGM,WAAYN,EAAGY,mBAAoBV,GAwBzD,SAASW,EAAkBC,EAAQb,EAASxC,EAAMyB,EAAM6B,EAAWjE,GACjE,IAAIkD,EAAKc,EAAOE,QAChBjB,EAAiBC,EAAIC,EAASnD,GAC9B,IAWImE,EAiCAC,EA5CAC,EAAc1D,EAAK2D,WAAalC,EAAK,GACrCmC,EAAkB,EAYtB,OAVIF,EAAc,GAAM,EACtBE,EAAkB,EACTF,EAAc,GAAM,EAC7BE,EAAkB,EACTF,EAAc,GAAM,IAC7BE,EAAkB,GAKZN,GACN,KAAK,EAEDE,EAASjB,EAAGsB,UACZ,MAGJ,KAAK,EAEDL,EAASjB,EAAGuB,gBACZ,MAGJ,KAAK,EAEDN,EAASjB,EAAGwB,IACZ,MAGJ,KAAK,EAEDP,EAASjB,EAAGyB,KACZ,MAGJ,QAEI,MAAM,IAAIC,MAAM,gCAAgCC,OAAOZ,IAMzDtD,aAAgBoC,cAClBqB,EAAclB,EAAG4B,MACjBd,EAAOe,aAAa,qBACpBf,EAAOe,aAAa,6BAEpBX,EAAclB,EAAG8B,cAGnB,IAAIC,EAAqB/B,EAAGgC,aAAahC,EAAGiC,kBAC5CjC,EAAGkC,YAAYlC,EAAGiC,iBAAkBZ,GACpCrB,EAAGmC,WAAWnC,EAAGM,WAAY,EAAGW,EAAQ/B,EAAK,GAAIA,EAAK,GAAI,EAAG+B,EAAQC,EAAazD,GAClFuC,EAAGkC,YAAYlC,EAAGiC,iBAAkBF,GAOtC,IAAIK,EAAe,KAsBnB,IA0PA,EAxPA,SAAU5F,GAOR,SAAS6F,EAAY5F,GACnB,IAAIC,EAAQF,EAAOR,KAAKI,OAASA,KAMjCM,EAAM4F,KAKN5F,EAAM6F,SAAW,GACjB7F,EAAM8F,kBAAoB9F,EAAM8F,kBAAkBC,KAAK/F,GAKvDA,EAAMwC,MAAO,QAAOzC,EAAQiG,KAAKC,YAAYlG,EAAQ6F,KAAK1F,UAAU,KAMpEF,EAAMkG,gBAAkBnG,EAAQoG,gBAAkB,EAMlDnG,EAAMoG,QAAUrG,EAAQsG,QAAU,EAKlCrG,EAAMqE,UAAYiC,IAMlBtG,EAAMuG,QAAUxG,EAAQqE,OACxB,IAAIoC,EAAS,IAAI,EAAiBtF,EAAcE,GAahD,OAZAoF,EAAO9D,UAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAEvC1C,EAAMuG,QAAQE,gBAAgBD,GAM9BxG,EAAMwG,OAASA,EAEfxG,EAAM0G,QAAQ3G,EAAQ6F,MAEf5F,EAuLT,OApPApB,EAAU+G,EAAa7F,GAoEvB6F,EAAYvG,UAAUsH,QAAU,SAAUd,GACxC,GAAIA,IAASlG,KAAKkG,KAShB,GARIlG,KAAKkG,MACPlG,KAAKkG,KAAKe,oBAAoBC,EAAA,SAAkBlH,KAAKoG,mBAGvDpG,KAAKkG,KAAOA,EACZlG,KAAKmG,SAASjE,OAAS,EACvBlC,KAAKmH,OAASjB,EAAKkB,aAAeC,EAAA,SAE9BrH,KAAKmH,OACPnH,KAAKsH,kBACA,CACL,GAAIpB,aAAgBqB,EAAA,EAAW,CAC7B,IAAIC,EAAQtB,EAAKuB,WAEbD,aAAiBE,QAAUF,EAAMG,cACnCH,EAAMG,YAAc,aAIxBzB,EAAK0B,iBAAiBV,EAAA,SAAkBlH,KAAKoG,qBAKnDH,EAAYvG,UAAU4H,YAAc,WAClC,IAAI5C,EAAS1E,KAAK6G,QACdjD,EAAKc,EAAOE,QACZsB,EAAOlG,KAAKkG,KAEhB,GAAIA,aAAgBqB,EAAA,GAAarB,aAAgB,IAAY,CAC3D,IAAIsB,EAAQtB,EAAKuB,WAEjB,GAAqB,IAAjBzH,KAAK0G,QAAe,CACtB,IAAIC,EAAS3G,KAAKwG,gBAAkBxG,KAAK0G,QACrCmB,EAAQC,KAAKC,MAAMP,EAAMK,MAAQ,EAAIlB,GACrCqB,EAASF,KAAKC,MAAMP,EAAMQ,OAAS,EAAIrB,GACvCvE,GAAU,QAAsByF,EAAOG,GAEtC9B,EAAKxF,cACR,QAAO0B,EAAS,KAGlBA,EAAQ6F,UAAUT,EAAOb,EAAQA,EAAQkB,EAAOG,EAAQ,EAAG,EAAGH,EAAOG,GACrER,EAAQpF,EAAQP,OAGlB,IAAIgC,EAAUD,EAAGsE,gBAIjB,OAHAlI,KAAKmG,SAASgC,KAAKtE,GACnB7D,KAAK2E,UAAY,OAhOvB,SAA4Bf,EAAIC,EAAS2D,EAAO9G,GAC9CiD,EAAiBC,EAAIC,EAASnD,GAC9BkD,EAAGmC,WAAWnC,EAAGM,WAAY,EAAGN,EAAGyB,KAAMzB,EAAGyB,KAAMzB,EAAG8B,cAAe8B,GA+NhEY,CAAmBxE,EAAIC,EAAS2D,EAAOtB,EAAKxF,aAI9C,IAAI2H,EAAY,CAACrI,KAAK8C,KAAK,GAAK9C,KAAKwG,gBAAiBxG,KAAK8C,KAAK,GAAK9C,KAAKwG,iBACtEnF,EAAO6E,EAAKnF,UACZuH,EAAUjH,aAAgBoC,aAC1B8E,EAAaF,EAAU,GAAKA,EAAU,GACtCG,EAAWF,EAAU7E,aAAegF,WACpCC,EAAkBF,EAASG,kBAC3B5D,EAAc1D,EAAK2D,WAAaqD,EAAU,GAC9CrI,KAAK2E,UAAYmD,KAAKc,MAAM7D,EAAc2D,EAAkBL,EAAU,IACtE,IAAIQ,EAAef,KAAKgB,KAAK9I,KAAK2E,UAAY,GAE9C,GAAqB,IAAjBkE,EAAoB,CAClBhF,EAAUD,EAAGsE,gBAGjB,OAFAlI,KAAKmG,SAASgC,KAAKtE,QACnBY,EAAkBC,EAAQb,EAASxC,EAAMgH,EAAWrI,KAAK2E,UAAWuB,EAAKxF,aAM3E,IAFA,IAAIqI,EAAoB,IAAIvJ,MAAMqJ,GAEzBG,EAAe,EAAGA,EAAeH,IAAgBG,EAAc,CAClEnF,EAAUD,EAAGsE,gBACjBlI,KAAKmG,SAASgC,KAAKtE,GACnB,IAAIc,EAAYqE,EAAeH,EAAe,EAAI,EAAI7I,KAAK2E,UAAY,EACvEoE,EAAkBC,GAAgB,IAAIR,EAASD,EAAa5D,GAO9D,IAJA,IAAIsE,EAAY,EACZC,EAAY,EACZC,EAAWd,EAAU,GAAKrI,KAAK2E,UAE1ByE,EAAW,EAAGA,EAAWf,EAAU,KAAMe,EAAU,CAC1D,IAAK,IAAIC,EAAW,EAAGA,EAAWF,IAAYE,EAAU,CACtD,IAAIC,EAAYjI,EAAK6H,EAAYG,GAC7BE,EAAazB,KAAKc,MAAMK,EAAYjJ,KAAK2E,WACzC6E,EAAYH,EAAWrJ,KAAK2E,WAE5B8E,EAAcV,EADdC,EAAelB,KAAKc,MAAMY,EAAY,KAI9BD,GAFR5E,EAAY8E,EAAYvH,OAASqG,GACdiB,EAAY,GACsBF,IACvDL,EAGJC,GAAanE,EAAc2D,EAG7B,IAASM,EAAe,EAAGA,EAAeH,IAAgBG,EAAc,CACtE,IACIS,EAEJhF,EAAkBC,EAHdb,EAAU7D,KAAKmG,SAAS6C,GACxBS,EAAcV,EAAkBC,GAEYX,EAD5C1D,EAAY8E,EAAYvH,OAASqG,EACiCrC,EAAKxF,eAI/EuF,EAAYvG,UAAU0G,kBAAoB,WACpCpG,KAAKkG,KAAKkB,aAAeC,EAAA,WAC3BrH,KAAKmH,QAAS,EACdnH,KAAKsH,cACLtH,KAAK0J,cAAcxC,EAAA,YAIvBjB,EAAYvG,UAAUiK,gBAAkB,WACtC,IAAI/F,EAAK5D,KAAK6G,QAAQjC,QACtB5E,KAAK6G,QAAQ+C,aAAa5J,KAAK8G,QAE/B,IAAK,IAAI3E,EAAI,EAAGA,EAAInC,KAAKmG,SAASjE,SAAUC,EAC1CyB,EAAGiG,cAAc7J,KAAKmG,SAAShE,IAGjCnC,KAAKkG,KAAKe,oBAAoBC,EAAA,SAAkBlH,KAAKoG,oBAUvDH,EAAYvG,UAAUoK,aAAe,SAAUC,EAAKC,GAClD,IAAKhK,KAAKmH,OACR,OAAO,KAMT,GAHA4C,EAAMjC,KAAKc,MAAM5I,KAAKwG,gBAAkBuD,GACxCC,EAAMlC,KAAKc,MAAM5I,KAAKwG,gBAAkBwD,GAEpChK,KAAKkG,gBAAgB/F,EAAA,EAAU,CACjC,IAAI8J,EAASjK,KAAKkG,KAAKnF,UACnBmJ,EAAepC,KAAKc,MAAM5I,KAAKwG,gBAAkBxG,KAAK8C,KAAK,IAE/D,GAAImH,aAAkBE,SAAU,CAC9B,IAAIC,EAAgBH,EAAOjF,YAAchF,KAAK8C,KAAK,GAAK9C,KAAK8C,KAAK,IAC9DuH,EAAWL,EAAME,EAAeE,EAAgBL,EAAMK,EACtDhH,EAAS6G,EAAO7G,OAAOkH,MAAMD,EAAUA,EAAWD,GACtD,OAAO,IAAID,SAAS/G,GAGtB,IAAImH,EAASP,EAAME,EAAelK,KAAK2E,UAAYoF,EAAM/J,KAAK2E,UAC9D,OAAOsF,EAAOK,MAAMC,EAAQA,EAASvK,KAAK2E,WAtPhD,IACM9C,EA6PER,EALC2E,KAxPHnE,EAAS2I,SAASC,cAAc,WAC7B5C,MAAQ,EACfhG,EAAOmG,OAAS,EAChBhC,EAAenE,EAAOD,WAAW,OAyP/BoE,EAAa0E,UAAU,EAAG,EAAG,EAAG,GAEhC,IAAIlD,EAAQxH,KAAKkG,KAAKuB,WAEtB,IACEzB,EAAaiC,UAAUT,EAAOuC,EAAKC,EAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD3I,EAAO2E,EAAa2E,aAAa,EAAG,EAAG,EAAG,GAAGtJ,KAC7C,MAAOuJ,GACP,OAAO,KAGT,OAAOvJ,GAGF4E,EArPT,CAsPE,K,iCCzZF,EACQ,mBADR,EAEY,uB,sBCiER4E,EAEJ,WAIE,SAASA,EAAwBxK,GAC/BL,KAAK8K,IAAMzK,EAAQ0K,aACnB,IAAInH,EAAK5D,KAAK8K,IACd9K,KAAKgL,YAAc3K,EAAQ4K,YAAc,EACzCjL,KAAKkL,qBAAuBtH,EAAGsE,gBAC/BlI,KAAKmL,yBAA2B,KAChCnL,KAAKoL,aAAexH,EAAGyH,oBAGvB,IAAIC,EAAe1H,EAAG2H,aAAa3H,EAAG4H,eACtC5H,EAAG6H,aAAaH,EAAcjL,EAAQiL,cAtFd,qUAuFxB1H,EAAG8H,cAAcJ,GACjB,IAAIK,EAAiB/H,EAAG2H,aAAa3H,EAAGgI,iBACxChI,EAAG6H,aAAaE,EAAgBtL,EAAQsL,gBAxFd,6NAyF1B/H,EAAG8H,cAAcC,GACjB3L,KAAK6L,qBAAuBjI,EAAGkI,gBAC/BlI,EAAGmI,aAAa/L,KAAK6L,qBAAsBP,GAC3C1H,EAAGmI,aAAa/L,KAAK6L,qBAAsBF,GAC3C/H,EAAGoI,YAAYhM,KAAK6L,sBAEpB7L,KAAKiM,4BAA8BrI,EAAGsI,eAEtCtI,EAAGuI,WAAWvI,EAAGpC,aAAcxB,KAAKiM,6BACpCrI,EAAGwI,WAAWxI,EAAGpC,aAAc,IAAIiC,aAFf,EAAE,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,IAEIG,EAAGlC,aACnE1B,KAAKqM,4BAA8BzI,EAAG0I,kBAAkBtM,KAAK6L,qBAAsB,cACnF7L,KAAKuM,6BAA+B3I,EAAG4I,mBAAmBxM,KAAK6L,qBAAsB,gBACrF7L,KAAKyM,6BAA+B7I,EAAG4I,mBAAmBxM,KAAK6L,qBAAsB,aACrF7L,KAAK0M,6BAA+B9I,EAAG4I,mBAAmBxM,KAAK6L,qBAAsB,WAOrF7L,KAAK2M,UAAY,GACjBtM,EAAQuM,UAAYvN,OAAOwN,KAAKxM,EAAQuM,UAAUE,QAAQ,SAAUC,GAClE/M,KAAK2M,UAAUxE,KAAK,CAClB6E,MAAO3M,EAAQuM,SAASG,GACxBE,SAAUrJ,EAAG4I,mBAAmBxM,KAAK6L,qBAAsBkB,MAE7D1G,KAAKrG,OAyKT,OAhKA6K,EAAwBnL,UAAUkF,MAAQ,WACxC,OAAO5E,KAAK8K,KAWdD,EAAwBnL,UAAUwN,KAAO,SAAUC,GACjD,IAAIvJ,EAAK5D,KAAK4E,QACVwI,EAAc,CAACxJ,EAAGyJ,mBAAqBrN,KAAKgL,YAAapH,EAAG0J,oBAAsBtN,KAAKgL,aAK3F,GAHApH,EAAG2J,gBAAgB3J,EAAG4J,YAAaxN,KAAKyN,kBACxC7J,EAAG8J,SAAS,EAAG,EAAGN,EAAY,GAAIA,EAAY,KAEzCpN,KAAKmL,0BAA4BnL,KAAKmL,yBAAyB,KAAOiC,EAAY,IAAMpN,KAAKmL,yBAAyB,KAAOiC,EAAY,GAAI,CAChJpN,KAAKmL,yBAA2BiC,EAEhC,IACIO,EAAiB/J,EAAGyB,KAEpBR,EAASjB,EAAGyB,KACZ7C,EAAOoB,EAAG8B,cAEd9B,EAAGK,YAAYL,EAAGM,WAAYlE,KAAKkL,sBACnCtH,EAAGmC,WAAWnC,EAAGM,WAPL,EAOwByJ,EAAgBP,EAAY,GAAIA,EAAY,GALnE,EAK+EvI,EAAQrC,EAFzF,MAGXoB,EAAGO,cAAcP,EAAGM,WAAYN,EAAGW,mBAAoBX,EAAGG,QAC1DH,EAAGO,cAAcP,EAAGM,WAAYN,EAAGQ,eAAgBR,EAAGS,eACtDT,EAAGO,cAAcP,EAAGM,WAAYN,EAAGU,eAAgBV,EAAGS,eAEtDT,EAAGgK,qBAAqBhK,EAAG4J,YAAa5J,EAAGiK,kBAAmBjK,EAAGM,WAAYlE,KAAKkL,qBAAsB,KAa5GL,EAAwBnL,UAAUoO,MAAQ,SAAUX,EAAYY,EAAUC,EAAYC,GACpF,IAAIrK,EAAK5D,KAAK4E,QACV9B,EAAOqK,EAAWrK,KAKtB,GAJAc,EAAG2J,gBAAgB3J,EAAG4J,YAAaO,EAAWA,EAASN,iBAAmB,MAC1E7J,EAAGsK,cAActK,EAAGuK,UACpBvK,EAAGK,YAAYL,EAAGM,WAAYlE,KAAKkL,uBAE9B6C,EAAU,CAGb,IAAIK,GAAW,QAAOxK,EAAG/B,QAEzB,IAAKsL,EAAWkB,cAAcD,GAAW,CACvC,IAAIrM,EAAa6B,EAAG0K,uBAEhBvM,GAAcA,EAAWC,wBAC3B4B,EAAG2K,WAAW,EAAK,EAAK,EAAK,GAC7B3K,EAAG4K,MAAM5K,EAAG6K,mBAGdtB,EAAWkB,cAAcD,IAAY,GAIzCxK,EAAG8K,OAAO9K,EAAG+K,OACb/K,EAAGgL,UAAUhL,EAAGiL,IAAKjL,EAAGkL,qBACxBlL,EAAG8J,SAAS,EAAG,EAAG9J,EAAGyJ,mBAAoBzJ,EAAG0J,qBAC5C1J,EAAGuI,WAAWvI,EAAGpC,aAAcxB,KAAKiM,6BACpCrI,EAAGmL,WAAW/O,KAAK6L,sBACnBjI,EAAGoL,wBAAwBhP,KAAKqM,6BAChCzI,EAAGqL,oBAAoBjP,KAAKqM,4BAA6B,EAAGzI,EAAG4B,OAAO,EAAO,EAAG,GAChF5B,EAAGsL,UAAUlP,KAAKuM,6BAA8BzJ,EAAK,GAAIA,EAAK,IAC9Dc,EAAGuL,UAAUnP,KAAK0M,6BAA8B,GAChD,IAAI0C,EAAUjC,EAAWkC,iBAAiBlC,EAAWmC,YAAYF,QACjExL,EAAG2L,UAAUvP,KAAKyM,6BAA8B2C,GAChDpP,KAAKwP,cAAcrC,GAEfa,GACFA,EAAWpK,EAAIuJ,GAGjBvJ,EAAG6L,WAAW7L,EAAG8L,UAAW,EAAG,GAE3BzB,GACFA,EAAYrK,EAAIuJ,IASpBtC,EAAwBnL,UAAU+N,eAAiB,WACjD,OAAOzN,KAAKoL,cASdP,EAAwBnL,UAAU8P,cAAgB,SAAUrC,GAC1D,IACIH,EADApJ,EAAK5D,KAAK4E,QAEV+K,EAAc,EAClB3P,KAAK2M,UAAUG,SAAQ,SAAU8C,GAG/B,IAFA5C,EAAiC,mBAAlB4C,EAAQ5C,MAAuB4C,EAAQ5C,MAAMG,GAAcyC,EAAQ5C,iBAE7D6C,mBAAqB7C,aAAiB8C,UAEpDF,EAAQ/L,UACX+L,EAAQ/L,QAAUD,EAAGsE,iBAGvBtE,EAAGsK,cAActK,EAAG,UAAU2B,OAAOoK,KACrC/L,EAAGK,YAAYL,EAAGM,WAAY0L,EAAQ/L,SACtCD,EAAGO,cAAcP,EAAGM,WAAYN,EAAGW,mBAAoBX,EAAGG,QAC1DH,EAAGO,cAAcP,EAAGM,WAAYN,EAAGQ,eAAgBR,EAAGS,eACtDT,EAAGO,cAAcP,EAAGM,WAAYN,EAAGU,eAAgBV,EAAGS,eAElD2I,aAAiB8C,UACnBlM,EAAGmC,WAAWnC,EAAGM,WAAY,EAAGN,EAAGyB,KAAMzB,EAAGyB,KAAM2H,EAAMnF,MAAOmF,EAAMhF,OAAQ,EAAGpE,EAAG8B,cAAe,IAAI+C,WAAWuE,EAAM3L,OAEvHuC,EAAGmC,WAAWnC,EAAGM,WAAY,EAAGN,EAAGyB,KAAMzB,EAAGyB,KAAMzB,EAAG8B,cAAesH,GAItEpJ,EAAGuL,UAAUS,EAAQ3C,SAAU0C,UAC1B,GAAInQ,MAAMuQ,QAAQ/C,GACvB,OAAQA,EAAM9K,QACZ,KAAK,EAEH,YADA0B,EAAGsL,UAAUU,EAAQ3C,SAAUD,EAAM,GAAIA,EAAM,IAGjD,KAAK,EAEH,YADApJ,EAAGoM,UAAUJ,EAAQ3C,SAAUD,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAG3D,KAAK,EAEH,YADApJ,EAAGqM,UAAUL,EAAQ3C,SAAUD,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAGrE,QACE,WAEsB,iBAAVA,GAChBpJ,EAAG2L,UAAUK,EAAQ3C,SAAUD,OAK9BnC,EArNT,GAwNA,I,WCpRO,SAASqF,EAAcC,EAAMC,GAOlC,OANAD,EAAK,GAAKC,EAAU,GACpBD,EAAK,GAAKC,EAAU,GACpBD,EAAK,GAAKC,EAAU,GACpBD,EAAK,GAAKC,EAAU,GACpBD,EAAK,IAAMC,EAAU,GACrBD,EAAK,IAAMC,EAAU,GACdD,ECvBT,IAAI,EAAsC,WACxC,IAAIlR,EAAiB,SAAuBE,EAAGC,GAW7C,OAVAH,EAAiBI,OAAOC,gBAAkB,CACxCC,UAAW,cACAC,OAAS,SAAUL,EAAGC,GACjCD,EAAEI,UAAYH,IACX,SAAUD,EAAGC,GAChB,IAAK,IAAIK,KAAKL,EACRC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,KAItDR,EAAeE,EAAGC,IAG3B,OAAO,SAAUD,EAAGC,GAClB,GAAiB,mBAANA,GAA0B,OAANA,EAAY,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAIpG,SAASW,IACPC,KAAKC,YAAcd,EAHrBF,EAAeE,EAAGC,GAMlBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,IAxBzC,GA6D/BsQ,EAEY,sBAFZA,EAGe,uBAHfA,EAIH,SAJGA,EAKH,SALGA,EAMG,eAQHC,ENlBgB,KMkBhBA,ENZiB,KMYjBA,ENNe,KMMfA,GNAQ,KM6DfC,GAAc,GAMlB,SAASC,GAAwBC,GAC/B,MAAO,UAAYA,EAGrB,IAAIC,GAA4B,EA4LhC,IAAIC,GAEJ,SAAUvQ,GAOR,SAASuQ,EAAYC,GACnB,IAhMEH,EAgMEnQ,EAAQF,EAAOR,KAAKI,OAASA,KAE7BK,EAAUuQ,GAAe,GAG7BtQ,EAAMuQ,6BAA+BvQ,EAAMwQ,uBAAuBzK,KAAK/F,GAGvEA,EAAMyQ,iCAAmCzQ,EAAM0Q,2BAA2B3K,KAAK/F,GAM/EA,EAAM2Q,gBAAkB5Q,EAAQ6Q,eAAiBV,GAAwBnQ,EAAQ6Q,iBA9M/ET,EAAM,UAAYC,GACtBA,IAA6B,EACtBD,GAkNLnQ,EAAM6Q,QA1MV,SAAmBV,GACjB,IAAIW,EAAYb,GAAYE,GAE5B,IAAKW,EAAW,CACd,IAAIvP,EAAS2I,SAASC,cAAc,UACpC5I,EAAOwP,MAAMC,SAAW,WACxBzP,EAAOwP,MAAME,KAAO,IACpBH,EAAY,CACVI,MAAO,EACP3P,OAAQA,GAEV0O,GAAYE,GAAOW,EAIrB,OADAA,EAAUI,OAAS,EACZJ,EAAUvP,OA2LC4P,CAAUnR,EAAM2Q,iBAMhC3Q,EAAMwK,IAAMlJ,EAAWtB,EAAM6Q,SAM7B7Q,EAAMoR,aAAe,GAMrBpR,EAAMqR,gBAAkB,GAMxBrR,EAAMsR,gBAAkB,KAExBtR,EAAM6Q,QAAQvJ,iBAAiBiK,EAAuBvR,EAAMuQ,8BAE5DvQ,EAAM6Q,QAAQvJ,iBAAiBiK,EAA2BvR,EAAMyQ,kCAOhEzQ,EAAMwR,qBAAsB,UAM5BxR,EAAMyR,oBAAqB,UAM3BzR,EAAM0R,SDnZD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GCyZnD1R,EAAM2R,kBAAoB,GAM1B3R,EAAM4R,iBAAmB,GAQzB5R,EAAMqM,UAAY,GAEdtM,EAAQuM,UACVtM,EAAM6R,YAAY9R,EAAQuM,UAG5B,IAAIhJ,EAAKtD,EAAMsE,QAiCf,OAvBAtE,EAAM8R,mBAAqB/R,EAAQgS,cAAgBhS,EAAQgS,cAAcC,KAAI,SAAUjS,GACrF,OAAO,IAAI,EAAwB,CACjC0K,aAAcnH,EACdqH,WAAY5K,EAAQ4K,WACpBK,aAAcjL,EAAQiL,aACtBK,eAAgBtL,EAAQsL,eACxBiB,SAAUvM,EAAQuM,cAEjB,CAAC,IAAI,EAAwB,CAChC7B,aAAcnH,KAOhBtD,EAAMiS,qBAAuB,KAM7BjS,EAAMkS,WAAaC,KAAKC,MACjBpS,EAgjBT,OArrBA,EAAUqQ,EAAavQ,GA4IvBuQ,EAAYjR,UAAUyS,YAAc,SAAUvF,GAG5C,IAAK,IAAI+F,KAFT3S,KAAK2M,UAAY,GAEEC,EACjB5M,KAAK2M,UAAUxE,KAAK,CAClB4E,KAAM4F,EACN3F,MAAOJ,EAAS+F,KAIpB3S,KAAKiS,kBAAoB,IAQ3BtB,EAAYjR,UAAUkT,sBAAwB,SAAU1B,GACtD,OAAOlR,KAAKiR,kBAAoBT,GAAwBU,IAU1DP,EAAYjR,UAAU+F,aAAe,SAAUsH,GAC7C,GAAIA,KAAQ/M,KAAK2R,gBACf,OAAO3R,KAAK2R,gBAAgB5E,GAG9B,IAAI8F,EAAY7S,KAAK8K,IAAIrF,aAAasH,GAEtC,OADA/M,KAAK2R,gBAAgB5E,GAAQ8F,EACtBA,GAWTlC,EAAYjR,UAAUyM,WAAa,SAAU/I,GAC3C,IAAIQ,EAAK5D,KAAK4E,QACVkO,GAAY,QAAO1P,GACnB2P,EAAc/S,KAAK0R,aAAaoB,GAE/BC,IAEHA,EAAc,CACZ3P,OAAQA,EACR4P,YAHgBpP,EAAGsI,gBAKrBlM,KAAK0R,aAAaoB,GAAaC,GAGjCnP,EAAGuI,WAAW/I,EAAOC,UAAW0P,EAAYC,cAU9CrC,EAAYjR,UAAUqH,gBAAkB,SAAU3D,GAChD,IAAIQ,EAAK5D,KAAK4E,QACd5E,KAAKmM,WAAW/I,GAChBQ,EAAGwI,WAAWhJ,EAAOC,UAAWD,EAAOE,WAAYF,EAAOG,aAO5DoN,EAAYjR,UAAUkK,aAAe,SAAUqJ,GAC7C,IAAIrP,EAAK5D,KAAK4E,QACVkO,GAAY,QAAOG,GACnBC,EAAmBlT,KAAK0R,aAAaoB,GAErCI,IAAqBtP,EAAGuP,iBAC1BvP,EAAGgG,aAAasJ,EAAiBF,oBAG5BhT,KAAK0R,aAAaoB,IAO3BnC,EAAYjR,UAAUiK,gBAAkB,WACtC3J,KAAKmR,QAAQlK,oBAAoB4K,EAAuB7R,KAAK6Q,8BAC7D7Q,KAAKmR,QAAQlK,oBAAoB4K,EAA2B7R,KAAK+Q,kCAxYrE,SAAuBN,GACrB,IAAIW,EAAYb,GAAYE,GAE5B,GAAKW,IAILA,EAAUI,OAAS,IAEfJ,EAAUI,MAAQ,IAAtB,CAIA,IAEIqB,EADKjR,EADIwP,EAAUvP,QAEJ4D,aAAa,sBAE5BoN,GACFA,EAAUO,qBAGL7C,GAAYE,IAoXjB4C,CAAcrT,KAAKiR,wBACZjR,KAAK8K,WACL9K,KAAKmR,SAYdR,EAAYjR,UAAU4T,YAAc,SAAUnG,EAAYoG,GACxD,IAAI3P,EAAK5D,KAAK4E,QACV/C,EAAS7B,KAAKyR,YACd3O,EAAOqK,EAAWrK,KAClB0Q,EAAarG,EAAWqG,WAC5B3R,EAAOgG,MAAQ/E,EAAK,GAAK0Q,EACzB3R,EAAOmG,OAASlF,EAAK,GAAK0Q,EAC1B3R,EAAOwP,MAAMxJ,MAAQ/E,EAAK,GAAK,KAC/BjB,EAAOwP,MAAMrJ,OAASlF,EAAK,GAAK,KAChCc,EAAGmL,WAAW/O,KAAK4R,iBAEnB,IAAK,IAAIzP,EAAInC,KAAKoS,mBAAmBlQ,OAAS,EAAGC,GAAK,EAAGA,IACvDnC,KAAKoS,mBAAmBjQ,GAAG+K,KAAKC,GAGlCvJ,EAAGK,YAAYL,EAAGM,WAAY,MAC9BN,EAAG2K,WAAW,EAAK,EAAK,EAAK,GAC7B3K,EAAG4K,MAAM5K,EAAG6K,kBACZ7K,EAAG8K,OAAO9K,EAAG+K,OACb/K,EAAGgL,UAAUhL,EAAGiL,IAAK0E,EAAwB3P,EAAG6P,KAAO7P,EAAGkL,qBAC1DlL,EAAGmL,WAAW/O,KAAK4R,iBACnB5R,KAAK0T,gBAAgBvG,GACrBnN,KAAKwP,cAAcrC,IAYrBwD,EAAYjR,UAAUiU,0BAA4B,SAAUxG,EAAYyG,EAAcL,GACpF,IAAI3P,EAAK5D,KAAK4E,QACV9B,EAAO8Q,EAAapQ,UACxBI,EAAG2J,gBAAgB3J,EAAG4J,YAAaoG,EAAaC,kBAChDjQ,EAAG8J,SAAS,EAAG,EAAG5K,EAAK,GAAIA,EAAK,IAChCc,EAAGK,YAAYL,EAAGM,WAAY0P,EAAaE,cAC3ClQ,EAAG2K,WAAW,EAAK,EAAK,EAAK,GAC7B3K,EAAG4K,MAAM5K,EAAG6K,kBACZ7K,EAAG8K,OAAO9K,EAAG+K,OACb/K,EAAGgL,UAAUhL,EAAGiL,IAAK0E,EAAwB3P,EAAG6P,KAAO7P,EAAGkL,qBAC1DlL,EAAGmL,WAAW/O,KAAK4R,iBACnB5R,KAAK0T,gBAAgBvG,GACrBnN,KAAKwP,cAAcrC,IAUrBwD,EAAYjR,UAAUqU,aAAe,SAAUC,EAAOC,GACpD,IAAIrQ,EAAK5D,KAAK4E,QACd5E,KAAKyF,aAAa,0BAClB,IAAIyO,EAActQ,EAAGuQ,aAEjBC,EAAWH,EAAMD,EACjBK,EAFc,EAEEL,EACpBpQ,EAAGmQ,aAAanQ,EAAG8L,UAAW0E,EAAUF,EAAaG,IAUvD1D,EAAYjR,UAAU4U,aAAe,SAAUnH,EAAYa,EAAYC,GAErE,IAAK,IAAI9L,EAAI,EAAGF,EAAKjC,KAAKoS,mBAAmBlQ,OAAQC,EAAIF,EAAIE,IACvDA,IAAMF,EAAK,EACbjC,KAAKoS,mBAAmBjQ,GAAG2L,MAAMX,EAAY,KAAMa,EAAYC,GAE/DjO,KAAKoS,mBAAmBjQ,GAAG2L,MAAMX,EAAYnN,KAAKoS,mBAAmBjQ,EAAI,KAU/EwO,EAAYjR,UAAU+R,UAAY,WAChC,OAAOzR,KAAKmR,SASdR,EAAYjR,UAAUkF,MAAQ,WAC5B,OAAO5E,KAAK8K,KASd6F,EAAYjR,UAAUgU,gBAAkB,SAAUvG,GAChD,IAAIrK,EAAOqK,EAAWrK,KAClByR,EAAWpH,EAAWqH,UAAUD,SAChCE,GAAoB,QAAezU,KAAK+R,qBAC5C,QAAe0C,EAAmB,EAAI3R,EAAK,GAAI,EAAIA,EAAK,IACxD,IAAI4R,GAAqB,QAAe1U,KAAK8R,qBAE5B,IAAbyC,IACF,QAAgBG,GAAqBH,GAGvCvU,KAAK2U,sBAAsBtE,EAAoCH,EAAclQ,KAAKgS,SAAUyC,IAC5FzU,KAAK2U,sBAAsBtE,EAAuCH,EAAclQ,KAAKgS,SAAU0C,IAC/F1U,KAAK4U,qBAAqBvE,EAAsD,MAAhCoC,KAAKC,MAAQ1S,KAAKwS,aAClExS,KAAK4U,qBAAqBvE,EAAqBlD,EAAWqH,UAAUK,MACpE7U,KAAK4U,qBAAqBvE,EAA2BlD,EAAWqH,UAAUM,aAS5EnE,EAAYjR,UAAU8P,cAAgB,SAAUrC,GAC9C,IACIH,EADApJ,EAAK5D,KAAK4E,QAEV+K,EAAc,EAClB3P,KAAK2M,UAAUG,QAAQ,SAAU8C,GAG/B,IAFA5C,EAAiC,mBAAlB4C,EAAQ5C,MAAuB4C,EAAQ5C,MAAMG,GAAcyC,EAAQ5C,iBAE7D6C,mBAAqB7C,aAAiB+H,kBAAoB/H,aAAiB8C,UAEzFF,EAAQ/L,UACX+L,EAAQoF,eAAYpS,EACpBgN,EAAQ/L,QAAUD,EAAGsE,iBAGvBtE,EAAGsK,cAActK,EAAG,UAAU2B,OAAOoK,KACrC/L,EAAGK,YAAYL,EAAGM,WAAY0L,EAAQ/L,SACtCD,EAAGO,cAAcP,EAAGM,WAAYN,EAAGW,mBAAoBX,EAAGG,QAC1DH,EAAGO,cAAcP,EAAGM,WAAYN,EAAGQ,eAAgBR,EAAGS,eACtDT,EAAGO,cAAcP,EAAGM,WAAYN,EAAGU,eAAgBV,EAAGS,kBACnC2I,aAAiB+H,mBAEpC/H,EAAMiI,WAEYrF,EAAQoF,YAAchI,IACtC4C,EAAQoF,UAAYhI,EACpBpJ,EAAGmC,WAAWnC,EAAGM,WAAY,EAAGN,EAAGyB,KAAMzB,EAAGyB,KAAMzB,EAAG8B,cAAesH,IAItEpJ,EAAGuL,UAAUnP,KAAKwM,mBAAmBoD,EAAQ7C,MAAO4C,UAC/C,GAAInQ,MAAMuQ,QAAQ/C,IAA2B,IAAjBA,EAAM9K,OACvClC,KAAK2U,sBAAsB/E,EAAQ7C,KAAMmD,EAAclQ,KAAKgS,SAAUhF,SACjE,GAAIxN,MAAMuQ,QAAQ/C,IAAUA,EAAM9K,QAAU,EACjD,OAAQ8K,EAAM9K,QACZ,KAAK,EAEH,YADA0B,EAAGsL,UAAUlP,KAAKwM,mBAAmBoD,EAAQ7C,MAAOC,EAAM,GAAIA,EAAM,IAGtE,KAAK,EAEH,YADApJ,EAAGoM,UAAUhQ,KAAKwM,mBAAmBoD,EAAQ7C,MAAOC,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAGhF,KAAK,EAEH,YADApJ,EAAGqM,UAAUjQ,KAAKwM,mBAAmBoD,EAAQ7C,MAAOC,EAAM,GAAIA,EAAM,GAAIA,EAAM,GAAIA,EAAM,IAG1F,QACE,WAEsB,iBAAVA,GAChBpJ,EAAG2L,UAAUvP,KAAKwM,mBAAmBoD,EAAQ7C,MAAOC,IAEtD3G,KAAKrG,QAUT2Q,EAAYjR,UAAUqP,WAAa,SAAUmG,GAC3C,OAAIA,GAAWlV,KAAK4R,kBAGT5R,KAAK4E,QACXmK,WAAWmG,GACdlV,KAAK4R,gBAAkBsD,EACvBlV,KAAKiS,kBAAoB,GACzBjS,KAAKkS,iBAAmB,IACjB,IAcXvB,EAAYjR,UAAUgM,cAAgB,SAAUyJ,EAAQ3S,GACtD,IAAIoB,EAAK5D,KAAK4E,QACVwQ,EAASxR,EAAG2H,aAAa/I,GAG7B,OAFAoB,EAAG6H,aAAa2J,EAAQD,GACxBvR,EAAG8H,cAAc0J,GACVA,GAWTzE,EAAYjR,UAAU2V,WAAa,SAAUC,EAAsBC,GACjE,IAAI3R,EAAK5D,KAAK4E,QACV+G,EAAiB3L,KAAK0L,cAAc4J,EAAsB1R,EAAGgI,iBAC7DN,EAAetL,KAAK0L,cAAc6J,EAAoB3R,EAAG4H,eACzD0J,EAAUtR,EAAGkI,gBAKjB,GAJAlI,EAAGmI,aAAamJ,EAASvJ,GACzB/H,EAAGmI,aAAamJ,EAAS5J,GACzB1H,EAAGoI,YAAYkJ,IAEVtR,EAAG4R,mBAAmB7J,EAAgB/H,EAAG6R,gBAAiB,CAC7D,IAAIC,EAAU,uCAAuCnQ,OAAO3B,EAAG+R,iBAAiBhK,IAChF,MAAM,IAAIrG,MAAMoQ,GAKlB,GAFA9R,EAAGgS,aAAajK,IAEX/H,EAAG4R,mBAAmBlK,EAAc1H,EAAG6R,gBAAiB,CACvDC,EAAU,qCAAqCnQ,OAAO3B,EAAG+R,iBAAiBrK,IAC9E,MAAM,IAAIhG,MAAMoQ,GAKlB,GAFA9R,EAAGgS,aAAatK,IAEX1H,EAAGiS,oBAAoBX,EAAStR,EAAGkS,aAAc,CAChDJ,EAAU,8BAA8BnQ,OAAO3B,EAAG+R,iBAAiBrK,IACvE,MAAM,IAAIhG,MAAMoQ,GAGlB,OAAOR,GAUTvE,EAAYjR,UAAU8M,mBAAqB,SAAUO,GAKnD,YAJqCnK,IAAjC5C,KAAKiS,kBAAkBlF,KACzB/M,KAAKiS,kBAAkBlF,GAAQ/M,KAAK4E,QAAQ4H,mBAAmBxM,KAAK4R,gBAAiB7E,IAGhF/M,KAAKiS,kBAAkBlF,IAUhC4D,EAAYjR,UAAUqW,qBAAuB,SAAUhJ,GAKrD,YAJoCnK,IAAhC5C,KAAKkS,iBAAiBnF,KACxB/M,KAAKkS,iBAAiBnF,GAAQ/M,KAAK4E,QAAQ0H,kBAAkBtM,KAAK4R,gBAAiB7E,IAG9E/M,KAAKkS,iBAAiBnF,IAY/B4D,EAAYjR,UAAUsW,wBAA0B,SAAU7I,EAAYiD,GACpE,IAAItN,EAAOqK,EAAWrK,KAClByR,EAAWpH,EAAWqH,UAAUD,SAChCO,EAAa3H,EAAWqH,UAAUM,WAClCmB,EAAS9I,EAAWqH,UAAUyB,OAGlC,OAFA,QAAe7F,IACf,QAAiBA,EAAW,EAAG,EAAG,GAAK0E,EAAahS,EAAK,IAAK,GAAKgS,EAAahS,EAAK,KAAMyR,GAAW0B,EAAO,IAAKA,EAAO,IAClH7F,GAUTO,EAAYjR,UAAUkV,qBAAuB,SAAUhF,EAAS5C,GAC9DhN,KAAK4E,QAAQ2K,UAAUvP,KAAKwM,mBAAmBoD,GAAU5C,IAS3D2D,EAAYjR,UAAUwW,oBAAsB,SAAUtG,EAAS5C,GAC7DhN,KAAK4E,QAAQuR,WAAWnW,KAAKwM,mBAAmBoD,GAAU5C,IAU5D2D,EAAYjR,UAAUiV,sBAAwB,SAAU/E,EAAS5C,GAC/DhN,KAAK4E,QAAQwR,iBAAiBpW,KAAKwM,mBAAmBoD,IAAU,EAAO5C,IAczE2D,EAAYjR,UAAU2W,sBAAwB,SAAUC,EAAYxT,EAAMN,EAAM+T,EAAQhM,GACtF,IAAI0C,EAAWjN,KAAK+V,qBAAqBO,GAErCrJ,EAAW,IAIfjN,KAAK4E,QAAQoK,wBAAwB/B,GACrCjN,KAAK4E,QAAQqK,oBAAoBhC,EAAUnK,EAAMN,GAAM,EAAO+T,EAAQhM,KAWxEoG,EAAYjR,UAAU8W,iBAAmB,SAAUzU,GAIjD,IAHA,IAAIwU,EAwED,SAAiCxU,GAGtC,IAFA,IAAIwU,EAAS,EAEJpU,EAAI,EAAGA,EAAIJ,EAAWG,OAAQC,IAAK,CAC1C,IAAIsU,EAAO1U,EAAWI,GACtBoU,GAAUE,EAAK3T,KAAO4T,GAAoBD,EAAKjU,MAGjD,OAAO+T,EAhFQI,CAAwB5U,GACjCwI,EAAS,EAEJpI,EAAI,EAAGA,EAAIJ,EAAWG,OAAQC,IAAK,CAC1C,IAAIsU,EAAO1U,EAAWI,GACtBnC,KAAKqW,sBAAsBI,EAAK1J,KAAM0J,EAAK3T,KAAM2T,EAAKjU,MNl4BzC,KMk4BwD+T,EAAQhM,GAC7EA,GAAUkM,EAAK3T,KAAO4T,GAAoBD,EAAKjU,QASnDmO,EAAYjR,UAAUoR,uBAAyB,YAC7C,QAAM9Q,KAAK0R,cACX1R,KAAK4R,gBAAkB,MAQzBjB,EAAYjR,UAAUsR,2BAA6B,aAcnDL,EAAYjR,UAAUwI,cAAgB,SAAUpF,EAAM8T,EAAUC,GAC9D,IAAIjT,EAAK5D,KAAK4E,QACVf,EAAUgT,GAAejT,EAAGsE,gBAG5ByF,EAAiB/J,EAAGyB,KAEpBR,EAASjB,EAAGyB,KACZ7C,EAAOoB,EAAG8B,cAYd,OAXA9B,EAAGK,YAAYL,EAAGM,WAAYL,GAE1B+S,EACFhT,EAAGmC,WAAWnC,EAAGM,WARP,EAQ0ByJ,EAAgB9I,EAAQrC,EAAMoU,GAElEhT,EAAGmC,WAAWnC,EAAGM,WAVP,EAU0ByJ,EAAgB7K,EAAK,GAAIA,EAAK,GARvD,EAQmE+B,EAAQrC,EAAM,MAG9FoB,EAAGO,cAAcP,EAAGM,WAAYN,EAAGW,mBAAoBX,EAAGG,QAC1DH,EAAGO,cAAcP,EAAGM,WAAYN,EAAGQ,eAAgBR,EAAGS,eACtDT,EAAGO,cAAcP,EAAGM,WAAYN,EAAGU,eAAgBV,EAAGS,eAC/CR,GAGF8M,EAtrBT,CAurBEmG,EAAA,GAyBF,SAASJ,GAAoBlU,GAC3B,OAAQA,GACN,KAAK8N,EACH,OAAO7H,WAAWE,kBAEpB,KAAK2H,EACH,OAAOyG,YAAYpO,kBAErB,KAAK2H,EACH,OAAO5M,YAAYiF,kBAGrB,QACE,OAAOlF,aAAakF,mBAI1B,U,YCjjCI,GAAsC,WACxC,IAAI1J,EAAiB,SAAuBE,EAAGC,GAW7C,OAVAH,EAAiBI,OAAOC,gBAAkB,CACxCC,UAAW,cACAC,OAAS,SAAUL,EAAGC,GACjCD,EAAEI,UAAYH,IACX,SAAUD,EAAGC,GAChB,IAAK,IAAIK,KAAKL,EACRC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,KAItDR,EAAeE,EAAGC,IAG3B,OAAO,SAAUD,EAAGC,GAClB,GAAiB,mBAANA,GAA0B,OAANA,EAAY,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAIpG,SAASW,IACPC,KAAKC,YAAcd,EAHrBF,EAAeE,EAAGC,GAMlBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,IAxBzC,GAkFtCiX,GAEJ,SAAU5W,GAQR,SAAS4W,EAAmBC,EAAOrG,GACjC,IAAItQ,EAAQF,EAAOR,KAAKI,KAAMiX,IAAUjX,KAEpCK,EAAUuQ,GAAe,GAkC7B,OA1BAtQ,EAAM4W,wBAAyB,UAM/B5W,EAAM6W,cAAgB,KAKtB7W,EAAM8W,eAAiB/W,EAAQgS,cAK/B/R,EAAMqM,UAAYtM,EAAQuM,SAM1BtM,EAAMoE,OACNuS,EAAMI,kBAAkB,QAAmB/W,EAAMgX,aAAajR,KAAK/F,IACnEA,EAAMiX,wBAA0BjX,EAAMiX,wBAAwBlR,KAAK/F,GACnEA,EAAMkX,yBAA2BlX,EAAMkX,yBAAyBnR,KAAK/F,GAC9DA,EAkPT,OA9RA,GAAU0W,EAAoB5W,GAqD9B4W,EAAmBtX,UAAU6X,wBAA0B,SAAUnV,EAAS+K,GACxE,IAAI8J,EAAQjX,KAAKyX,WAEjB,GAAIR,EAAMS,YAAY,gBAA6B,CACjD,IAAIC,EAAU,IAAI,IAAY,oBAA4B/U,EAAWuK,EAAY/K,GACjF6U,EAAMvN,cAAciO,KAUxBX,EAAmBtX,UAAU8X,yBAA2B,SAAUpV,EAAS+K,GACzE,IAAI8J,EAAQjX,KAAKyX,WAEjB,GAAIR,EAAMS,YAAY,iBAA8B,CAClD,IAAIE,EAAU,IAAI,IAAY,qBAA6BhV,EAAWuK,EAAY/K,GAClF6U,EAAMvN,cAAckO,KASxBZ,EAAmBtX,UAAUmY,MAAQ,SAAUxX,GAC7CL,KAAK2M,UAAYtM,EAAQuM,SAErB5M,KAAK0E,QACP1E,KAAK0E,OAAOyN,YAAYnS,KAAK2M,YAQjCqK,EAAmBtX,UAAU4X,aAAe,WACtCtX,KAAK0E,SACP1E,KAAK0E,OAAOoT,iBACL9X,KAAK0E,SAUhBsS,EAAmBtX,UAAUqY,aAAe,SAAU5K,GACpD,GAAInN,KAAKyX,WAAWO,kBAAmB,CAKrC,IAJA,IAAIC,GAAiB,EACjBC,GAAe,EACfC,OAAY,EAEPhW,EAAI,EAAGF,EAAKkL,EAAWkC,iBAAiBnN,OAAQC,EAAIF,EAAIE,IAAK,CACpE,IAAI8U,EAAQ9J,EAAWkC,iBAAiBlN,GAAG8U,MACvCmB,EAAWnB,EAAMoB,cAErB,GAAMD,aAAoBpB,EAA1B,CAKA,IAAIsB,EAAiBrB,EAAMsB,eAS3B,IAPIN,GAAkBK,IAAmBH,KACvCD,GAAe,EACfD,GAAiB,GAGnBE,EAAYG,EAERF,IAAapY,KACf,WAdAiY,GAAiB,EAkBrB,IAAI/G,EAAiB,OAAS/D,EAAWqL,MAAQ,UAAYN,EAExDlY,KAAK0E,QAAW1E,KAAK0E,OAAOkO,sBAAsB1B,KACrDlR,KAAKsX,eACLtX,KAAK0E,OAAS,IAAI,GAAY,CAC5B2N,cAAerS,KAAKoX,eACpBxK,SAAU5M,KAAK2M,UACfuE,eAAgBA,IAGdiH,IACFnY,KAAK0E,OAAO+M,YAAY0G,UAAYA,GAGtCnY,KAAKyY,sBAIT,OAAOzY,KAAK0Y,qBAAqBvL,IAOnC6J,EAAmBtX,UAAU+Y,mBAAqB,aASlDzB,EAAmBtX,UAAUgZ,qBAAuB,SAAUvL,GAC5D,OAAO,GAOT6J,EAAmBtX,UAAUiK,gBAAkB,WAC7C3J,KAAKsX,eAELlX,EAAOV,UAAUiK,gBAAgB/J,KAAKI,OAUxCgX,EAAmBtX,UAAUiZ,qBAAuB,SAAUnW,EAAMJ,EAAS+K,GAC3E,IAAI8J,EAAQjX,KAAKyX,WAEjB,GAAIR,EAAMS,YAAYlV,GAAO,EAC3B,QAAiBxC,KAAKkX,uBAAwB,EAAG,EAAG/J,EAAWqG,YAAarG,EAAWqG,WAAY,EAAG,GAAIrG,EAAWrK,KAAK,IAC1H,IAAI8V,EAAU,IAAI,IAAYpW,EAAMxC,KAAKkX,uBAAwB/J,EAAY/K,GAC7E6U,EAAMvN,cAAckP,KAUxB5B,EAAmBtX,UAAUmZ,UAAY,SAAUzW,EAAS+K,GAC1DnN,KAAK2Y,qBAAqB,cAA2BvW,EAAS+K,IAShE6J,EAAmBtX,UAAUoZ,WAAa,SAAU1W,EAAS+K,GAC3DnN,KAAK2Y,qBAAqB,eAA4BvW,EAAS+K,IAYjE6J,EAAmBtX,UAAUqZ,eAAiB,SAAUC,EAAO7L,EAAY8L,GACzE,IAAIC,GAAc,QAAe,CAAC/L,EAAWqG,WAAY,EAAG,EAAGrG,EAAWqG,WAAY,EAAG,GAAIwF,EAAM1O,SAC/F1G,EAAK5D,KAAK0E,OAAOE,QAErB,IAAKhB,EACH,OAAO,KAGT,IACIuV,EADQnZ,KAAKyX,WACO2B,YAExB,GAAID,EAAa,CACf,IAAIE,GAAmB,QAAelM,EAAWmM,2BAA4BN,EAAM1O,SAGnF,KAAK,SAAmB6O,EAAaE,GACnC,OAAO,KAIX,IAAItX,EAAa6B,EAAG0K,uBAEpB,IAAKvM,IAAeA,EAAWC,sBAE7B,OAAO,IAAIyG,WAGb,IAaIpH,EAbAkY,EAAIzR,KAAKC,MAAMmR,EAAY,IAC3BM,EAAI1R,KAAKC,MAAMmR,EAAY,IAC3BlT,EAAehG,KAAKmX,cAExB,IAAKnR,EAAc,CACjB,IAAIyT,EAAcjP,SAASC,cAAc,UACzCgP,EAAY5R,MAAQ,EACpB4R,EAAYzR,OAAS,EACrBhC,EAAeyT,EAAY7X,WAAW,MACtC5B,KAAKmX,cAAgBnR,EAGvBA,EAAa0E,UAAU,EAAG,EAAG,EAAG,GAGhC,IACE1E,EAAaiC,UAAUrE,EAAG/B,OAAQ0X,EAAGC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvDnY,EAAO2E,EAAa2E,aAAa,EAAG,EAAG,EAAG,GAAGtJ,KAC7C,MAAOuJ,GACP,OAAOvJ,EAGT,OAAgB,IAAZA,EAAK,GACA,KAGFA,GAGF2V,EA/RT,CAgSE0C,EAAA,GA8HF,U,oCClfI,GAAsC,WACxC,IAAIza,EAAiB,SAAuBE,EAAGC,GAW7C,OAVAH,EAAiBI,OAAOC,gBAAkB,CACxCC,UAAW,cACAC,OAAS,SAAUL,EAAGC,GACjCD,EAAEI,UAAYH,IACX,SAAUD,EAAGC,GAChB,IAAK,IAAIK,KAAKL,EACRC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,KAItDR,EAAeE,EAAGC,IAG3B,OAAO,SAAUD,EAAGC,GAClB,GAAiB,mBAANA,GAA0B,OAANA,EAAY,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAIpG,SAASW,IACPC,KAAKC,YAAcd,EAHrBF,EAAeE,EAAGC,GAMlBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,IAxBzC,GAiD/B4Z,GACW,iBADXA,GAEO,kBAFPA,GAGS,oBAHTA,GAIF,UAJEA,GAKY,sBALZA,GAMa,uBANbA,GAOW,sBAPXA,GAQS,mBARTA,GASS,mBATTA,GAUM,iBAVNA,GAWG,eAXHA,GAYH,SAEGC,GACM,iBAMbC,GAAwB,CAAC,CAC3B9M,KAAM6M,GACN9W,KAAM,EACNN,KAAM8N,KAMJwJ,GAAQ,GAOZ,SAASC,GAAUC,GACjB,OAAO,GAAK,EAAI,GAAKA,EAAI,IAAM,EAWjC,SAASC,GAAuBC,EAAiBC,EAAaH,GACtDA,KAAKE,IACTA,EAAgBF,GAAK,IAGvBE,EAAgBF,GAAG7R,KAAKgS,GAS1B,SAASC,GAAgBjN,EAAYkN,GACnC,IAAIC,EAAanN,EAAWkC,iBAAiBlC,EAAWmC,YAEpDgL,EAAWD,SACbA,GAAS,SAAgBA,GAAQ,SAAeC,EAAWD,OAAQlN,EAAWqH,UAAU+F,cAG1F,IAAIpF,EAEJmF,EAAWrD,MAAMe,kBAEjB,IAAK7C,EAAOqF,WAAY,CACtB,IAAIC,EAAatF,EAAOuF,yBAAyBvN,EAAWqH,UAAU+F,YAAYnB,YAE9EqB,IACFJ,GAAS,SAAgBA,EAAQI,IAIrC,OAAOJ,EAGT,SAASM,GAAYxF,EAAQ3U,GAC3B,MAAO,GAAG+E,OAAO4P,EAAOyF,SAAU,KAAKrV,QAAO,SAAgB/E,IAwBhE,IAykBA,GAvkBA,SAAUJ,GAQR,SAASya,EAAuBC,EAAWza,GACzC,IAAIC,EAAQF,EAAOR,KAAKI,KAAM8a,EAAW,CACvClO,SAAUvM,EAAQuM,YACd5M,KAONM,EAAMya,gBAAiB,EAOvBza,EAAM0a,gBAAiB,UAMvB1a,EAAM2a,UHxLD,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GG8LnD3a,EAAM4a,eAAiB,IAAIC,EAAA,EAAU,EAAG,EAAG,EAAG,GAM9C7a,EAAM8a,gBAAiB,SAAgB,EAAG,EAAG,GAM7C9a,EAAM+a,UAAY,CAAC,EAAG,GAMtB/a,EAAMgb,SAKNhb,EAAMib,cAAgBlb,EAAQiL,aAK9BhL,EAAMkb,gBAAkBnb,EAAQsL,eAmBhCrL,EAAMmb,SAAW,IAAI,EAAiBha,EAAsBC,GAE5DpB,EAAMmb,SAASzY,UAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAEzC,IAAI0Y,OAAkC9Y,IAAtBvC,EAAQqb,UAA0Brb,EAAQqb,UAAY,IAmBtE,OAbApb,EAAMqb,kBAAoB,IAAIC,EAAA,EAASF,GAMvCpb,EAAMub,iBAAmBxb,EAAQyb,iBAAmB,GAMpDxb,EAAMyb,YAAc,KACbzb,EAydT,OAnkBA,GAAUua,EAAwBza,GAiHlCya,EAAuBnb,UAAUmY,MAAQ,SAAUxX,GACjDD,EAAOV,UAAUmY,MAAMjY,KAAKI,KAAM,CAChC4M,SAAUvM,EAAQuM,WAGpB5M,KAAKub,cAAgBlb,EAAQiL,aAC7BtL,KAAKwb,gBAAkBnb,EAAQsL,eAC/B3L,KAAK6b,iBAAmBxb,EAAQyb,iBAAmB,GAE/C9b,KAAK0E,SACP1E,KAAKsb,SAAWtb,KAAK0E,OAAO2Q,WAAWrV,KAAKwb,gBAAiBxb,KAAKub,iBAItEV,EAAuBnb,UAAU+Y,mBAAqB,WACpDzY,KAAKsb,SAAWtb,KAAK0E,OAAO2Q,WAAWrV,KAAKwb,gBAAiBxb,KAAKub,eAClEvb,KAAK0E,OAAOqC,gBAAgB/G,KAAKyb,WASnCZ,EAAuBnb,UAAUsc,gBAAkB,SAAU9V,GAC3D,IAAI4U,EAAY9a,KAAKyX,WACjBwE,EAAY/V,EAAKkB,WACjB8U,EAAyBpB,EAAUqB,4BACvC,OAAOF,GAAa5U,EAAA,UAAoB4U,GAAa5U,EAAA,SAAmB4U,GAAa5U,EAAA,UAAoB6U,GAS3GrB,EAAuBnb,UAAUgZ,qBAAuB,SAAUvL,GAChE,IACIgI,EADQnV,KAAKyX,WACEO,kBAEnB,QAAK7C,MAID,SAAQiF,GAAgBjN,EAAYA,EAAWkN,UAI5ClF,EAAO/N,aAAegV,EAAA,UAU/BvB,EAAuBnb,UAAU2c,aAAe,SAAUlP,EAAYkN,EAAQiC,EAAUpC,GACtF,IAAI1F,EAAYrH,EAAWqH,UACvBsG,EAAY9a,KAAKyX,WACjB8E,EAAazB,EAAU9C,kBACvBwE,EAAWD,EAAW7B,yBAAyBlG,EAAU+F,YACzD9T,EAAiB8V,EAAWE,kBAAkBtP,EAAWqG,YACzD7M,EAAS4V,EAAWG,uBAAuBlI,EAAU+F,YACrDoC,GAAgB,QAAOJ,GAErBI,KAAiBxP,EAAWyP,cAChCzP,EAAWyP,YAAYD,GAAiB,IAO1C,IAJA,IAAIC,EAAczP,EAAWyP,YAAYD,GACrCE,EAAmB7c,KAAK2b,kBACxBmB,EAAOhV,KAAKiV,IAAIT,EAAWxB,EAAUkC,aAAcR,EAASS,aAAcnC,EAAUmC,cAE/EjD,EAAIsC,EAAUtC,GAAK8C,IAAQ9C,EAIlC,IAHA,IAAIkD,EAAYV,EAASW,0BAA0B9C,EAAQL,EAAGha,KAAKkb,gBAC/DkC,EAAiBZ,EAASa,cAAcrD,GAEnCT,EAAI2D,EAAUI,KAAM/D,GAAK2D,EAAUK,OAAQhE,EAClD,IAAK,IAAIC,EAAI0D,EAAUM,KAAMhE,GAAK0D,EAAUO,OAAQjE,EAAG,CACrD,IAAIhZ,GAAY,SAAgBwZ,EAAGT,EAAGC,EAAGxZ,KAAKob,gBAC1CsC,EAAW/C,GAAY4B,EAAY/b,GAGnC2Z,OAAc,EAGdjU,OAAO,EAOX,GALI2W,EAAiBc,YAAYD,KAE/BxX,GADAiU,EAAc0C,EAAiBe,IAAIF,IAChBxX,OAGhBiU,GAAeA,EAAYjU,KAAKuK,MAAQ8L,EAAW3B,SAGtD,GAFA1U,EAAOqW,EAAWsB,QAAQ7D,EAAGT,EAAGC,EAAGrM,EAAWqG,WAAYgB,EAAU+F,YAE/DJ,EAUH,GAAIna,KAAKgc,gBAAgB9V,GACvBiU,EAAYnT,QAAQd,OACf,CACL,IAAI4X,EAEJ5X,EAAK6X,iBACL5D,EAAYnT,QAAQ8W,QAftB3D,EAAc,IAAI,EAAY,CAC5BjU,KAAMA,EACNI,KAAMkW,EACN9X,OAAQ1E,KAAK0E,OACb+B,eAAgBA,EAChBE,OAAQA,IAEVkW,EAAiBmB,IAAIN,EAAUvD,GAanCF,GAAuBC,EAAiBC,EAAaH,GACrD,IAAIiE,EAAe/X,EAAK0U,SACxBgC,EAAYqB,IAAgB,EAExB/X,EAAKkB,aAAeC,EAAA,SACjB8F,EAAW+Q,UAAUC,YAAYF,IACpC9Q,EAAW+Q,UAAUE,QAAQ,CAAClY,EAAMyW,EAAeH,EAAS6B,mBAAmB7d,GAAY4c,OAcvGvC,EAAuBnb,UAAU4e,YAAc,SAAUnR,GACvDnN,KAAK+b,YAAc5O,EACnBnN,KAAK+a,gBAAiB,EACtB,IAAInX,EAAK5D,KAAK0E,OAAOE,QACrB5E,KAAK6Y,UAAUjV,EAAIuJ,GACnB,IAAIqH,EAAYrH,EAAWqH,UAEvB+H,EADYvc,KAAKyX,WACMO,kBACvBwE,EAAWD,EAAW7B,yBAAyBlG,EAAU+F,YACzDF,EAASD,GAAgBjN,EAAYA,EAAWkN,QAChDL,EAAIwC,EAAS+B,kBAAkB/J,EAAUM,WAAYyH,EAAWiC,YAKhEtE,EAAkB,GAEtB,GAAI/M,EAAWsR,WAAY,CACzB,IAAIC,EAAUlC,EAAS+B,kBAAkB/J,EAAUmK,eAAgBpC,EAAWiC,YAC1EC,EAAarE,GAAgBjN,EAAYA,EAAWsR,YACxDze,KAAKqc,aAAalP,EAAYsR,EAAYC,EAASxE,GAGrDla,KAAKqc,aAAalP,EAAYkN,EAAQL,EAAGE,GAezC,IAPA,IAAI0E,EAAc,GACdC,GAAM,QAAO7e,MACb8e,EAAO3R,EAAW2R,KAClBC,GAAQ,EAERC,EAAe9E,EAAgBF,GAE1B7X,EAAI,EAAGF,EAAK+c,EAAa9c,OAAQC,EAAIF,IAAME,EAAG,CACrD,IAEI3B,GADA0F,GADAiU,EAAc6E,EAAa7c,IACR+D,MACF1F,UAErB,GAAI2Z,EAAYhT,OAAQ,CAGtB,GAAc,KAFV8X,EAAQ/Y,EAAKgZ,SAASL,EAAKC,IAEd,CAEf5Y,EAAKiZ,cAAcN,GACnB,SAGFE,GAAQ,EAERH,EADIQ,GAAe,SAAgB5e,IACPye,EAO9B,GAJAjf,KAAK+a,gBAAiB,GAEE/a,KAAKqf,cAAc7C,EAAUhc,EAAWwZ,EAAI,EAAGE,GASvE,IAFA,IAAIoF,EAAU9C,EAASS,aAEdsC,EAAUvF,EAAI,EAAGuF,GAAWD,IAAWC,EAAS,CAGvD,GAFsBvf,KAAKqf,cAAc7C,EAAUhc,EAAW+e,EAASrF,GAGrE,OAKNla,KAAK0E,OAAOqK,WAAW/O,KAAKsb,UAC5Btb,KAAK0E,OAAO4O,YAAYnG,GAAa4R,GAKrC,IAJA,IAAIS,EAAKngB,OAAOwN,KAAKqN,GAAiB5H,IAAImN,QAAQC,KAAK,OACnDC,EAAUnL,EAAUyB,OAAO,GAC3B2J,EAAUpL,EAAUyB,OAAO,GAEtB4J,EAAI,EAAGC,EAAKN,EAAGtd,OAAQ2d,EAAIC,IAAMD,EACxC,KAAIE,EAAQP,EAAGK,GACXzC,EAAiBZ,EAASa,cAAc0C,GACxCC,GAAW,QAAOxD,EAASjW,YAAYwZ,GAAQ/f,KAAKqb,WACpD4E,EAAazD,EAAS0D,UAAUH,GAChCI,GAAWR,EAAUM,EAAW,KAAOD,EAAS,GAAK5C,GACrDgD,GAAWH,EAAW,GAAKL,IAAYI,EAAS,GAAK5C,GACrDiD,EAAY7L,EAAUM,WAAasI,EACnCkD,EAAQvG,GAAUgG,GAClBQ,EAAiBrG,EAAgB6F,GAErC,IAAS5d,EAAI,EAAGF,EAAKse,EAAere,OAAQC,EAAIF,IAAME,EAAG,CAGvD,IAFIgY,EAAcoG,EAAepe,IAEhBgF,OAAjB,CAKI3G,GADA0F,EAAOiU,EAAYjU,MACF1F,UADrB,IAAI0F,EA8BA+Y,EA5BAG,GAAe,SAAgB5e,GAC/BggB,EAAchgB,EAAU,GACxBigB,EAAcjgB,EAAU,IAC5B,QAAiBR,KAAKgb,eAAgB,EAAG,EAAG,GAAK7N,EAAWrK,KAAK,GAAKud,EAAYL,EAAS,KAAM,GAAK7S,EAAWrK,KAAK,GAAKud,EAAYL,EAAS,IAAKxL,EAAUD,WAAY4L,EAAUK,KAAgBJ,EAAUK,IAC/MzgB,KAAK0E,OAAOiQ,sBAAsBgF,GAAyB,EAAkB3Z,KAAKib,UAAWjb,KAAKgb,iBAClGhb,KAAK0E,OAAOyH,WAAWgO,EAAYrT,QACnC9G,KAAK0E,OAAOyH,WAAWnM,KAAKyb,UAC5Bzb,KAAK0E,OAAO8R,iBAAiBqD,IAG7B,IAFA,IAAIlK,EAAc,EAEXA,EAAcwK,EAAYhU,SAASjE,QAAQ,CAChD,IAAIwe,EAAkB,UAAY/Q,EAC9BgR,EAAc,GAAGpb,OAAOoU,GAA6B,KAAKpU,OAAOoK,EAAa,KAClF/L,EAAGsK,cAActK,EAAG8c,IACpB9c,EAAGK,YAAYL,EAAGM,WAAYiW,EAAYhU,SAASwJ,IACnD/L,EAAGuL,UAAUnP,KAAK0E,OAAO8H,mBAAmBmU,GAAchR,KACxDA,EAGJ,IAAK,IAAIiR,EAAe,EAAGA,EAAe5gB,KAAK6b,iBAAiB3Z,SAAU0e,EAAc,CACtF,IAAIC,EAAiB7gB,KAAK6b,iBAAiB+E,GAC3Chd,EAAGsK,cAActK,EAAG,UAAY+L,IAChC,IAAI9L,EAAUgd,EAAe/M,WAAWlQ,GACxCA,EAAGK,YAAYL,EAAGM,WAAYL,GAC9BD,EAAGuL,UAAUnP,KAAK0E,OAAO8H,mBAAmBqU,EAAe9T,MAAO4C,KAChEA,GAGAsP,EAAQG,KAAgBR,EAAcA,EAAYQ,GAAgB,GAE1D,IACVjS,EAAW2T,SAAU,GAGvB9gB,KAAK0E,OAAOkQ,qBAAqB+E,GAA2BsF,GAC5Djf,KAAK0E,OAAOkQ,qBAAqB+E,GAAgB2G,GACjDtgB,KAAK0E,OAAOkQ,qBAAqB+E,GAA8BqG,EAAS,IACxEhgB,KAAK0E,OAAOkQ,qBAAqB+E,GAA+BqG,EAAS,IACzEhgB,KAAK0E,OAAOkQ,qBAAqB+E,GAA6ByD,GAC9Dpd,KAAK0E,OAAOkQ,qBAAqB+E,GAA2BsG,EAAW,GAAKO,EAAcR,EAAS,GAAK5C,GACxGpd,KAAK0E,OAAOkQ,qBAAqB+E,GAA2BsG,EAAW,GAAKQ,EAAcT,EAAS,GAAK5C,GACxGpd,KAAK0E,OAAOwR,oBAAoByD,GAAwBU,GACxDra,KAAK0E,OAAOkQ,qBAAqB+E,GAAqBnF,EAAUM,YAChE9U,KAAK0E,OAAOkQ,qBAAqB+E,GAAenF,EAAUK,MAC1D7U,KAAK0E,OAAOqP,aAAa,EAAG/T,KAAKyb,SAASjY,aAI9CxD,KAAK0E,OAAO4P,aAAanH,EAAYnN,KAAKuX,wBAAyBvX,KAAKwX,0BAIxE,IAHA,IAAI3V,EAAS7B,KAAK0E,OAAO+M,YACrBoL,EAAmB7c,KAAK2b,kBAErBkB,EAAiBkE,kBAAkB,CACxC,IAAI5G,GAAAA,EAAc0C,EAAiBmE,OACvBlJ,UAiBd,OAFA3K,EAAW8T,oBAAoB9Y,MAJN,SAA4BmK,EAAKnF,GACxDoP,EAAW2E,YAAY/T,EAAWqH,UAAU+F,WAAYT,OAI1D9Z,KAAK8Y,WAAWlV,EAAIuJ,GACbtL,GAQTgZ,EAAuBnb,UAAUqB,QAAU,SAAUiY,GAGnD,IAFShZ,KAAK0E,OAAOE,QAGnB,OAAO,KAGT,IAAIuI,EAAanN,KAAK+b,YAEtB,IAAK5O,EACH,OAAO,KAGT,IAAI8J,EAAQjX,KAAKyX,WACb0J,GAAa,QAAehU,EAAWmM,2BAA4BN,EAAM1O,SACzEkK,EAAYrH,EAAWqH,UACvB2E,EAAclC,EAAMmC,YAExB,GAAID,KACG,UAAmB,SAAeA,EAAa3E,EAAU+F,YAAa4G,GACzE,OAAO,KAIX,IAAIhM,EAAS8B,EAAMe,kBACfwE,EAAWrH,EAAOuF,yBAAyBlG,EAAU+F,YAEzD,IAAKpF,EAAOqF,WAAY,CACtB,IAAIC,EAAa+B,EAASpD,YAE1B,GAAIqB,KACG,SAAmBA,EAAY0G,GAClC,OAAO,KAOb,IAFA,IAAItE,EAAmB7c,KAAK2b,kBAEnB3B,EAAIwC,EAAS+B,kBAAkB/J,EAAUM,YAAakF,GAAKwC,EAASS,eAAgBjD,EAAG,CAC9F,IAAIxZ,EAAYgc,EAAS4E,yBAAyBD,EAAYnH,GAC1D0D,EAAW/C,GAAYxF,EAAQ3U,GAEnC,GAAKqc,EAAiBc,YAAYD,GAAlC,CAIA,IAAIvD,EAAc0C,EAAiBe,IAAIF,GAEvC,GAAKvD,EAAYhT,OAAjB,CAIA,IAAI8Y,EAAazD,EAAS0D,UAAUlG,GAChCgG,GAAW,QAAOxD,EAASjW,YAAYyT,IACvCoD,EAAiBZ,EAASa,cAAcrD,GACxCjQ,GAAOoX,EAAW,GAAKlB,EAAW,IAAM7C,EAAiB5c,EAAU,GAAKwf,EAAS,GACjFhW,GAAOiW,EAAW,GAAKkB,EAAW,IAAM/D,EAAiB5c,EAAU,GAAKwf,EAAS,GACrF,OAAO7F,EAAYrQ,aAAaC,EAAKC,KAGvC,OAAO,MAeT6Q,EAAuBnb,UAAU2f,cAAgB,SAAU7C,EAAUhc,EAAW6gB,EAAMnH,GACpF,IAAIgD,EAAYV,EAAS8E,6BAA6B9gB,EAAW6gB,EAAMrhB,KAAKkb,gBAE5E,IAAKgC,EACH,OAAO,EAOT,IAJA,IAAIqE,GAAU,EACV1E,EAAmB7c,KAAK2b,kBACxBxG,EAASnV,KAAKyX,WAAWO,kBAEpBuB,EAAI2D,EAAUI,KAAM/D,GAAK2D,EAAUK,OAAQhE,EAClD,IAAK,IAAIC,EAAI0D,EAAUM,KAAMhE,GAAK0D,EAAUO,OAAQjE,EAAG,CACrD,IAAIkE,EAAW/C,GAAYxF,EAAQ,CAACkM,EAAM9H,EAAGC,IACzCrS,GAAS,EAEb,GAAI0V,EAAiBc,YAAYD,GAAW,CAC1C,IAAIvD,EAAc0C,EAAiBe,IAAIF,GAEnCvD,EAAYhT,SACd8S,GAAuBC,EAAiBC,EAAakH,GACrDla,GAAS,GAIRA,IACHoa,GAAU,GAKhB,OAAOA,GAGT1G,EAAuBnb,UAAU4X,aAAe,WAC9C,GAAItX,KAAK0E,OAAQ,CACf,IAAImY,EAAmB7c,KAAK2b,kBAC5BkB,EAAiB/P,SAAQ,SAAUqN,GACjC,OAAOA,EAAYrC,aAErB+E,EAAiBrO,QAGnBpO,EAAOV,UAAU4X,aAAa1X,KAAKI,OAOrC6a,EAAuBnb,UAAUiK,gBAAkB,WACjD,IAAIjF,EAAS1E,KAAK0E,OAEdA,IACOA,EAAOE,QACb4c,cAAcxhB,KAAKsb,iBACftb,KAAKsb,SACZ5W,EAAOkF,aAAa5J,KAAKyb,WAG3Brb,EAAOV,UAAUiK,gBAAgB/J,KAAKI,aAE/BA,KAAKyb,gBACLzb,KAAK2b,yBACL3b,KAAK+b,aAGPlB,EApkBT,CAqkBE,IC1rBF,GAvCA,WAKE,SAAS4G,EAAe1U,EAAM1L,GAC5BrB,KAAK+M,KAAOA,EACZ/M,KAAKqB,KAAOA,EAMZrB,KAAK0hB,SAAW,KAuBlB,OAfAD,EAAe/hB,UAAUoU,WAAa,SAAUlQ,GAC9C,IAAK5D,KAAK0hB,SAAU,CAClB,IAAI7d,EAAUD,EAAGsE,gBACjBtE,EAAGK,YAAYL,EAAGM,WAAYL,GAC9BD,EAAGO,cAAcP,EAAGM,WAAYN,EAAGQ,eAAgBR,EAAGS,eACtDT,EAAGO,cAAcP,EAAGM,WAAYN,EAAGU,eAAgBV,EAAGS,eACtDT,EAAGO,cAAcP,EAAGM,WAAYN,EAAGW,mBAAoBX,EAAGI,SAC1DJ,EAAGO,cAAcP,EAAGM,WAAYN,EAAGY,mBAAoBZ,EAAGI,SAC1DJ,EAAGmC,WAAWnC,EAAGM,WAAY,EAAGN,EAAGyB,KAAMrF,KAAKqB,KAAKa,OAAS,EAAG,EAAG,EAAG0B,EAAGyB,KAAMzB,EAAG8B,cAAe1F,KAAKqB,MACrGrB,KAAK0hB,SAAW7d,EAGlB,OAAO7D,KAAK0hB,UAGPD,EApCT,G,wBCmGWE,GACD,EADCA,GAED,EAFCA,GAGF,EAHEA,GAIA,EAJAA,GAKK,GALLA,GAMJ,GANIA,GAOH,EAiBGC,GAAY,GAQhB,SAASC,GAAa7U,GAC3B,GAAqB,iBAAVA,EACT,OAAO2U,GAGT,GAAqB,kBAAV3U,EACT,OAAO2U,GAGT,GAAqB,iBAAV3U,EACT,OAAI,SAAcA,GACT2U,GAAmBA,GAGrBA,GAGT,IAAKniB,MAAMuQ,QAAQ/C,GACjB,MAAM,IAAI1H,MAAM,yBAAyBC,OAAOuc,KAAKC,UAAU/U,KAGjE,IAAIgV,EAEJhV,EAKA,GAJkBgV,EAASC,OAAM,SAAUC,GACzC,MAAoB,iBAANA,KAId,OAAwB,IAApBF,EAAS9f,QAAoC,IAApB8f,EAAS9f,OAC7Byf,GAAmBA,GAGrBA,GAGT,GAA2B,iBAAhBK,EAAS,GAClB,MAAM,IAAI1c,MAAM,iDAAiDC,OAAOuc,KAAKC,UAAUC,KAGzF,IAAIG,EAAWP,GAAUI,EAAS,IAElC,QAAiBpf,IAAbuf,EACF,MAAM,IAAI7c,MAAM,qCAAqCC,OAAOuc,KAAKC,UAAUC,KAG7E,OAAOG,EAASC,cAAcJ,EAAS1X,MAAM,IA6BxC,SAAS+X,GAAaH,GAC3B,IAAII,EAAIJ,EAAEK,WACV,OAA2B,IAApBD,EAAEE,QAAQ,KAAcF,EAAI,KAAOA,EAQrC,SAASG,GAAY/f,GAC1B,GAAIA,EAAMR,OAAS,GAAKQ,EAAMR,OAAS,EACrC,MAAM,IAAIoD,MAAM,kEAGlB,MAAO,MAAMC,OAAO7C,EAAMR,OAAQ,KAAKqD,OAAO7C,EAAM4P,IAAI+P,IAAcK,KAAK,MAAO,KA4B7E,SAASC,GAA0BvgB,EAASwgB,GAKjD,YAJ0ChgB,IAAtCR,EAAQygB,kBAAkBD,KAC5BxgB,EAAQygB,kBAAkBD,GAAUvjB,OAAOwN,KAAKzK,EAAQygB,mBAAmB3gB,QAGtEE,EAAQygB,kBAAkBD,GAsB5B,SAASE,GAAiB1gB,EAAS4K,EAAO+V,GAE/C,GAAIvjB,MAAMuQ,QAAQ/C,IAA8B,iBAAbA,EAAM,GAAiB,CACxD,IAAImV,EAAWP,GAAU5U,EAAM,IAE/B,QAAiBpK,IAAbuf,EACF,MAAM,IAAI7c,MAAM,qCAAqCC,OAAOuc,KAAKC,UAAU/U,KAG7E,OAAOmV,EAASa,OAAO5gB,EAAS4K,EAAM1C,MAAM,GAAIyY,GAGlD,IAAIE,EAAYpB,GAAa7U,GAE7B,IAAKiW,EAAYtB,IAAqB,EACpC,OAAOU,GAEPrV,GAGF,IAAKiW,EAAYtB,IAAsB,EACrC,OAAO3U,EAAMuV,WAGf,IAAKU,EAAYtB,IAAqB,SAAmB/e,IAAbmgB,GAA0BA,GAAYpB,IAChF,OArCG,SAAsBvf,EAASwgB,GACpC,OAAOP,GAAaM,GAA0BvgB,EAASwgB,IAoC9CM,CAAa9gB,EAAS4K,EAAMuV,YAGrC,IAAKU,EAAYtB,IAAoB,SAAmB/e,IAAbmgB,GAA0BA,GAAYpB,IAC/E,OA1EG,SAAqBwB,GAC1B,IAAIzgB,GAAQ,SAAQygB,GAAO7Y,QAM3B,OAJI5H,EAAMR,OAAS,GACjBQ,EAAMyF,KAAK,GAGNsa,GAAY/f,EAAM4P,KAAI,SAAU8Q,EAAGjhB,GACxC,OAAOA,EAAI,EAAIihB,EAAI,IAAMA,MAkElBC,CAEPrW,GAGF,IAAKiW,EAAYtB,IAA2B,EAC1C,OAAOc,GAEPzV,GAGF,MAAM,IAAI1H,MAAM,yBAAyBC,OAAOyH,EAAO,oBAAoBzH,OAAOwd,EAAU,MAG9F,SAASO,GAAatW,GACpB,KAAM6U,GAAa7U,GAAS2U,IAC1B,MAAM,IAAIrc,MAAM,qCAAqCC,OAAOuc,KAAKC,UAAU/U,GAAQ,aAIvF,SAASuW,GAAcC,GACrB,IAAK,IAAIrhB,EAAI,EAAGA,EAAIqhB,EAAOthB,OAAQC,IACjCmhB,GAAaE,EAAOrhB,IAIxB,SAASshB,GAAazW,GACpB,KAAM6U,GAAa7U,GAAS2U,IAC1B,MAAM,IAAIrc,MAAM,oCAAoCC,OAAOuc,KAAKC,UAAU/U,GAAQ,aAItF,SAAS0W,GAAc1W,GACrB,KAAM6U,GAAa7U,GAAS2U,IAC1B,MAAM,IAAIrc,MAAM,qCAAqCC,OAAOuc,KAAKC,UAAU/U,GAAQ,aAIvF,SAAS2W,GAAgBC,EAAMC,GAC7B,GAAID,EAAK1hB,SAAW2hB,EAClB,MAAM,IAAIve,MAAM,WAAWC,OAAOse,EAAO,kCAAkCte,OAAOqe,EAAK1hB,OAAQ,aAInG,SAAS4hB,GAAmBF,EAAMC,GAChC,GAAID,EAAK1hB,OAAS2hB,EAChB,MAAM,IAAIve,MAAM,YAAYC,OAAOse,EAAO,kCAAkCte,OAAOqe,EAAK1hB,OAAQ,aAIpG,SAAS6hB,GAAmBH,EAAMC,GAChC,GAAID,EAAK1hB,OAAS2hB,EAChB,MAAM,IAAIve,MAAM,WAAWC,OAAOse,EAAO,kCAAkCte,OAAOqe,EAAK1hB,OAAQ,aAInG,SAAS8hB,GAAeJ,GACtB,GAAIA,EAAK1hB,OAAS,GAAM,EACtB,MAAM,IAAIoD,MAAM,iDAAiDC,OAAOqe,EAAM,aAUlF,SAASK,GAAyBL,EAAMM,GACtC,GA7L2BjB,EA6LTiB,GA5LX,SAAKjB,GAAa,GAAM,EA6L7B,MAAM,IAAI3d,MAAM,gEAAgEC,OAAOuc,KAAKC,UAAU6B,KA9LnG,IAAsBX,EAyNtB,SAASkB,GAAuBC,GACrC,MAAO,SAAWA,EAxBpBxC,GAAe,IAAI,CACjBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAC/BD,GAAgBC,EAAM,GACtBH,GAAaG,EAAK,IAClB,IAAI5W,EAAQ4W,EAAK,GAAGrB,WAOpB,OAL2C,IAAvCngB,EAAQL,WAAWygB,QAAQxV,IAC7B5K,EAAQL,WAAWoG,KAAK6E,IAGb5K,EAAQiiB,iBAAmB,KAAO,MAC/BrX,IAYpB4U,GAAe,IAAI,CACjBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAC/BD,GAAgBC,EAAM,GACtBH,GAAaG,EAAK,IAClB,IAAI5W,EAAQ4W,EAAK,GAAGrB,WAMpB,OAJ0C,IAAtCngB,EAAQkiB,UAAU9B,QAAQxV,IAC5B5K,EAAQkiB,UAAUnc,KAAK6E,GAGlBmX,GAAuBnX,KAG3B,IAAIuX,GAAwB,oBAEnC3C,GAAmB,QAAI,CACrBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAC/BD,GAAgBC,EAAM,GACtBN,GAAaM,EAAK,IAClB,IAAIY,EAAQ1B,GAAiB1gB,EAASwhB,EAAK,IACvCa,EAASb,EAAK,GAElB,IAAKpkB,MAAMuQ,QAAQ0U,GACjB,MAAM,IAAInf,MAAM,mDAMlB,IAHA,IAAIof,EAAYD,EAAOviB,OACnByiB,EAAU,IAAIlc,WAAuB,EAAZic,GAEpBviB,EAAI,EAAGA,EAAIuiB,EAAWviB,IAAK,CAClC,IAAIyiB,EAAYH,EAAOtiB,GAKnBghB,OAAQ,EAEZ,GAAyB,iBAAdyB,EACTzB,GAAQ,SAAWyB,OACd,CACL,IAAKplB,MAAMuQ,QAAQ6U,GACjB,MAAM,IAAItf,MAAM,wEAGlB,IAAIuf,EAAWD,EAAU1iB,OAEzB,GAAiB,IAAb2iB,EACF1B,EAAQyB,MACH,CACL,GAAiB,IAAbC,EACF,MAAM,IAAIvf,MAAM,qDAAqDC,OAAOsf,IAG9E1B,EAAQ,CAACyB,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAI,IAIvD,IAAIra,EAAa,EAAJpI,EACbwiB,EAAQpa,GAAU4Y,EAAM,GACxBwB,EAAQpa,EAAS,GAAK4Y,EAAM,GAC5BwB,EAAQpa,EAAS,GAAK4Y,EAAM,GAC5BwB,EAAQpa,EAAS,GAAgB,IAAX4Y,EAAM,GAGzB/gB,EAAQ0Z,kBACX1Z,EAAQ0Z,gBAAkB,IAG5B,IAAIgJ,EAAc,GAAGvf,OAAOgf,GAAuB,KAAKhf,OAAOnD,EAAQ0Z,gBAAgB5Z,OAAQ,KAC3F2e,EAAiB,IAAI,GAAeiE,EAAaH,GAErD,OADAviB,EAAQ0Z,gBAAgB3T,KAAK0Y,GACtB,aAAatb,OAAOuf,EAAa,YAAYvf,OAAOif,EAAO,cAAcjf,OAAOmf,EAAW,eAGtG,IAAIK,GAAsB,eAuP1B,SAASC,GAAiB7C,GACxB,MAAO,CACLC,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAC/BD,GAAgBC,EAAM,GAItB,IAFA,IAAIphB,EAAOmf,GAEFxf,EAAI,EAAGA,EAAIyhB,EAAK1hB,OAAQC,IAC/BK,GAAQqf,GAAa+B,EAAKzhB,IAG5B,GAAIK,IAASmf,GACX,MAAM,IAAIrc,MAAM,mDAAmDC,OAAOuc,KAAKC,UAAU6B,GAAO,aAMlG,OADAphB,IAASmf,GACF,IAAIpc,OAAOud,GAAiB1gB,EAASwhB,EAAK,GAAIphB,GAAO,KAAK+C,OAAO4c,EAAU,KAAK5c,OAAOud,GAAiB1gB,EAASwhB,EAAK,GAAIphB,GAAO,OAkB9I,SAASyiB,GAAoB9C,GAC3B,MAAO,CACLC,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAC/BE,GAAmBF,EAAM,GAEzB,IAAK,IAAIzhB,EAAI,EAAGA,EAAIyhB,EAAK1hB,OAAQC,IAC/BuhB,GAAcE,EAAKzhB,IAGrB,IAAI+iB,EAAS,GAKb,OAJAA,EAAStB,EAAKtR,KAAI,SAAU6S,GAC1B,OAAOrC,GAAiB1gB,EAAS+iB,MAChCzC,KAAK,IAAInd,OAAO4c,EAAU,MAC7B+C,EAAS,IAAI3f,OAAO2f,EAAQ,OA7SlCtD,GAAgB,KAAI,CAClBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAC/BE,GAAmBF,EAAM,GACzBG,GAAmBH,EAAM,GACzB,IAAIwB,EAAOxB,EAAK,GAEhB,KAAMmB,MAAuB3iB,EAAQijB,WAAY,CAI/C,IAHA,IAAIC,EAAW,GACX3gB,EAAYvC,EAAQuC,WAAa,EAE5BxC,EAAI,EAAGA,EAAIwC,EAAWxC,IAAK,CAClC,IAAIojB,EAAazd,KAAKc,MAAMzG,EAAI,GAC5BqH,EAAYrH,EAAI,EAEhBqH,IAAc7E,EAAY,GAAmB,IAAd6E,IAEjCA,EAAY,GAGd,IAAIgc,EAAc,GAAGjgB,OAAOoU,GAA6B,KAAKpU,OAAOggB,EAAY,KACjFD,GAAY,2BAA2B/f,OAAOpD,EAAI,EAAG,wCAAwCoD,OAAOigB,EAAa,qCAAqCjgB,OAAOiE,EAAW,6BAG1KpH,EAAQijB,UAA6B,aAAI,4GAA4G9f,OAAOoU,GAA8B,sCAAsCpU,OAAOoU,GAA+B,iBAAiBpU,OAAO+f,EAAU,uBAG1S,IAAIG,EAAiB3C,GAAiB1gB,EAASgjB,GAC3CM,EAAoB5C,GAAiB1gB,EAASwhB,EAAK,IAAM,GACzD+B,EAAoB7C,GAAiB1gB,EAASwhB,EAAK,IAAM,GAC7D,MAAO,GAAGre,OAAOwf,GAAqB,KAAKxf,OAAOkgB,EAAgB,MAAMlgB,OAAOmgB,EAAmB,MAAMngB,OAAOogB,EAAmB,OAGtI/D,GAAgB,KAAI,CAClBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAE/B,OADAD,GAAgBC,EAAM,GACf,WAGXhC,GAAgB,KAAI,CAClBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAE/B,OADAD,GAAgBC,EAAM,GACf,WAGXhC,GAAsB,WAAI,CACxBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAE/B,OADAD,GAAgBC,EAAM,GACf,iBAGXhC,GAAU,KAAO,CACfQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,IAAIre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAAOre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG5GhC,GAAU,KAAO,CACfQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,IAAIre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAAOre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG5GhC,GAAU,KAAO,CACfQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,IAAIre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAAOre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG5GhC,GAAU,KAAO,CACfQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,IAAIre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAAOre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG5GhC,GAAiB,MAAI,CACnBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAC/BD,GAAgBC,EAAM,GACtBL,GAAcK,GACd,IAAIgC,EAAM9C,GAAiB1gB,EAASwhB,EAAK,IACrC7G,EAAM+F,GAAiB1gB,EAASwhB,EAAK,IACzC,MAAO,SAASre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,MAAMre,OAAOqgB,EAAK,MAAMrgB,OAAOwX,EAAK,OAGnG6E,GAAU,KAAO,CACfQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,OAAOre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,MAAMre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG9GhC,GAAU,KAAO,CACfQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,OAAOre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,MAAMre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG9GhC,GAAe,IAAI,CACjBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,OAAOre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG7DhC,GAAiB,MAAI,CACnBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,SAASre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG/DhC,GAAiB,MAAI,CACnBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,SAASre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,aAG/DhC,GAAgB,KAAI,CAClBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,QAAQre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG9DhC,GAAe,IAAI,CACjBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,OAAOre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG7DhC,GAAe,IAAI,CACjBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,OAAOre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG7DhC,GAAgB,KAAI,CAClBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAI/B,OAHAE,GAAmBF,EAAM,GACzBG,GAAmBH,EAAM,GACzBL,GAAcK,GACS,IAAhBA,EAAK1hB,OAAe,QAAQqD,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,MAAMre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,KAAO,QAAQre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG7LhC,GAAU,KAAO,CACfQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,IAAIre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAAOre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG5GhC,GAAU,MAAQ,CAChBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,IAAIre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,QAAQre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG7GhC,GAAU,KAAO,CACfQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,IAAIre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAAOre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OAG5GhC,GAAU,MAAQ,CAChBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBL,GAAcK,GACP,IAAIre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,QAAQre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OA8B7GhC,GAAU,MAAQoD,GAAiB,MACnCpD,GAAU,MAAQoD,GAAiB,MACnCpD,GAAU,KAAO,CACfQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAG/B,OAFAD,GAAgBC,EAAM,GACtBF,GAAcE,EAAK,IACZ,KAAKre,OAAOud,GAAiB1gB,EAASwhB,EAAK,IAAK,OA0B3DhC,GAAe,IAAIqD,GAAoB,MACvCrD,GAAe,IAAIqD,GAAoB,MACvCrD,GAAmB,QAAI,CACrBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAC/BD,GAAgBC,EAAM,GACtBL,GAAcK,GACd,IAAIgC,EAAM9C,GAAiB1gB,EAASwhB,EAAK,IACrC7G,EAAM+F,GAAiB1gB,EAASwhB,EAAK,IACrC5W,EAAQ8V,GAAiB1gB,EAASwhB,EAAK,IAC3C,MAAO,IAAIre,OAAOyH,EAAO,QAAQzH,OAAOqgB,EAAK,QAAQrgB,OAAOyH,EAAO,QAAQzH,OAAOwX,EAAK,OAG3F6E,GAAiB,MAAI,CACnBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAC/BE,GAAmBF,EAAM,GACzBG,GAAmBH,EAAM,GACzBL,GAAcK,GACd,IAAIiC,EAAajC,EAAKtR,KAAI,SAAUwT,GAClC,OAAOhD,GAAiB1gB,EAAS0jB,EAAKnE,OAExC,MAAO,MAAMpc,OAAOqe,EAAK1hB,OAAQ,KAAKqD,OAAOsgB,EAAWnD,KAAK,MAAO,OAGxEd,GAAiB,MAAI,CACnBQ,cAAe,SAAuBwB,GACpC,OAAOjC,IAETqB,OAAQ,SAAgB5gB,EAASwhB,GAC/BE,GAAmBF,EAAM,GACzBG,GAAmBH,EAAM,GACzBL,GAAcK,GACd,IAAIlhB,EAEJkhB,EAEoB,IAAhBA,EAAK1hB,QACPQ,EAAMyF,KAAK,GAGb,IAAI0d,EAAajC,EAAKtR,KAAI,SAAUwT,EAAK3jB,GACvC,OAAO2gB,GAAiB1gB,EAAS0jB,EAAKnE,KAAsBxf,EAAI,EAAI,WAAa,OAEnF,MAAO,MAAMoD,OAAOqe,EAAK1hB,OAAQ,KAAKqD,OAAOsgB,EAAWnD,KAAK,MAAO,OAGxEd,GAAuB,YAAI,CACzBQ,cAAe,SAAuBwB,GAGpC,IAFA,IAAIphB,EAAOmf,GAAmBA,GAErBxf,EAAI,EAAGA,EAAIyhB,EAAK1hB,OAAQC,GAAK,EACpCK,GAAcqf,GAAa+B,EAAKzhB,IAGlC,OAAOK,GAETwgB,OAAQ,SAAgB5gB,EAASwhB,EAAMmC,GACrC/B,GAAeJ,GACfE,GAAmBF,EAAM,GAEzB,IACIoC,EADAxjB,EAAOohB,EAAK,GAGhB,OAAQphB,EAAK,IACX,IAAK,SACHwjB,EAAgB,EAChB,MAEF,IAAK,cACHA,EAAgBxjB,EAAK,GACrB,MAEF,QACEwjB,EAAgB,KAGpB,IAAKA,EACH,MAAM,IAAI1gB,MAAM,oEAAsEC,OAAOuc,KAAKC,UAAUvf,KAI9G,IAAIugB,OAA4BngB,IAAjBmjB,EAA6BA,EAAepE,GACvDsE,EAAarE,GAAuB,YAAEQ,cAAcwB,GAAQb,EAChEkB,GAAyBL,EAAMqC,GAK/B,IAJA,IAAIC,EAAQpD,GAAiB1gB,EAASwhB,EAAK,IACvCuC,EAAW9D,GAAa2D,GACxBd,EAAS,GAEJ/iB,EAAI,EAAGA,EAAIyhB,EAAK1hB,OAAS,EAAGC,GAAK,EAAG,CAC3C,IAAIikB,EAAQtD,GAAiB1gB,EAASwhB,EAAKzhB,IACvCkkB,EAAUnB,GAAUpC,GAAiB1gB,EAASwhB,EAAKzhB,EAAI,GAAI8jB,GAC3DK,EAAQxD,GAAiB1gB,EAASwhB,EAAKzhB,EAAI,IAC3CokB,EAAUzD,GAAiB1gB,EAASwhB,EAAKzhB,EAAI,GAAI8jB,GACrDf,EAAS,OAAO3f,OAAO8gB,EAAS,MAAM9gB,OAAOghB,EAAS,iBAAiBhhB,OAAO2gB,EAAO,OAAO3gB,OAAO6gB,EAAO,SAAS7gB,OAAO+gB,EAAO,OAAO/gB,OAAO6gB,EAAO,kBAAkB7gB,OAAO4gB,EAAU,MAG3L,OAAOjB,IAGXtD,GAAiB,MAAI,CACnBQ,cAAe,SAAuBwB,GAGpC,IAFA,IAAIphB,EAAOmf,GAEFxf,EAAI,EAAGA,EAAIyhB,EAAK1hB,OAAQC,GAAK,EACpCK,GAAcqf,GAAa+B,EAAKzhB,IAIlC,OADAK,GAAcqf,GAAa+B,EAAKA,EAAK1hB,OAAS,KAGhD8gB,OAAQ,SAAgB5gB,EAASwhB,EAAMmC,GACrC/B,GAAeJ,GACfE,GAAmBF,EAAM,GACzB,IAAIb,OAA4BngB,IAAjBmjB,EAA6BA,EAAepE,GACvDsE,EAAarE,GAAiB,MAAEQ,cAAcwB,GAAQb,EAC1DkB,GAAyBL,EAAMqC,GAK/B,IAJA,IAAIC,EAAQpD,GAAiB1gB,EAASwhB,EAAK,IACvC4C,EAAW1D,GAAiB1gB,EAASwhB,EAAKA,EAAK1hB,OAAS,GAAI+jB,GAC5Df,EAAS,KAEJ/iB,EAAIyhB,EAAK1hB,OAAS,EAAGC,GAAK,EAAGA,GAAK,EAAG,CAC5C,IAAIskB,EAAQ3D,GAAiB1gB,EAASwhB,EAAKzhB,IACvCukB,EAAS5D,GAAiB1gB,EAASwhB,EAAKzhB,EAAI,GAAI8jB,GACpDf,EAAS,IAAI3f,OAAO2gB,EAAO,QAAQ3gB,OAAOkhB,EAAO,OAAOlhB,OAAOmhB,EAAQ,OAAOnhB,OAAO2f,GAAUsB,EAAU,KAG3G,OAAOtB,IAGXtD,GAAgB,KAAI,CAClBQ,cAAe,SAAuBwB,GAGpC,IAFA,IAAIphB,EAAOmf,GAEFxf,EAAI,EAAGA,EAAIyhB,EAAK1hB,OAAQC,GAAK,EACpCK,GAAcqf,GAAa+B,EAAKzhB,IAIlC,OADAK,GAAcqf,GAAa+B,EAAKA,EAAK1hB,OAAS,KAGhD8gB,OAAQ,SAAgB5gB,EAASwhB,EAAMmC,IA3jBzC,SAAuBnC,GACrB,GAAIA,EAAK1hB,OAAS,GAAM,EACtB,MAAM,IAAIoD,MAAM,gDAAgDC,OAAOqe,EAAM,aA0jB7E+C,CAAc/C,GACdE,GAAmBF,EAAM,GACzB,IAAIb,OAA4BngB,IAAjBmjB,EAA6BA,EAAepE,GACvDsE,EAAarE,GAAgB,KAAEQ,cAAcwB,GAAQb,EACzDkB,GAAyBL,EAAMqC,GAE/B,IAAK,IAAI9jB,EAAI,EAAGA,EAAIyhB,EAAK1hB,OAAS,EAAGC,GAAK,EACxCuhB,GAAcE,EAAKzhB,IAGrB,IAAIqkB,EAAW1D,GAAiB1gB,EAASwhB,EAAKA,EAAK1hB,OAAS,GAAI+jB,GAC5Df,EAAS,KAEb,IAAS/iB,EAAIyhB,EAAK1hB,OAAS,EAAGC,GAAK,EAAGA,GAAK,EAAG,CAC5C,IAAIykB,EAAY9D,GAAiB1gB,EAASwhB,EAAKzhB,IAC3CukB,EAAS5D,GAAiB1gB,EAASwhB,EAAKzhB,EAAI,GAAI8jB,GACpDf,EAAS,IAAI3f,OAAOqhB,EAAW,OAAOrhB,OAAOmhB,EAAQ,OAAOnhB,OAAO2f,GAAUsB,EAAU,KAGzF,OAAOtB,ICn8BX,IAAI,GAAsC,WACxC,IAAIjmB,EAAiB,SAAuBE,EAAGC,GAW7C,OAVAH,EAAiBI,OAAOC,gBAAkB,CACxCC,UAAW,cACAC,OAAS,SAAUL,EAAGC,GACjCD,EAAEI,UAAYH,IACX,SAAUD,EAAGC,GAChB,IAAK,IAAIK,KAAKL,EACRC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,KAItDR,EAAeE,EAAGC,IAG3B,OAAO,SAAUD,EAAGC,GAClB,GAAiB,mBAANA,GAA0B,OAANA,EAAY,MAAM,IAAIS,UAAU,uBAAyBC,OAAOV,GAAK,iCAIpG,SAASW,IACPC,KAAKC,YAAcd,EAHrBF,EAAeE,EAAGC,GAMlBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOa,OAAOd,IAAMW,EAAGL,UAAYN,EAAEM,UAAW,IAAIK,IAxBzC,GAkH1C,SAAS8mB,GAAWxV,EAAO1M,GACzB,IAAI2G,EAAe,wBAAwB/F,OAAOqU,GAA0B,wBAAwBrU,OAAOoU,GAAyB,yBAAyBpU,OAAOoU,GAA8B,yBAAyBpU,OAAOoU,GAA+B,yBAAyBpU,OAAOoU,GAA6B,yBAAyBpU,OAAOoU,GAA2B,yBAAyBpU,OAAOoU,GAA2B,yBAAyBpU,OAAOoU,GAAgB,qHAAqHpU,OAAOqU,GAA0B,yCAAyCrU,OAAOoU,GAA2B,OAAOpU,OAAOoU,GAA6B,OAAOpU,OAAOoU,GAA8B,mCAAmCpU,OAAOoU,GAA2B,OAAOpU,OAAOoU,GAA6B,OAAOpU,OAAOoU,GAA+B,wDAAwDpU,OAAOoU,GAAyB,YAAYpU,OAAOqU,GAA0B,MAAMrU,OAAOoU,GAAgB,sBAKvlCvX,EAAU,CACZiiB,kBAAkB,EAClBC,UAAW,GACXviB,WAAY,GACZ8gB,kBAAmB,GACnBwC,UAAW,GACX1gB,UAAWA,GAETmiB,EAAW,GAEf,QAAoBlkB,IAAhByO,EAAM8R,MAAqB,CAC7B,IAAIA,EAAQL,GAAiB1gB,EAASiP,EAAM8R,MAAOxB,IACnDmF,EAAS3e,KAAK,WAAW5C,OAAO4d,EAAO,MAGzC,QAAuBvgB,IAAnByO,EAAM0V,SAAwB,CAChC,IAAIA,EAAWjE,GAAiB1gB,EAASiP,EAAM0V,SAAUpF,IACzDmF,EAAS3e,KAAK,sBAAsB5C,OAAOwhB,EAAU,2BAA2BxhB,OAAOwhB,EAAU,wDAGnG,QAAuBnkB,IAAnByO,EAAM2V,SAAwB,CAChC,IAAIA,EAAWlE,GAAiB1gB,EAASiP,EAAM2V,SAAUrF,IACzDmF,EAAS3e,KAAK,sBAAsB5C,OAAOyhB,EAAU,oEAGvD,QAAyBpkB,IAArByO,EAAM4V,WAA0B,CAClC,IAAIA,EAAanE,GAAiB1gB,EAASiP,EAAM4V,WAAYtF,IAC7DmF,EAAS3e,KAAK,8BAA8B5C,OAAO0hB,EAAY,qZAGjE,QAAoBrkB,IAAhByO,EAAM6V,MAAqB,CAC7B,IAAIA,EAAQpE,GAAiB1gB,EAASiP,EAAM6V,MAAOvF,IACnDmF,EAAS3e,KAAK,yCAAyC5C,OAAO2hB,EAAO,QAGvE,QAAyBtkB,IAArByO,EAAM8V,WAA0B,CAClC,IAAIA,EAAarE,GAAiB1gB,EAASiP,EAAM8V,WAAYxF,IAC7DmF,EAAS3e,KAAK,iCAAiC5C,OAAO4hB,EAAY,iDAKpE,IAAIva,EAAW,GACXwa,EAAehlB,EAAQkiB,UAAUpiB,OAErC,GAAIklB,EAAe,IAAM/V,EAAMiT,UAC7B,MAAM,IAAIhf,MAAM,wCAAwCC,OAAOnD,EAAQkiB,UAAW,MAuBpF,IApBA,IAAI+C,EAAU,SAAiBllB,GAC7B,IAAIiiB,EAAehiB,EAAQkiB,UAAUniB,GAErC,KAAMiiB,KAAgB/S,EAAMiT,WAC1B,MAAM,IAAIhf,MAAM,YAAYC,OAAO6e,EAAc,yBAGnD,IAAIzD,EAAcwD,GAAuBC,GAEzCxX,EAAS+T,GAAe,WACtB,IAAI3T,EAAQqE,EAAMiT,UAAUF,GAM5B,MAJqB,iBAAVpX,IACTA,EAAQ2V,GAA0BvgB,EAAS4K,SAG5BpK,IAAVoK,EAAsBA,GAAS,UAIjC7K,EAAI,EAAGA,EAAIilB,IAAgBjlB,EAClCklB,EAAQllB,GAGV,IAAImlB,EAAsBjoB,OAAOwN,KAAKD,GAAU0F,KAAI,SAAUvF,GAC5D,MAAO,iBAAiBxH,OAAOwH,EAAM,QAEnClE,EAAef,KAAKgB,KAAKnE,EAAY,GACzC2iB,EAAoBnf,KAAK,qBAAqB5C,OAAOoU,GAA6B,KAAKpU,OAAOsD,EAAc,OAExGzG,EAAQ0Z,iBACVwL,EAAoBnf,KAAK,qBAAqB5C,OAAOgf,GAAuB,KAAKhf,OAAOnD,EAAQ0Z,gBAAgB5Z,OAAQ,OAG1H,IAAIqlB,EAAqBloB,OAAOwN,KAAKzK,EAAQijB,WAAW/S,KAAI,SAAUvF,GACpE,OAAO3K,EAAQijB,UAAUtY,MAG3B,MAAO,CACLzB,aAAcA,EACdK,eAHmB,gNAAgNpG,OAAOoU,GAAwB,yBAAyBpU,OAAOoU,GAA2B,yBAAyBpU,OAAOoU,GAA8B,yBAAyBpU,OAAOoU,GAA+B,yBAAyBpU,OAAOoU,GAAqB,yBAAyBpU,OAAOoU,GAAe,aAAapU,OAAO+hB,EAAoB5E,KAAK,MAAO,YAAYnd,OAAOgiB,EAAmB7E,KAAK,MAAO,+DAA+Dnd,OAAOoU,GAAwB,oCAAoCpU,OAAOoU,GAAwB,oCAAoCpU,OAAOoU,GAAwB,oCAAoCpU,OAAOoU,GAAwB,8EAA8EpU,OAAOoU,GAA6B,oCAAoCpU,OAAOuhB,EAASpE,KAAK,MAAO,gKAAgKnd,OAAOoU,GAA2B,YAI/xC/M,SAAUA,EACVkP,gBAAiB1Z,EAAQ0Z,iBAgB7B,IAAI0L,GAEJ,SAAUpnB,GAOR,SAASonB,EAAe5W,GACtB,IAAItQ,EAAQN,KAERK,EAAUuQ,GAAc,QAAO,GAAIA,GAAe,GAClDS,EAAQhR,EAAQgR,OAAS,UACtBhR,EAAQgR,MACf,IAAIqK,EAAYrb,EAAQqb,UAoCxB,cAnCOrb,EAAQqb,WACfpb,EAAQF,EAAOR,KAAKI,KAAMK,IAAYL,MAMhCynB,SAAWpnB,EAAQqnB,QAMzBpnB,EAAMqnB,oBAAsB/gB,IAM5BtG,EAAMsnB,OAASvW,EAMf/Q,EAAMunB,WAAanM,EAMnBpb,EAAMwnB,gBAAkBxnB,EAAMsnB,OAAOtD,WAAa,GAElDhkB,EAAM+W,kBAAkB,WAAsB/W,EAAMynB,qBAE7CznB,EAqLT,OArOA,GAAUknB,EAAgBpnB,GA0D1BonB,EAAe9nB,UAAUsoB,WAAa,SAAU3N,EAAQvF,GACtD,IAAIK,EAASnV,KAAKioB,YAClB,OAAOjoB,KAAKynB,SAAoC,mBAAlBznB,KAAKynB,SAA0BznB,KAAKynB,SAASpN,EAAQvF,GAAc9U,KAAKynB,SAAWtS,EAAS,CAACA,GAAU,IAOvIqS,EAAe9nB,UAAUsY,gBAAkB,WACzC,OAEEhY,KAAKkoB,gBAAgB/S,QAAUnV,KAAKioB,aAQxCT,EAAe9nB,UAAUyoB,eAAiB,WACxC,IAAIhT,EAASnV,KAAKgY,kBAClB,OAAO7C,EAASA,EAAO/N,WAAa,eAOtCogB,EAAe9nB,UAAUqoB,oBAAsB,WACzC/nB,KAAKioB,aACPjoB,KAAKooB,SAASpoB,KAAK4nB,SASvBJ,EAAe9nB,UAAU2oB,oBAAsB,WAC7C,IAAIlT,EAASnV,KAAKioB,YAClB,OAAO9S,GAAU,cAAeA,EAASA,EAAOxQ,UAAY,GAG9D6iB,EAAe9nB,UAAU4oB,eAAiB,WACxC,IAAIC,EAAc1B,GAAW7mB,KAAK4nB,OAAQ5nB,KAAKqoB,uBAC/C,OAAO,IAAI,GAAuBroB,KAAM,CACtCsL,aAAcid,EAAYjd,aAC1BK,eAAgB4c,EAAY5c,eAC5BiB,SAAU2b,EAAY3b,SACtB8O,UAAW1b,KAAK6nB,WAChB/L,gBAAiByM,EAAYzM,mBAUjC0L,EAAe9nB,UAAU8oB,cAAgB,SAAUrb,EAAYua,GAI7D,IAHA,IACI7lB,EADA4mB,EAAgBzoB,KAAKqY,cAGhBlW,EAAI,EAAGF,EAAKylB,EAAQxlB,OAAQC,EAAIF,IAAME,EAC7CnC,KAAKkoB,gBAAgB/S,OAASuS,EAAQvlB,GAElCsmB,EAAc1Q,aAAa5K,KAC7BtL,EAAS4mB,EAAcnK,YAAYnR,IAIvC,OAAOtL,GAUT2lB,EAAe9nB,UAAUgpB,OAAS,SAAUvb,EAAYwb,GACtD,IAAIroB,EAAQN,KAEZA,KAAK4oB,UAAW,EAwBhB,IAvBA,IAAIpU,EAAYrH,EAAWqH,UACvBkT,EAAU1nB,KAAKgoB,WAAW7a,EAAWkN,OAAQ7F,EAAUM,YACvD+T,GAAQ,EAERC,EAAU,SAAiB3mB,EAAGF,GAChC,IAAIkT,EAASuS,EAAQvlB,GACjB4mB,EAAc5T,EAAO/N,WAEzB,GAAI2hB,GAAe,YAAqB,CAStC5T,EAAOvN,iBAAiB,UARP,SAASohB,IACpB7T,EAAO/N,YAAc,YACvB+N,EAAOlO,oBAAoB,SAAU+hB,GAErC1oB,EAAMY,cAOZ2nB,EAAQA,GAASE,GAAe,WAGzB5mB,EAAI,EAAGF,EAAKylB,EAAQxlB,OAAQC,EAAIF,IAAME,EAC7C2mB,EAAQ3mB,GAGV,IAAIN,EAAS7B,KAAKwoB,cAAcrb,EAAYua,GAE5C,GAAI1nB,KAAKqY,cAAc0C,gBAAkB8N,EAGvC,OADA7oB,KAAK2nB,oBAAsBnT,EAAUM,WAC9BjT,EAIT,GAAI7B,KAAK2nB,oBAAsB,GAAMnT,EAAUM,WAAY,CACzD,IAAImU,EAAajpB,KAAKgoB,WAAW7a,EAAWkN,OAAQra,KAAK2nB,qBAAqBuB,QAAO,SAAU/T,GAC7F,OAAQuS,EAAQyB,SAAShU,MAG3B,GAAI8T,EAAW/mB,OAAS,EACtB,OAAOlC,KAAKwoB,cAAcrb,EAAY8b,GAI1C,OAAOpnB,GAYT2lB,EAAe9nB,UAAU0oB,SAAW,SAAU/W,GAC5CrR,KAAK8nB,gBAAkBzW,EAAMiT,WAAa,GAC1CtkB,KAAK4nB,OAASvW,EACd,IAAIkX,EAAc1B,GAAW7mB,KAAK4nB,OAAQ5nB,KAAKqoB,uBAChCroB,KAAKqY,cACXR,MAAM,CACbvM,aAAcid,EAAYjd,aAC1BK,eAAgB4c,EAAY5c,eAC5BiB,SAAU2b,EAAY3b,SACtBkP,gBAAiByM,EAAYzM,kBAE/B9b,KAAKkB,WASPsmB,EAAe9nB,UAAU0pB,qBAAuB,SAAU9E,IACxD,QAAOtkB,KAAK8nB,gBAAiBxD,GAC7BtkB,KAAKkB,WAGAsmB,EAtOT,CAuOE6B,EAAA,GAQF7B,GAAe9nB,UAAUoY,QACzB","sources":["webpack://exmap/./node_modules/ol/DataTile.js","webpack://exmap/./node_modules/ol/webgl.js","webpack://exmap/./node_modules/ol/webgl/Buffer.js","webpack://exmap/./node_modules/ol/webgl/TileTexture.js","webpack://exmap/./node_modules/ol/webgl/ContextEventType.js","webpack://exmap/./node_modules/ol/webgl/PostProcessingPass.js","webpack://exmap/./node_modules/ol/vec/mat4.js","webpack://exmap/./node_modules/ol/webgl/Helper.js","webpack://exmap/./node_modules/ol/renderer/webgl/Layer.js","webpack://exmap/./node_modules/ol/renderer/webgl/TileLayer.js","webpack://exmap/./node_modules/ol/webgl/PaletteTexture.js","webpack://exmap/./node_modules/ol/style/expressions.js","webpack://exmap/./node_modules/ol/layer/WebGLTile.js"],"sourcesContent":["var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/DataTile\n */\n\n\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\n/**\n * Data that can be used with a DataTile.  For increased browser compatibility, use\n * Uint8Array instead of Uint8ClampedArray where possible.\n * @typedef {Uint8Array|Uint8ClampedArray|Float32Array|DataView} Data\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @property {function(): Promise<Data>} loader Data loader.\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @api\n */\n\nvar DataTile =\n/** @class */\nfunction (_super) {\n  __extends(DataTile, _super);\n  /**\n   * @param {Options} options Tile options.\n   */\n\n\n  function DataTile(options) {\n    var _this = this;\n\n    var state = TileState.IDLE;\n    _this = _super.call(this, options.tileCoord, state, {\n      transition: options.transition,\n      interpolate: options.interpolate\n    }) || this;\n    /**\n     * @type {function(): Promise<Data>}\n     * @private\n     */\n\n    _this.loader_ = options.loader;\n    /**\n     * @type {Data}\n     * @private\n     */\n\n    _this.data_ = null;\n    /**\n     * @type {Error}\n     * @private\n     */\n\n    _this.error_ = null;\n    return _this;\n  }\n  /**\n   * Get the data for the tile.\n   * @return {Data} Tile data.\n   * @api\n   */\n\n\n  DataTile.prototype.getData = function () {\n    return this.data_;\n  };\n  /**\n   * Get any loading error.\n   * @return {Error} Loading error.\n   * @api\n   */\n\n\n  DataTile.prototype.getError = function () {\n    return this.error_;\n  };\n  /**\n   * Load not yet loaded URI.\n   * @api\n   */\n\n\n  DataTile.prototype.load = function () {\n    this.state = TileState.LOADING;\n    this.changed();\n    var self = this;\n    this.loader_().then(function (data) {\n      self.data_ = data;\n      self.state = TileState.LOADED;\n      self.changed();\n    }).catch(function (error) {\n      self.error_ = error;\n      self.state = TileState.ERROR;\n      self.changed();\n    });\n  };\n\n  return DataTile;\n}(Tile);\n\nexport default DataTile;","/**\n * @module ol/webgl\n */\nimport { assign } from './obj.js';\n/**\n * Constants taken from goog.webgl\n */\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\n * @const\n * @type {number}\n * @api\n */\n\nexport var ARRAY_BUFFER = 0x8892;\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\n * @const\n * @type {number}\n * @api\n */\n\nexport var ELEMENT_ARRAY_BUFFER = 0x8893;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\n\nexport var STREAM_DRAW = 0x88e0;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\n\nexport var STATIC_DRAW = 0x88e4;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\n\nexport var DYNAMIC_DRAW = 0x88e8;\n/**\n * @const\n * @type {number}\n */\n\nexport var UNSIGNED_BYTE = 0x1401;\n/**\n * @const\n * @type {number}\n */\n\nexport var UNSIGNED_SHORT = 0x1403;\n/**\n * @const\n * @type {number}\n */\n\nexport var UNSIGNED_INT = 0x1405;\n/**\n * @const\n * @type {number}\n */\n\nexport var FLOAT = 0x1406;\n/** end of goog.webgl constants\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\n\nvar CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object} [opt_attributes] Attributes.\n * @return {WebGLRenderingContext} WebGL rendering context.\n */\n\nexport function getContext(canvas, opt_attributes) {\n  var attributes = assign({\n    preserveDrawingBuffer: true\n  }, opt_attributes);\n  var ii = CONTEXT_IDS.length;\n\n  for (var i = 0; i < ii; ++i) {\n    try {\n      var context = canvas.getContext(CONTEXT_IDS[i], attributes);\n\n      if (context) {\n        return (\n          /** @type {!WebGLRenderingContext} */\n          context\n        );\n      }\n    } catch (e) {// pass\n    }\n  }\n\n  return null;\n}\n/**\n * @type {Array<string>}\n */\n\nvar supportedExtensions;\n/**\n * @return {Array<string>} List of supported WebGL extensions.\n */\n\nexport function getSupportedExtensions() {\n  if (!supportedExtensions) {\n    var canvas = document.createElement('canvas');\n    var gl = getContext(canvas);\n\n    if (gl) {\n      supportedExtensions = gl.getSupportedExtensions();\n    }\n  }\n\n  return supportedExtensions;\n}","/**\n * @module ol/webgl/Buffer\n */\nimport { ARRAY_BUFFER, DYNAMIC_DRAW, ELEMENT_ARRAY_BUFFER, STATIC_DRAW, STREAM_DRAW } from '../webgl.js';\nimport { assert } from '../asserts.js';\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\n\nexport var BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW\n};\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n * @api\n */\n\nvar WebGLArrayBuffer =\n/** @class */\nfunction () {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [opt_usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `DYNAMIC_DRAW`.\n   */\n  function WebGLArrayBuffer(type, opt_usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array}\n     */\n    this.array = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.type = type;\n    assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.usage = opt_usage !== undefined ? opt_usage : BufferUsage.STATIC_DRAW;\n  }\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   */\n\n\n  WebGLArrayBuffer.prototype.ofSize = function (size) {\n    this.array = new (getArrayClassForType(this.type))(size);\n  };\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {Array<number>} array Numerical array\n   */\n\n\n  WebGLArrayBuffer.prototype.fromArray = function (array) {\n    var arrayClass = getArrayClassForType(this.type);\n    this.array = arrayClass.from ? arrayClass.from(array) : new arrayClass(array);\n  };\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   */\n\n\n  WebGLArrayBuffer.prototype.fromArrayBuffer = function (buffer) {\n    this.array = new (getArrayClassForType(this.type))(buffer);\n  };\n  /**\n   * @return {number} Buffer type.\n   */\n\n\n  WebGLArrayBuffer.prototype.getType = function () {\n    return this.type;\n  };\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array} Array.\n   */\n\n\n  WebGLArrayBuffer.prototype.getArray = function () {\n    return this.array;\n  };\n  /**\n   * @return {number} Usage.\n   */\n\n\n  WebGLArrayBuffer.prototype.getUsage = function () {\n    return this.usage;\n  };\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n\n\n  WebGLArrayBuffer.prototype.getSize = function () {\n    return this.array ? this.array.length : 0;\n  };\n\n  return WebGLArrayBuffer;\n}();\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\n\n\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n\n    default:\n      return Float32Array;\n  }\n}\nexport default WebGLArrayBuffer;","/**\n * @module ol/webgl/TileTexture\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport DataTile from '../DataTile.js';\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileState from '../TileState.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport { ARRAY_BUFFER, STATIC_DRAW } from '../webgl.js';\nimport { IMAGE_SMOOTHING_DISABLED } from '../renderer/canvas/common.js';\nimport { assign } from '../obj.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { toSize } from '../size.js';\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\n\nfunction bindAndConfigure(gl, texture, interpolate) {\n  var resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\n\n\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").Data} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\n\n\nfunction uploadDataTexture(helper, texture, data, size, bandCount, interpolate) {\n  var gl = helper.getGL();\n  bindAndConfigure(gl, texture, interpolate);\n  var bytesPerRow = data.byteLength / size[1];\n  var unpackAlignment = 1;\n\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n\n  var format;\n\n  switch (bandCount) {\n    case 1:\n      {\n        format = gl.LUMINANCE;\n        break;\n      }\n\n    case 2:\n      {\n        format = gl.LUMINANCE_ALPHA;\n        break;\n      }\n\n    case 3:\n      {\n        format = gl.RGB;\n        break;\n      }\n\n    case 4:\n      {\n        format = gl.RGBA;\n        break;\n      }\n\n    default:\n      {\n        throw new Error(\"Unsupported number of bands: \".concat(bandCount));\n      }\n  }\n\n  var textureType;\n\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    helper.getExtension('OES_texture_float_linear');\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n  }\n\n  var oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, size[0], size[1], 0, format, textureType, data);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n/**\n * @type {CanvasRenderingContext2D}\n */\n\n\nvar pixelContext = null;\n\nfunction createPixelContext() {\n  var canvas = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  pixelContext = canvas.getContext('2d');\n}\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n/**\n * @typedef {Object} Options\n * @property {TileType} tile The tile.\n * @property {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n * @property {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n * @property {number} [tilePixelRatio=1] Tile pixel ratio.\n * @property {number} [gutter=0] The size in pixels of the gutter around image tiles to ignore.\n */\n\n\nvar TileTexture =\n/** @class */\nfunction (_super) {\n  __extends(TileTexture, _super);\n  /**\n   * @param {Options} options The tile texture options.\n   */\n\n\n  function TileTexture(options) {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {TileType}\n     */\n\n\n    _this.tile;\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n\n    _this.textures = [];\n    _this.handleTileChange_ = _this.handleTileChange_.bind(_this);\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n\n    _this.size = toSize(options.grid.getTileSize(options.tile.tileCoord[0]));\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.tilePixelRatio_ = options.tilePixelRatio || 1;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.gutter_ = options.gutter || 0;\n    /**\n     * @type {number}\n     */\n\n    _this.bandCount = NaN;\n    /**\n     * @type {import(\"../webgl/Helper.js\").default}\n     * @private\n     */\n\n    _this.helper_ = options.helper;\n    var coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([0, 1, 1, 1, 1, 0, 0, 0]);\n\n    _this.helper_.flushBufferData(coords);\n    /**\n     * @type {WebGLArrayBuffer}\n     */\n\n\n    _this.coords = coords;\n\n    _this.setTile(options.tile);\n\n    return _this;\n  }\n  /**\n   * @param {TileType} tile Tile.\n   */\n\n\n  TileTexture.prototype.setTile = function (tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n\n      this.tile = tile;\n      this.textures.length = 0;\n      this.loaded = tile.getState() === TileState.LOADED;\n\n      if (this.loaded) {\n        this.uploadTile_();\n      } else {\n        if (tile instanceof ImageTile) {\n          var image = tile.getImage();\n\n          if (image instanceof Image && !image.crossOrigin) {\n            image.crossOrigin = 'anonymous';\n          }\n        }\n\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  };\n\n  TileTexture.prototype.uploadTile_ = function () {\n    var helper = this.helper_;\n    var gl = helper.getGL();\n    var tile = this.tile;\n\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      var image = tile.getImage();\n\n      if (this.gutter_ !== 0) {\n        var gutter = this.tilePixelRatio_ * this.gutter_;\n        var width = Math.round(image.width - 2 * gutter);\n        var height = Math.round(image.height - 2 * gutter);\n        var context = createCanvasContext2D(width, height);\n\n        if (!tile.interpolate) {\n          assign(context, IMAGE_SMOOTHING_DISABLED);\n        }\n\n        context.drawImage(image, gutter, gutter, width, height, 0, 0, width, height);\n        image = context.canvas;\n      }\n\n      var texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, image, tile.interpolate);\n      return;\n    }\n\n    var pixelSize = [this.size[0] * this.tilePixelRatio_, this.size[1] * this.tilePixelRatio_];\n    var data = tile.getData();\n    var isFloat = data instanceof Float32Array;\n    var pixelCount = pixelSize[0] * pixelSize[1];\n    var DataType = isFloat ? Float32Array : Uint8Array;\n    var bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    var bytesPerRow = data.byteLength / pixelSize[1];\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / pixelSize[0]);\n    var textureCount = Math.ceil(this.bandCount / 4);\n\n    if (textureCount === 1) {\n      var texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(helper, texture, data, pixelSize, this.bandCount, tile.interpolate);\n      return;\n    }\n\n    var textureDataArrays = new Array(textureCount);\n\n    for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      var texture = gl.createTexture();\n      this.textures.push(texture);\n      var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n\n    var dataIndex = 0;\n    var rowOffset = 0;\n    var colCount = pixelSize[0] * this.bandCount;\n\n    for (var rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\n      for (var colIndex = 0; colIndex < colCount; ++colIndex) {\n        var dataValue = data[rowOffset + colIndex];\n        var pixelIndex = Math.floor(dataIndex / this.bandCount);\n        var bandIndex = colIndex % this.bandCount;\n        var textureIndex = Math.floor(bandIndex / 4);\n        var textureData = textureDataArrays[textureIndex];\n        var bandCount = textureData.length / pixelCount;\n        var textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n        ++dataIndex;\n      }\n\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n\n    for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      var texture = this.textures[textureIndex];\n      var textureData = textureDataArrays[textureIndex];\n      var bandCount = textureData.length / pixelCount;\n      uploadDataTexture(helper, texture, textureData, pixelSize, bandCount, tile.interpolate);\n    }\n  };\n\n  TileTexture.prototype.handleTileChange_ = function () {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile_();\n      this.dispatchEvent(EventType.CHANGE);\n    }\n  };\n\n  TileTexture.prototype.disposeInternal = function () {\n    var gl = this.helper_.getGL();\n    this.helper_.deleteBuffer(this.coords);\n\n    for (var i = 0; i < this.textures.length; ++i) {\n      gl.deleteTexture(this.textures[i]);\n    }\n\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  };\n  /**\n   * Get data for a pixel.  If the tile is not loaded, null is returned.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {import(\"../DataTile.js\").Data|null} The data.\n   */\n\n\n  TileTexture.prototype.getPixelData = function (col, row) {\n    if (!this.loaded) {\n      return null;\n    }\n\n    col = Math.floor(this.tilePixelRatio_ * col);\n    row = Math.floor(this.tilePixelRatio_ * row);\n\n    if (this.tile instanceof DataTile) {\n      var data_1 = this.tile.getData();\n      var pixelsPerRow = Math.floor(this.tilePixelRatio_ * this.size[0]);\n\n      if (data_1 instanceof DataView) {\n        var bytesPerPixel = data_1.byteLength / (this.size[0] * this.size[1]);\n        var offset_1 = row * pixelsPerRow * bytesPerPixel + col * bytesPerPixel;\n        var buffer = data_1.buffer.slice(offset_1, offset_1 + bytesPerPixel);\n        return new DataView(buffer);\n      }\n\n      var offset = row * pixelsPerRow * this.bandCount + col * this.bandCount;\n      return data_1.slice(offset, offset + this.bandCount);\n    }\n\n    if (!pixelContext) {\n      createPixelContext();\n    }\n\n    pixelContext.clearRect(0, 0, 1, 1);\n    var data;\n    var image = this.tile.getImage();\n\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      return null;\n    }\n\n    return data;\n  };\n\n  return TileTexture;\n}(EventTarget);\n\nexport default TileTexture;","/**\n * @module ol/webgl/ContextEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  LOST: 'webglcontextlost',\n  RESTORED: 'webglcontextrestored'\n};","/**\n * @module ol/webgl/PostProcessingPass\n */\nimport { getUid } from '../util.js';\nvar DEFAULT_VERTEX_SHADER = \"\\n  precision mediump float;\\n  \\n  attribute vec2 a_position;\\n  varying vec2 v_texCoord;\\n  varying vec2 v_screenCoord;\\n  \\n  uniform vec2 u_screenSize;\\n   \\n  void main() {\\n    v_texCoord = a_position * 0.5 + 0.5;\\n    v_screenCoord = v_texCoord * u_screenSize;\\n    gl_Position = vec4(a_position, 0.0, 1.0);\\n  }\\n\";\nvar DEFAULT_FRAGMENT_SHADER = \"\\n  precision mediump float;\\n   \\n  uniform sampler2D u_image;\\n  uniform float u_opacity;\\n   \\n  varying vec2 v_texCoord;\\n   \\n  void main() {\\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\\n  }\\n\";\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {number} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n *\n * @api\n */\n\nvar WebGLPostProcessingPass =\n/** @class */\nfunction () {\n  /**\n   * @param {Options} options Options.\n   */\n  function WebGLPostProcessingPass(options) {\n    this.gl_ = options.webGlContext;\n    var gl = this.gl_;\n    this.scaleRatio_ = options.scaleRatio || 1;\n    this.renderTargetTexture_ = gl.createTexture();\n    this.renderTargetTextureSize_ = null;\n    this.frameBuffer_ = gl.createFramebuffer(); // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);\n    gl.compileShader(vertexShader);\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);\n    gl.compileShader(fragmentShader);\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_); // bind the vertices buffer for the frame buffer\n\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    var verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, 'a_position');\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_screenSize');\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_opacity');\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_image');\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n\n    this.uniforms_ = [];\n    options.uniforms && Object.keys(options.uniforms).forEach(function (name) {\n      this.uniforms_.push({\n        value: options.uniforms[name],\n        location: gl.getUniformLocation(this.renderTargetProgram_, name)\n      });\n    }.bind(this));\n  }\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   * @api\n   */\n\n\n  WebGLPostProcessingPass.prototype.getGL = function () {\n    return this.gl_;\n  };\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n   * @api\n   */\n\n\n  WebGLPostProcessingPass.prototype.init = function (frameState) {\n    var gl = this.getGL();\n    var textureSize = [gl.drawingBufferWidth * this.scaleRatio_, gl.drawingBufferHeight * this.scaleRatio_]; // rendering goes to my buffer\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]); // if size has changed: adjust canvas & render target texture\n\n    if (!this.renderTargetTextureSize_ || this.renderTargetTextureSize_[0] !== textureSize[0] || this.renderTargetTextureSize_[1] !== textureSize[1]) {\n      this.renderTargetTextureSize_ = textureSize; // create a new texture\n\n      var level = 0;\n      var internalFormat = gl.RGBA;\n      var border = 0;\n      var format = gl.RGBA;\n      var type = gl.UNSIGNED_BYTE;\n      var data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); // bind the texture to the framebuffer\n\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);\n    }\n  };\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [postCompose] Called before composing.\n   * @api\n   */\n\n\n  WebGLPostProcessingPass.prototype.apply = function (frameState, nextPass, preCompose, postCompose) {\n    var gl = this.getGL();\n    var size = frameState.size;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      var canvasId = getUid(gl.canvas);\n\n      if (!frameState.renderTargets[canvasId]) {\n        var attributes = gl.getContextAttributes();\n\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n    var opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  };\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   * @api\n   */\n\n\n  WebGLPostProcessingPass.prototype.getFrameBuffer = function () {\n    return this.frameBuffer_;\n  };\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  WebGLPostProcessingPass.prototype.applyUniforms = function (frameState) {\n    var gl = this.getGL();\n    var value;\n    var textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value; // apply value based on type\n\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n\n        gl.activeTexture(gl[\"TEXTURE\".concat(textureSlot)]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));\n        } else {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n        } // fill texture slots\n\n\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n\n          case 4:\n            gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);\n            return;\n\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  };\n\n  return WebGLPostProcessingPass;\n}();\n\nexport default WebGLPostProcessingPass;","/**\n * @module ol/vec/mat4\n */\n\n/**\n * @return {Array<number>} \"4x4 matrix representing a 3D identity transform.\"\n */\nexport function create() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n/**\n * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\n * @return {Array<number>} \"2D transformation matrix as flattened 4x4 matrix.\"\n */\n\nexport function fromTransform(mat4, transform) {\n  mat4[0] = transform[0];\n  mat4[1] = transform[1];\n  mat4[4] = transform[2];\n  mat4[5] = transform[3];\n  mat4[12] = transform[4];\n  mat4[13] = transform[5];\n  return mat4;\n}","var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/webgl/Helper\n */\n\n\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport Disposable from '../Disposable.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\nimport { FLOAT, UNSIGNED_BYTE, UNSIGNED_INT, UNSIGNED_SHORT, getContext } from '../webgl.js';\nimport { clear } from '../obj.js';\nimport { compose as composeTransform, create as createTransform, reset as resetTransform, rotate as rotateTransform, scale as scaleTransform } from '../transform.js';\nimport { create, fromTransform } from '../vec/mat4.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\n\nexport var ShaderType = {\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31\n};\n/**\n * Uniform names used in the default shaders: `PROJECTION_MATRIX`, `OFFSET_SCALE_MATRIX`.\n * and `OFFSET_ROTATION_MATRIX`.\n * @enum {string}\n */\n\nexport var DefaultUniform = {\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  OFFSET_SCALE_MATRIX: 'u_offsetScaleMatrix',\n  OFFSET_ROTATION_MATRIX: 'u_offsetRotateMatrix',\n  TIME: 'u_time',\n  ZOOM: 'u_zoom',\n  RESOLUTION: 'u_resolution'\n};\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\n\nexport var AttributeType = {\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\n  UNSIGNED_INT: UNSIGNED_INT,\n  FLOAT: FLOAT\n};\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|import(\"../transform\").Transform} UniformLiteralValue\n */\n\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../PluggableMap.js\").FrameState):UniformLiteralValue} UniformValue\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {HTMLCanvasElement} canvas Canvas element.\n * @property {number} users The count of users of this canvas.\n */\n\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\n\nvar canvasCache = {};\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\n\nfunction getSharedCanvasCacheKey(key) {\n  return 'shared/' + key;\n}\n\nvar uniqueCanvasCacheKeyCount = 0;\n/**\n * @return {string} The unique cache key.\n */\n\nfunction getUniqueCanvasCacheKey() {\n  var key = 'unique/' + uniqueCanvasCacheKeyCount;\n  uniqueCanvasCacheKeyCount += 1;\n  return key;\n}\n/**\n * @param {string} key The cache key for the canvas.\n * @return {HTMLCanvasElement} The canvas.\n */\n\n\nfunction getCanvas(key) {\n  var cacheItem = canvasCache[key];\n\n  if (!cacheItem) {\n    var canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    cacheItem = {\n      users: 0,\n      canvas: canvas\n    };\n    canvasCache[key] = cacheItem;\n  }\n\n  cacheItem.users += 1;\n  return cacheItem.canvas;\n}\n/**\n * @param {string} key The cache key for the canvas.\n */\n\n\nfunction releaseCanvas(key) {\n  var cacheItem = canvasCache[key];\n\n  if (!cacheItem) {\n    return;\n  }\n\n  cacheItem.users -= 1;\n\n  if (cacheItem.users > 0) {\n    return;\n  }\n\n  var canvas = cacheItem.canvas;\n  var gl = getContext(canvas);\n  var extension = gl.getExtension('WEBGL_lose_context');\n\n  if (extension) {\n    extension.loseContext();\n  }\n\n  delete canvasCache[key];\n}\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   * `gl_Position`: position of the vertex in screen space\n *\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Specify the attribute names with\n *   {@link module:ol/webgl/Helper~WebGLHelper#enableAttributes enableAttributes()} (see code snippet below).\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n *\n * @api\n */\n\n\nvar WebGLHelper =\n/** @class */\nfunction (_super) {\n  __extends(WebGLHelper, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function WebGLHelper(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options || {};\n    /** @private */\n\n    _this.boundHandleWebGLContextLost_ = _this.handleWebGLContextLost.bind(_this);\n    /** @private */\n\n    _this.boundHandleWebGLContextRestored_ = _this.handleWebGLContextRestored.bind(_this);\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.canvasCacheKey_ = options.canvasCacheKey ? getSharedCanvasCacheKey(options.canvasCacheKey) : getUniqueCanvasCacheKey();\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    _this.canvas_ = getCanvas(_this.canvasCacheKey_);\n    /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */\n\n    _this.gl_ = getContext(_this.canvas_);\n    /**\n     * @private\n     * @type {!Object<string, BufferCacheEntry>}\n     */\n\n    _this.bufferCache_ = {};\n    /**\n     * @private\n     * @type {Object<string, Object>}\n     */\n\n    _this.extensionCache_ = {};\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n\n    _this.currentProgram_ = null;\n\n    _this.canvas_.addEventListener(ContextEventType.LOST, _this.boundHandleWebGLContextLost_);\n\n    _this.canvas_.addEventListener(ContextEventType.RESTORED, _this.boundHandleWebGLContextRestored_);\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n\n\n    _this.offsetRotateMatrix_ = createTransform();\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n\n    _this.offsetScaleMatrix_ = createTransform();\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.tmpMat4_ = create();\n    /**\n     * @private\n     * @type {Object<string, WebGLUniformLocation>}\n     */\n\n    _this.uniformLocations_ = {};\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n\n    _this.attribLocations_ = {};\n    /**\n     * Holds info about custom uniforms used in the post processing pass.\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n\n    _this.uniforms_ = [];\n\n    if (options.uniforms) {\n      _this.setUniforms(options.uniforms);\n    }\n\n    var gl = _this.getGL();\n    /**\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\n     * the frame buffer logic).\n     * @type {Array<WebGLPostProcessingPass>}\n     * @private\n     */\n\n\n    _this.postProcessPasses_ = options.postProcesses ? options.postProcesses.map(function (options) {\n      return new WebGLPostProcessingPass({\n        webGlContext: gl,\n        scaleRatio: options.scaleRatio,\n        vertexShader: options.vertexShader,\n        fragmentShader: options.fragmentShader,\n        uniforms: options.uniforms\n      });\n    }) : [new WebGLPostProcessingPass({\n      webGlContext: gl\n    })];\n    /**\n     * @type {string|null}\n     * @private\n     */\n\n    _this.shaderCompileErrors_ = null;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.startTime_ = Date.now();\n    return _this;\n  }\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n\n\n  WebGLHelper.prototype.setUniforms = function (uniforms) {\n    this.uniforms_ = [];\n\n    for (var name_1 in uniforms) {\n      this.uniforms_.push({\n        name: name_1,\n        value: uniforms[name_1]\n      });\n    }\n\n    this.uniformLocations_ = {};\n  };\n  /**\n   * @param {string} canvasCacheKey The canvas cache key.\n   * @return {boolean} The provided key matches the one this helper was constructed with.\n   */\n\n\n  WebGLHelper.prototype.canvasCacheKeyMatches = function (canvasCacheKey) {\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n  };\n  /**\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\n   * Extensions are cached after they are enabled for the first time.\n   * @param {string} name The extension name.\n   * @return {Object|null} The extension or null if not supported.\n   */\n\n\n  WebGLHelper.prototype.getExtension = function (name) {\n    if (name in this.extensionCache_) {\n      return this.extensionCache_[name];\n    }\n\n    var extension = this.gl_.getExtension(name);\n    this.extensionCache_[name] = extension;\n    return extension;\n  };\n  /**\n   * Just bind the buffer if it's in the cache. Otherwise create\n   * the WebGL buffer, bind it, populate it, and add an entry to\n   * the cache.\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.bindBuffer = function (buffer) {\n    var gl = this.getGL();\n    var bufferKey = getUid(buffer);\n    var bufferCache = this.bufferCache_[bufferKey];\n\n    if (!bufferCache) {\n      var webGlBuffer = gl.createBuffer();\n      bufferCache = {\n        buffer: buffer,\n        webGlBuffer: webGlBuffer\n      };\n      this.bufferCache_[bufferKey] = bufferCache;\n    }\n\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n  };\n  /**\n   * Update the data contained in the buffer array; this is required for the\n   * new data to be rendered\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.flushBufferData = function (buffer) {\n    var gl = this.getGL();\n    this.bindBuffer(buffer);\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n  };\n  /**\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\n   */\n\n\n  WebGLHelper.prototype.deleteBuffer = function (buf) {\n    var gl = this.getGL();\n    var bufferKey = getUid(buf);\n    var bufferCacheEntry = this.bufferCache_[bufferKey];\n\n    if (bufferCacheEntry && !gl.isContextLost()) {\n      gl.deleteBuffer(bufferCacheEntry.webGlBuffer);\n    }\n\n    delete this.bufferCache_[bufferKey];\n  };\n  /**\n   * Clean up.\n   */\n\n\n  WebGLHelper.prototype.disposeInternal = function () {\n    this.canvas_.removeEventListener(ContextEventType.LOST, this.boundHandleWebGLContextLost_);\n    this.canvas_.removeEventListener(ContextEventType.RESTORED, this.boundHandleWebGLContextRestored_);\n    releaseCanvas(this.canvasCacheKey_);\n    delete this.gl_;\n    delete this.canvas_;\n  };\n  /**\n   * Clear the buffer & set the viewport to draw.\n   * Post process passes will be initialized here, the first one being bound as a render target for\n   * subsequent draw calls.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n   * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.prepareDraw = function (frameState, opt_disableAlphaBlend) {\n    var gl = this.getGL();\n    var canvas = this.getCanvas();\n    var size = frameState.size;\n    var pixelRatio = frameState.pixelRatio;\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n    gl.useProgram(this.currentProgram_); // loop backwards in post processes list\n\n    for (var i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n      this.postProcessPasses_[i].init(frameState);\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    gl.useProgram(this.currentProgram_);\n    this.applyFrameState(frameState);\n    this.applyUniforms(frameState);\n  };\n  /**\n   * Clear the render target & bind it for future draw operations.\n   * This is similar to `prepareDraw`, only post processes will not be applied.\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n   * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.\n   */\n\n\n  WebGLHelper.prototype.prepareDrawToRenderTarget = function (frameState, renderTarget, opt_disableAlphaBlend) {\n    var gl = this.getGL();\n    var size = renderTarget.getSize();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    gl.useProgram(this.currentProgram_);\n    this.applyFrameState(frameState);\n    this.applyUniforms(frameState);\n  };\n  /**\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n   * @param {number} start Start index.\n   * @param {number} end End index.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.drawElements = function (start, end) {\n    var gl = this.getGL();\n    this.getExtension('OES_element_index_uint');\n    var elementType = gl.UNSIGNED_INT;\n    var elementSize = 4;\n    var numItems = end - start;\n    var offsetInBytes = start * elementSize;\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n  };\n  /**\n   * Apply the successive post process passes which will eventually render to the actual canvas.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n   * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [postCompose] Called before composing.\n   */\n\n\n  WebGLHelper.prototype.finalizeDraw = function (frameState, preCompose, postCompose) {\n    // apply post processes using the next one as target\n    for (var i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n      if (i === ii - 1) {\n        this.postProcessPasses_[i].apply(frameState, null, preCompose, postCompose);\n      } else {\n        this.postProcessPasses_[i].apply(frameState, this.postProcessPasses_[i + 1]);\n      }\n    }\n  };\n  /**\n   * @return {HTMLCanvasElement} Canvas.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.getCanvas = function () {\n    return this.canvas_;\n  };\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.getGL = function () {\n    return this.gl_;\n  };\n  /**\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  WebGLHelper.prototype.applyFrameState = function (frameState) {\n    var size = frameState.size;\n    var rotation = frameState.viewState.rotation;\n    var offsetScaleMatrix = resetTransform(this.offsetScaleMatrix_);\n    scaleTransform(offsetScaleMatrix, 2 / size[0], 2 / size[1]);\n    var offsetRotateMatrix = resetTransform(this.offsetRotateMatrix_);\n\n    if (rotation !== 0) {\n      rotateTransform(offsetRotateMatrix, -rotation);\n    }\n\n    this.setUniformMatrixValue(DefaultUniform.OFFSET_SCALE_MATRIX, fromTransform(this.tmpMat4_, offsetScaleMatrix));\n    this.setUniformMatrixValue(DefaultUniform.OFFSET_ROTATION_MATRIX, fromTransform(this.tmpMat4_, offsetRotateMatrix));\n    this.setUniformFloatValue(DefaultUniform.TIME, (Date.now() - this.startTime_) * 0.001);\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n    this.setUniformFloatValue(DefaultUniform.RESOLUTION, frameState.viewState.resolution);\n  };\n  /**\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  WebGLHelper.prototype.applyUniforms = function (frameState) {\n    var gl = this.getGL();\n    var value;\n    var textureSlot = 0;\n    this.uniforms_.forEach(function (uniform) {\n      value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value; // apply value based on type\n\n      if (value instanceof HTMLCanvasElement || value instanceof HTMLImageElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = gl.createTexture();\n        }\n\n        gl.activeTexture(gl[\"TEXTURE\".concat(textureSlot)]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        var imageReady = !(value instanceof HTMLImageElement) ||\n        /** @type {HTMLImageElement} */\n        value.complete;\n\n        if (imageReady && uniform.prevValue !== value) {\n          uniform.prevValue = value;\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n        } // fill texture slots by increasing index\n\n\n        gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);\n      } else if (Array.isArray(value) && value.length === 6) {\n        this.setUniformMatrixValue(uniform.name, fromTransform(this.tmpMat4_, value));\n      } else if (Array.isArray(value) && value.length <= 4) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(this.getUniformLocation(uniform.name), value[0], value[1]);\n            return;\n\n          case 3:\n            gl.uniform3f(this.getUniformLocation(uniform.name), value[0], value[1], value[2]);\n            return;\n\n          case 4:\n            gl.uniform4f(this.getUniformLocation(uniform.name), value[0], value[1], value[2], value[3]);\n            return;\n\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\n      }\n    }.bind(this));\n  };\n  /**\n   * Use a program.  If the program is already in use, this will return `false`.\n   * @param {WebGLProgram} program Program.\n   * @return {boolean} Changed.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.useProgram = function (program) {\n    if (program == this.currentProgram_) {\n      return false;\n    } else {\n      var gl = this.getGL();\n      gl.useProgram(program);\n      this.currentProgram_ = program;\n      this.uniformLocations_ = {};\n      this.attribLocations_ = {};\n      return true;\n    }\n  };\n  /**\n   * Will attempt to compile a vertex or fragment shader based on source\n   * On error, the shader will be returned but\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n   * Use `gl.getShaderInfoLog(shader)` to have details\n   * @param {string} source Shader source\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n   * @return {WebGLShader} Shader object\n   */\n\n\n  WebGLHelper.prototype.compileShader = function (source, type) {\n    var gl = this.getGL();\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    return shader;\n  };\n  /**\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n   * @param {string} fragmentShaderSource Fragment shader source.\n   * @param {string} vertexShaderSource Vertex shader source.\n   * @return {WebGLProgram} Program\n   * @api\n   */\n\n\n  WebGLHelper.prototype.getProgram = function (fragmentShaderSource, vertexShaderSource) {\n    var gl = this.getGL();\n    var fragmentShader = this.compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n    var vertexShader = this.compileShader(vertexShaderSource, gl.VERTEX_SHADER);\n    var program = gl.createProgram();\n    gl.attachShader(program, fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.linkProgram(program);\n\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      var message = \"Fragment shader compliation failed: \".concat(gl.getShaderInfoLog(fragmentShader));\n      throw new Error(message);\n    }\n\n    gl.deleteShader(fragmentShader);\n\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      var message = \"Vertex shader compilation failed: \".concat(gl.getShaderInfoLog(vertexShader));\n      throw new Error(message);\n    }\n\n    gl.deleteShader(vertexShader);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      var message = \"GL program linking failed: \".concat(gl.getShaderInfoLog(vertexShader));\n      throw new Error(message);\n    }\n\n    return program;\n  };\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Uniform name\n   * @return {WebGLUniformLocation} uniformLocation\n   * @api\n   */\n\n\n  WebGLHelper.prototype.getUniformLocation = function (name) {\n    if (this.uniformLocations_[name] === undefined) {\n      this.uniformLocations_[name] = this.getGL().getUniformLocation(this.currentProgram_, name);\n    }\n\n    return this.uniformLocations_[name];\n  };\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Attribute name\n   * @return {number} attribLocation\n   * @api\n   */\n\n\n  WebGLHelper.prototype.getAttributeLocation = function (name) {\n    if (this.attribLocations_[name] === undefined) {\n      this.attribLocations_[name] = this.getGL().getAttribLocation(this.currentProgram_, name);\n    }\n\n    return this.attribLocations_[name];\n  };\n  /**\n   * Modifies the given transform to apply the rotation/translation/scaling of the given frame state.\n   * The resulting transform can be used to convert world space coordinates to view coordinates.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../transform\").Transform} transform Transform to update.\n   * @return {import(\"../transform\").Transform} The updated transform object.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.makeProjectionTransform = function (frameState, transform) {\n    var size = frameState.size;\n    var rotation = frameState.viewState.rotation;\n    var resolution = frameState.viewState.resolution;\n    var center = frameState.viewState.center;\n    resetTransform(transform);\n    composeTransform(transform, 0, 0, 2 / (resolution * size[0]), 2 / (resolution * size[1]), -rotation, -center[0], -center[1]);\n    return transform;\n  };\n  /**\n   * Give a value for a standard float uniform\n   * @param {string} uniform Uniform name\n   * @param {number} value Value\n   * @api\n   */\n\n\n  WebGLHelper.prototype.setUniformFloatValue = function (uniform, value) {\n    this.getGL().uniform1f(this.getUniformLocation(uniform), value);\n  };\n  /**\n   * Give a value for a vec4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Array of length 4.\n   */\n\n\n  WebGLHelper.prototype.setUniformFloatVec4 = function (uniform, value) {\n    this.getGL().uniform4fv(this.getUniformLocation(uniform), value);\n  };\n  /**\n   * Give a value for a standard matrix4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Matrix value\n   * @api\n   */\n\n\n  WebGLHelper.prototype.setUniformMatrixValue = function (uniform, value) {\n    this.getGL().uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n  };\n  /**\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n   * internally.\n   * @param {string} attribName Attribute name\n   * @param {number} size Number of components per attributes\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\n   * @param {number} offset Offset in bytes\n   * @private\n   */\n\n\n  WebGLHelper.prototype.enableAttributeArray_ = function (attribName, size, type, stride, offset) {\n    var location = this.getAttributeLocation(attribName); // the attribute has not been found in the shaders; do not enable it\n\n    if (location < 0) {\n      return;\n    }\n\n    this.getGL().enableVertexAttribArray(location);\n    this.getGL().vertexAttribPointer(location, size, type, false, stride, offset);\n  };\n  /**\n   * Will enable the following attributes to be read from the currently bound buffer,\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n   * @api\n   */\n\n\n  WebGLHelper.prototype.enableAttributes = function (attributes) {\n    var stride = computeAttributesStride(attributes);\n    var offset = 0;\n\n    for (var i = 0; i < attributes.length; i++) {\n      var attr = attributes[i];\n      this.enableAttributeArray_(attr.name, attr.size, attr.type || FLOAT, stride, offset);\n      offset += attr.size * getByteSizeFromType(attr.type);\n    }\n  };\n  /**\n   * WebGL context was lost\n   * @private\n   */\n\n\n  WebGLHelper.prototype.handleWebGLContextLost = function () {\n    clear(this.bufferCache_);\n    this.currentProgram_ = null;\n  };\n  /**\n   * WebGL context was restored\n   * @private\n   */\n\n\n  WebGLHelper.prototype.handleWebGLContextRestored = function () {};\n  /**\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\n   * parameter will be ignored.\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n   * @param {Array<number>} size Expected size of the texture\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [opt_data] Image data/object to bind to the texture\n   * @param {WebGLTexture} [opt_texture] Existing texture to reuse\n   * @return {WebGLTexture} The generated texture\n   * @api\n   */\n\n\n  WebGLHelper.prototype.createTexture = function (size, opt_data, opt_texture) {\n    var gl = this.getGL();\n    var texture = opt_texture || gl.createTexture(); // set params & size\n\n    var level = 0;\n    var internalFormat = gl.RGBA;\n    var border = 0;\n    var format = gl.RGBA;\n    var type = gl.UNSIGNED_BYTE;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    if (opt_data) {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, opt_data);\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, size[0], size[1], border, format, type, null);\n    }\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    return texture;\n  };\n\n  return WebGLHelper;\n}(Disposable);\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n * @api\n */\n\n\nexport function computeAttributesStride(attributes) {\n  var stride = 0;\n\n  for (var i = 0; i < attributes.length; i++) {\n    var attr = attributes[i];\n    stride += attr.size * getByteSizeFromType(attr.type);\n  }\n\n  return stride;\n}\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\n\nfunction getByteSizeFromType(type) {\n  switch (type) {\n    case AttributeType.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n\n    case AttributeType.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n\n    case AttributeType.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n\n    case AttributeType.FLOAT:\n    default:\n      return Float32Array.BYTES_PER_ELEMENT;\n  }\n}\n\nexport default WebGLHelper;","var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/webgl/Layer\n */\n\n\nimport LayerProperty from '../../layer/Property.js';\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport WebGLHelper from '../../webgl/Helper.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { containsCoordinate } from '../../extent.js';\n/**\n * @enum {string}\n */\n\nexport var WebGLWorkerMessageType = {\n  GENERATE_BUFFERS: 'GENERATE_BUFFERS'\n};\n/**\n * @typedef {Object} WebGLWorkerGenerateBuffersMessage\n * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.\n * When the buffers are generated, the worked will send a message of the same type to the main thread, with\n * the generated buffers in it.\n * Note that any addition properties present in the message *will* be sent back to the main thread.\n * @property {WebGLWorkerMessageType} type Message type\n * @property {ArrayBuffer} renderInstructions Render instructions raw binary buffer.\n * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).\n * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).\n * @property {number} [customAttributesCount] Amount of custom attributes count in the render instructions.\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * Base WebGL renderer class.\n * Holds all logic related to data manipulation & some common rendering logic\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\n\nvar WebGLLayerRenderer =\n/** @class */\nfunction (_super) {\n  __extends(WebGLLayerRenderer, _super);\n  /**\n   * @param {LayerType} layer Layer.\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function WebGLLayerRenderer(layer, opt_options) {\n    var _this = _super.call(this, layer) || this;\n\n    var options = opt_options || {};\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform is only\n     * set before dispatching rendering events.\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.inversePixelTransform_ = createTransform();\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n\n    _this.pixelContext_ = null;\n    /**\n     * @private\n     */\n\n    _this.postProcesses_ = options.postProcesses;\n    /**\n     * @private\n     */\n\n    _this.uniforms_ = options.uniforms;\n    /**\n     * @type {WebGLHelper}\n     * @protected\n     */\n\n    _this.helper;\n    layer.addChangeListener(LayerProperty.MAP, _this.removeHelper.bind(_this));\n    _this.dispatchPreComposeEvent = _this.dispatchPreComposeEvent.bind(_this);\n    _this.dispatchPostComposeEvent = _this.dispatchPostComposeEvent.bind(_this);\n    return _this;\n  }\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.dispatchPreComposeEvent = function (context, frameState) {\n    var layer = this.getLayer();\n\n    if (layer.hasListener(RenderEventType.PRECOMPOSE)) {\n      var event_1 = new RenderEvent(RenderEventType.PRECOMPOSE, undefined, frameState, context);\n      layer.dispatchEvent(event_1);\n    }\n  };\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.dispatchPostComposeEvent = function (context, frameState) {\n    var layer = this.getLayer();\n\n    if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {\n      var event_2 = new RenderEvent(RenderEventType.POSTCOMPOSE, undefined, frameState, context);\n      layer.dispatchEvent(event_2);\n    }\n  };\n  /**\n   * Reset options (only handles uniforms).\n   * @param {Options} options Options.\n   */\n\n\n  WebGLLayerRenderer.prototype.reset = function (options) {\n    this.uniforms_ = options.uniforms;\n\n    if (this.helper) {\n      this.helper.setUniforms(this.uniforms_);\n    }\n  };\n  /**\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.removeHelper = function () {\n    if (this.helper) {\n      this.helper.dispose();\n      delete this.helper;\n    }\n  };\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n\n\n  WebGLLayerRenderer.prototype.prepareFrame = function (frameState) {\n    if (this.getLayer().getRenderSource()) {\n      var incrementGroup = true;\n      var groupNumber = -1;\n      var className = void 0;\n\n      for (var i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {\n        var layer = frameState.layerStatesArray[i].layer;\n        var renderer = layer.getRenderer();\n\n        if (!(renderer instanceof WebGLLayerRenderer)) {\n          incrementGroup = true;\n          continue;\n        }\n\n        var layerClassName = layer.getClassName();\n\n        if (incrementGroup || layerClassName !== className) {\n          groupNumber += 1;\n          incrementGroup = false;\n        }\n\n        className = layerClassName;\n\n        if (renderer === this) {\n          break;\n        }\n      }\n\n      var canvasCacheKey = 'map/' + frameState.mapId + '/group/' + groupNumber;\n\n      if (!this.helper || !this.helper.canvasCacheKeyMatches(canvasCacheKey)) {\n        this.removeHelper();\n        this.helper = new WebGLHelper({\n          postProcesses: this.postProcesses_,\n          uniforms: this.uniforms_,\n          canvasCacheKey: canvasCacheKey\n        });\n\n        if (className) {\n          this.helper.getCanvas().className = className;\n        }\n\n        this.afterHelperCreated();\n      }\n    }\n\n    return this.prepareFrameInternal(frameState);\n  };\n  /**\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.afterHelperCreated = function () {};\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.prepareFrameInternal = function (frameState) {\n    return true;\n  };\n  /**\n   * Clean up.\n   */\n\n\n  WebGLLayerRenderer.prototype.disposeInternal = function () {\n    this.removeHelper();\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  WebGLLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n    var layer = this.getLayer();\n\n    if (layer.hasListener(type)) {\n      composeTransform(this.inversePixelTransform_, 0, 0, frameState.pixelRatio, -frameState.pixelRatio, 0, 0, -frameState.size[1]);\n      var event_3 = new RenderEvent(type, this.inversePixelTransform_, frameState, context);\n      layer.dispatchEvent(event_3);\n    }\n  };\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.preRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  };\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.postRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  };\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n   *    location, null will be returned.  If there is data, but pixel values cannot be\n   *    returned, and empty array will be returned.\n   */\n\n\n  WebGLLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n    var renderPixel = applyTransform([frameState.pixelRatio, 0, 0, frameState.pixelRatio, 0, 0], pixel.slice());\n    var gl = this.helper.getGL();\n\n    if (!gl) {\n      return null;\n    }\n\n    var layer = this.getLayer();\n    var layerExtent = layer.getExtent();\n\n    if (layerExtent) {\n      var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n      /** get only data inside of the layer extent */\n\n      if (!containsCoordinate(layerExtent, renderCoordinate)) {\n        return null;\n      }\n    }\n\n    var attributes = gl.getContextAttributes();\n\n    if (!attributes || !attributes.preserveDrawingBuffer) {\n      // we assume there is data at the given pixel (although there might not be)\n      return new Uint8Array();\n    }\n\n    var x = Math.round(renderPixel[0]);\n    var y = Math.round(renderPixel[1]);\n    var pixelContext = this.pixelContext_;\n\n    if (!pixelContext) {\n      var pixelCanvas = document.createElement('canvas');\n      pixelCanvas.width = 1;\n      pixelCanvas.height = 1;\n      pixelContext = pixelCanvas.getContext('2d');\n      this.pixelContext_ = pixelContext;\n    }\n\n    pixelContext.clearRect(0, 0, 1, 1);\n    var data;\n\n    try {\n      pixelContext.drawImage(gl.canvas, x, y, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      return data;\n    }\n\n    if (data[3] === 0) {\n      return null;\n    }\n\n    return data;\n  };\n\n  return WebGLLayerRenderer;\n}(LayerRenderer);\n\nvar tmpArray_ = [];\nvar bufferPositions_ = {\n  vertexPosition: 0,\n  indexPosition: 0\n};\n\nfunction writePointVertex(buffer, pos, x, y, index) {\n  buffer[pos + 0] = x;\n  buffer[pos + 1] = y;\n  buffer[pos + 2] = index;\n}\n/**\n * An object holding positions both in an index and a vertex buffer.\n * @typedef {Object} BufferPositions\n * @property {number} vertexPosition Position in the vertex buffer\n * @property {number} indexPosition Position in the index buffer\n */\n\n/**\n * Pushes a quad (two triangles) based on a point geometry\n * @param {Float32Array} instructions Array of render instructions for points.\n * @param {number} elementIndex Index from which render instructions will be read.\n * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.\n * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.\n * @param {number} customAttributesCount Amount of custom attributes for each element.\n * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.\n * @return {BufferPositions} New buffer positions where to write next\n * @property {number} vertexPosition New position in the vertex buffer where future writes should start.\n * @property {number} indexPosition New position in the index buffer where future writes should start.\n * @private\n */\n\n\nexport function writePointFeatureToBuffers(instructions, elementIndex, vertexBuffer, indexBuffer, customAttributesCount, bufferPositions) {\n  // This is for x, y and index\n  var baseVertexAttrsCount = 3;\n  var baseInstructionsCount = 2;\n  var stride = baseVertexAttrsCount + customAttributesCount;\n  var x = instructions[elementIndex + 0];\n  var y = instructions[elementIndex + 1]; // read custom numerical attributes on the feature\n\n  var customAttrs = tmpArray_;\n  customAttrs.length = customAttributesCount;\n\n  for (var i = 0; i < customAttrs.length; i++) {\n    customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];\n  }\n\n  var vPos = bufferPositions ? bufferPositions.vertexPosition : 0;\n  var iPos = bufferPositions ? bufferPositions.indexPosition : 0;\n  var baseIndex = vPos / stride; // push vertices for each of the four quad corners (first standard then custom attributes)\n\n  writePointVertex(vertexBuffer, vPos, x, y, 0);\n  customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n  writePointVertex(vertexBuffer, vPos, x, y, 1);\n  customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n  writePointVertex(vertexBuffer, vPos, x, y, 2);\n  customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n  writePointVertex(vertexBuffer, vPos, x, y, 3);\n  customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n  indexBuffer[iPos++] = baseIndex;\n  indexBuffer[iPos++] = baseIndex + 1;\n  indexBuffer[iPos++] = baseIndex + 3;\n  indexBuffer[iPos++] = baseIndex + 1;\n  indexBuffer[iPos++] = baseIndex + 2;\n  indexBuffer[iPos++] = baseIndex + 3;\n  bufferPositions_.vertexPosition = vPos;\n  bufferPositions_.indexPosition = iPos;\n  return bufferPositions_;\n}\n/**\n * Returns a texture of 1x1 pixel, white\n * @private\n * @return {ImageData} Image data.\n */\n\nexport function getBlankImageData() {\n  var canvas = document.createElement('canvas');\n  var image = canvas.getContext('2d').createImageData(1, 1);\n  image.data[0] = 255;\n  image.data[1] = 255;\n  image.data[2] = 255;\n  image.data[3] = 255;\n  return image;\n}\n/**\n * Generates a color array based on a numerical id\n * Note: the range for each component is 0 to 1 with 256 steps\n * @param {number} id Id\n * @param {Array<number>} [opt_array] Reusable array\n * @return {Array<number>} Color array containing the encoded id\n */\n\nexport function colorEncodeId(id, opt_array) {\n  var array = opt_array || [];\n  var radix = 256;\n  var divide = radix - 1;\n  array[0] = Math.floor(id / radix / radix / radix) / divide;\n  array[1] = Math.floor(id / radix / radix) % radix / divide;\n  array[2] = Math.floor(id / radix) % radix / divide;\n  array[3] = id % radix / divide;\n  return array;\n}\n/**\n * Reads an id from a color-encoded array\n * Note: the expected range for each component is 0 to 1 with 256 steps.\n * @param {Array<number>} color Color array containing the encoded id\n * @return {number} Decoded id\n */\n\nexport function colorDecodeId(color) {\n  var id = 0;\n  var radix = 256;\n  var mult = radix - 1;\n  id += Math.round(color[0] * radix * radix * radix * mult);\n  id += Math.round(color[1] * radix * radix * mult);\n  id += Math.round(color[2] * radix * mult);\n  id += Math.round(color[3] * mult);\n  return id;\n}\nexport default WebGLLayerRenderer;","var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/webgl/TileLayer\n */\n\n\nimport LRUCache from '../../structs/LRUCache.js';\nimport State from '../../source/State.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport TileTexture from '../../webgl/TileTexture.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport { AttributeType } from '../../webgl/Helper.js';\nimport { ELEMENT_ARRAY_BUFFER, STATIC_DRAW } from '../../webgl.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { containsCoordinate, getIntersection, isEmpty } from '../../extent.js';\nimport { create as createMat4, fromTransform as mat4FromTransform } from '../../vec/mat4.js';\nimport { createOrUpdate as createTileCoord, getKey as getTileCoordKey } from '../../tilecoord.js';\nimport { fromUserExtent } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nimport { toSize } from '../../size.js';\nexport var Uniforms = {\n  TILE_TEXTURE_ARRAY: 'u_tileTextures',\n  TILE_TRANSFORM: 'u_tileTransform',\n  TRANSITION_ALPHA: 'u_transitionAlpha',\n  DEPTH: 'u_depth',\n  TEXTURE_PIXEL_WIDTH: 'u_texturePixelWidth',\n  TEXTURE_PIXEL_HEIGHT: 'u_texturePixelHeight',\n  TEXTURE_RESOLUTION: 'u_textureResolution',\n  TEXTURE_ORIGIN_X: 'u_textureOriginX',\n  TEXTURE_ORIGIN_Y: 'u_textureOriginY',\n  RENDER_EXTENT: 'u_renderExtent',\n  RESOLUTION: 'u_resolution',\n  ZOOM: 'u_zoom'\n};\nexport var Attributes = {\n  TEXTURE_COORD: 'a_textureCoord'\n};\n/**\n * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n */\n\nvar attributeDescriptions = [{\n  name: Attributes.TEXTURE_COORD,\n  size: 2,\n  type: AttributeType.FLOAT\n}];\n/**\n * @type {Object<string, boolean>}\n */\n\nvar empty = {};\n/**\n * Transform a zoom level into a depth value ranging from -1 to 1.\n * @param {number} z A zoom level.\n * @return {number} A depth value.\n */\n\nfunction depthForZ(z) {\n  return 2 * (1 - 1 / (z + 1)) - 1;\n}\n/**\n * Add a tile texture to the lookup.\n * @param {Object<number, Array<import(\"../../webgl/TileTexture.js\").default>>} tileTexturesByZ Lookup of\n * tile textures by zoom level.\n * @param {import(\"../../webgl/TileTexture.js\").default} tileTexture A tile texture.\n * @param {number} z The zoom level.\n */\n\n\nfunction addTileTextureToLookup(tileTexturesByZ, tileTexture, z) {\n  if (!(z in tileTexturesByZ)) {\n    tileTexturesByZ[z] = [];\n  }\n\n  tileTexturesByZ[z].push(tileTexture);\n}\n/**\n * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\n */\n\n\nfunction getRenderExtent(frameState, extent) {\n  var layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n  if (layerState.extent) {\n    extent = getIntersection(extent, fromUserExtent(layerState.extent, frameState.viewState.projection));\n  }\n\n  var source =\n  /** @type {import(\"../../source/Tile.js\").default} */\n  layerState.layer.getRenderSource();\n\n  if (!source.getWrapX()) {\n    var gridExtent = source.getTileGridForProjection(frameState.viewState.projection).getExtent();\n\n    if (gridExtent) {\n      extent = getIntersection(extent, gridExtent);\n    }\n  }\n\n  return extent;\n}\n\nfunction getCacheKey(source, tileCoord) {\n  return \"\".concat(source.getKey(), \",\").concat(getTileCoordKey(tileCoord));\n}\n/**\n * @typedef {Object} Options\n * @property {string} vertexShader Vertex shader source.\n * @property {string} fragmentShader Fragment shader source.\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\n * made available to shaders.\n * @property {Array<import(\"../../webgl/PaletteTexture.js\").default>} [paletteTextures] Palette textures.\n * @property {number} [cacheSize=512] The texture cache size.\n */\n\n/**\n * @typedef {import(\"../../layer/WebGLTile.js\").default} LayerType\n */\n\n/**\n * @classdesc\n * WebGL renderer for tile layers.\n * @extends {WebGLLayerRenderer<LayerType>}\n * @api\n */\n\n\nvar WebGLTileLayerRenderer =\n/** @class */\nfunction (_super) {\n  __extends(WebGLTileLayerRenderer, _super);\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n\n\n  function WebGLTileLayerRenderer(tileLayer, options) {\n    var _this = _super.call(this, tileLayer, {\n      uniforms: options.uniforms\n    }) || this;\n    /**\n     * The last call to `renderFrame` was completed with all tiles loaded\n     * @type {boolean}\n     */\n\n\n    _this.renderComplete = false;\n    /**\n     * This transform converts texture coordinates to screen coordinates.\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n\n    _this.tileTransform_ = createTransform();\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n\n    _this.tempMat4_ = createMat4();\n    /**\n     * @type {import(\"../../TileRange.js\").default}\n     * @private\n     */\n\n    _this.tempTileRange_ = new TileRange(0, 0, 0, 0);\n    /**\n     * @type {import(\"../../tilecoord.js\").TileCoord}\n     * @private\n     */\n\n    _this.tempTileCoord_ = createTileCoord(0, 0, 0);\n    /**\n     * @type {import(\"../../size.js\").Size}\n     * @private\n     */\n\n    _this.tempSize_ = [0, 0];\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n\n    _this.program_;\n    /**\n     * @private\n     */\n\n    _this.vertexShader_ = options.vertexShader;\n    /**\n     * @private\n     */\n\n    _this.fragmentShader_ = options.fragmentShader;\n    /**\n     * Tiles are rendered as a quad with the following structure:\n     *\n     *  [P3]---------[P2]\n     *   |`           |\n     *   |  `     B   |\n     *   |    `       |\n     *   |      `     |\n     *   |   A    `   |\n     *   |          ` |\n     *  [P0]---------[P1]\n     *\n     * Triangle A: P0, P1, P3\n     * Triangle B: P1, P2, P3\n     *\n     * @private\n     */\n\n    _this.indices_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, STATIC_DRAW);\n\n    _this.indices_.fromArray([0, 1, 3, 1, 2, 3]);\n\n    var cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\n    /**\n     * @type {import(\"../../structs/LRUCache.js\").default<import(\"../../webgl/TileTexture.js\").default>}\n     * @private\n     */\n\n    _this.tileTextureCache_ = new LRUCache(cacheSize);\n    /**\n     * @type {Array<import(\"../../webgl/PaletteTexture.js\").default>}\n     * @private\n     */\n\n    _this.paletteTextures_ = options.paletteTextures || [];\n    /**\n     * @private\n     * @type {import(\"../../PluggableMap.js\").FrameState|null}\n     */\n\n    _this.frameState_ = null;\n    return _this;\n  }\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  WebGLTileLayerRenderer.prototype.reset = function (options) {\n    _super.prototype.reset.call(this, {\n      uniforms: options.uniforms\n    });\n\n    this.vertexShader_ = options.vertexShader;\n    this.fragmentShader_ = options.fragmentShader;\n    this.paletteTextures_ = options.paletteTextures || [];\n\n    if (this.helper) {\n      this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n    }\n  };\n\n  WebGLTileLayerRenderer.prototype.afterHelperCreated = function () {\n    this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n    this.helper.flushBufferData(this.indices_);\n  };\n  /**\n   * @param {import(\"../../webgl/TileTexture\").TileType} tile Tile.\n   * @return {boolean} Tile is drawable.\n   * @private\n   */\n\n\n  WebGLTileLayerRenderer.prototype.isDrawableTile_ = function (tile) {\n    var tileLayer = this.getLayer();\n    var tileState = tile.getState();\n    var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n    return tileState == TileState.LOADED || tileState == TileState.EMPTY || tileState == TileState.ERROR && !useInterimTilesOnError;\n  };\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n\n\n  WebGLTileLayerRenderer.prototype.prepareFrameInternal = function (frameState) {\n    var layer = this.getLayer();\n    var source = layer.getRenderSource();\n\n    if (!source) {\n      return false;\n    }\n\n    if (isEmpty(getRenderExtent(frameState, frameState.extent))) {\n      return false;\n    }\n\n    return source.getState() === State.READY;\n  };\n  /**\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\n   * @param {number} initialZ The zoom level.\n   * @param {Object<number, Array<TileTexture>>} tileTexturesByZ The zoom level.\n   */\n\n\n  WebGLTileLayerRenderer.prototype.enqueueTiles = function (frameState, extent, initialZ, tileTexturesByZ) {\n    var viewState = frameState.viewState;\n    var tileLayer = this.getLayer();\n    var tileSource = tileLayer.getRenderSource();\n    var tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    var tilePixelRatio = tileSource.getTilePixelRatio(frameState.pixelRatio);\n    var gutter = tileSource.getGutterForProjection(viewState.projection);\n    var tileSourceKey = getUid(tileSource);\n\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n\n    var wantedTiles = frameState.wantedTiles[tileSourceKey];\n    var tileTextureCache = this.tileTextureCache_;\n    var minZ = Math.max(initialZ - tileLayer.getPreload(), tileGrid.getMinZoom(), tileLayer.getMinZoom());\n\n    for (var z = initialZ; z >= minZ; --z) {\n      var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, this.tempTileRange_);\n      var tileResolution = tileGrid.getResolution(z);\n\n      for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          var tileCoord = createTileCoord(z, x, y, this.tempTileCoord_);\n          var cacheKey = getCacheKey(tileSource, tileCoord);\n          /** @type {TileTexture} */\n\n          var tileTexture = void 0;\n          /** @type {import(\"../../webgl/TileTexture\").TileType} */\n\n          var tile = void 0;\n\n          if (tileTextureCache.containsKey(cacheKey)) {\n            tileTexture = tileTextureCache.get(cacheKey);\n            tile = tileTexture.tile;\n          }\n\n          if (!tileTexture || tileTexture.tile.key !== tileSource.getKey()) {\n            tile = tileSource.getTile(z, x, y, frameState.pixelRatio, viewState.projection);\n\n            if (!tileTexture) {\n              tileTexture = new TileTexture({\n                tile: tile,\n                grid: tileGrid,\n                helper: this.helper,\n                tilePixelRatio: tilePixelRatio,\n                gutter: gutter\n              });\n              tileTextureCache.set(cacheKey, tileTexture);\n            } else {\n              if (this.isDrawableTile_(tile)) {\n                tileTexture.setTile(tile);\n              } else {\n                var interimTile =\n                /** @type {import(\"../../webgl/TileTexture\").TileType} */\n                tile.getInterimTile();\n                tileTexture.setTile(interimTile);\n              }\n            }\n          }\n\n          addTileTextureToLookup(tileTexturesByZ, tileTexture, z);\n          var tileQueueKey = tile.getKey();\n          wantedTiles[tileQueueKey] = true;\n\n          if (tile.getState() === TileState.IDLE) {\n            if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\n              frameState.tileQueue.enqueue([tile, tileSourceKey, tileGrid.getTileCoordCenter(tileCoord), tileResolution]);\n            }\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   */\n\n\n  WebGLTileLayerRenderer.prototype.renderFrame = function (frameState) {\n    this.frameState_ = frameState;\n    this.renderComplete = true;\n    var gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n    var viewState = frameState.viewState;\n    var tileLayer = this.getLayer();\n    var tileSource = tileLayer.getRenderSource();\n    var tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    var extent = getRenderExtent(frameState, frameState.extent);\n    var z = tileGrid.getZForResolution(viewState.resolution, tileSource.zDirection);\n    /**\n     * @type {Object<number, Array<import(\"../../webgl/TileTexture.js\").default>>}\n     */\n\n    var tileTexturesByZ = {};\n\n    if (frameState.nextExtent) {\n      var targetZ = tileGrid.getZForResolution(viewState.nextResolution, tileSource.zDirection);\n      var nextExtent = getRenderExtent(frameState, frameState.nextExtent);\n      this.enqueueTiles(frameState, nextExtent, targetZ, tileTexturesByZ);\n    }\n\n    this.enqueueTiles(frameState, extent, z, tileTexturesByZ);\n    /**\n     * A lookup of alpha values for tiles at the target rendering resolution\n     * for tiles that are in transition.  If a tile coord key is absent from\n     * this lookup, the tile should be rendered at alpha 1.\n     * @type {Object<string, number>}\n     */\n\n    var alphaLookup = {};\n    var uid = getUid(this);\n    var time = frameState.time;\n    var blend = false; // look for cached tiles to use if a target tile is not ready\n\n    var tileTextures = tileTexturesByZ[z];\n\n    for (var i = 0, ii = tileTextures.length; i < ii; ++i) {\n      var tileTexture = tileTextures[i];\n      var tile = tileTexture.tile;\n      var tileCoord = tile.tileCoord;\n\n      if (tileTexture.loaded) {\n        var alpha = tile.getAlpha(uid, time);\n\n        if (alpha === 1) {\n          // no need to look for alt tiles\n          tile.endTransition(uid);\n          continue;\n        }\n\n        blend = true;\n        var tileCoordKey = getTileCoordKey(tileCoord);\n        alphaLookup[tileCoordKey] = alpha;\n      }\n\n      this.renderComplete = false; // first look for child tiles (at z + 1)\n\n      var coveredByChildren = this.findAltTiles_(tileGrid, tileCoord, z + 1, tileTexturesByZ);\n\n      if (coveredByChildren) {\n        continue;\n      } // next look for parent tiles\n\n\n      var minZoom = tileGrid.getMinZoom();\n\n      for (var parentZ = z - 1; parentZ >= minZoom; --parentZ) {\n        var coveredByParent = this.findAltTiles_(tileGrid, tileCoord, parentZ, tileTexturesByZ);\n\n        if (coveredByParent) {\n          break;\n        }\n      }\n    }\n\n    this.helper.useProgram(this.program_);\n    this.helper.prepareDraw(frameState, !blend);\n    var zs = Object.keys(tileTexturesByZ).map(Number).sort(numberSafeCompareFunction);\n    var centerX = viewState.center[0];\n    var centerY = viewState.center[1];\n\n    for (var j = 0, jj = zs.length; j < jj; ++j) {\n      var tileZ = zs[j];\n      var tileResolution = tileGrid.getResolution(tileZ);\n      var tileSize = toSize(tileGrid.getTileSize(tileZ), this.tempSize_);\n      var tileOrigin = tileGrid.getOrigin(tileZ);\n      var centerI = (centerX - tileOrigin[0]) / (tileSize[0] * tileResolution);\n      var centerJ = (tileOrigin[1] - centerY) / (tileSize[1] * tileResolution);\n      var tileScale = viewState.resolution / tileResolution;\n      var depth = depthForZ(tileZ);\n      var tileTextures_1 = tileTexturesByZ[tileZ];\n\n      for (var i = 0, ii = tileTextures_1.length; i < ii; ++i) {\n        var tileTexture = tileTextures_1[i];\n\n        if (!tileTexture.loaded) {\n          continue;\n        }\n\n        var tile = tileTexture.tile;\n        var tileCoord = tile.tileCoord;\n        var tileCoordKey = getTileCoordKey(tileCoord);\n        var tileCenterI = tileCoord[1];\n        var tileCenterJ = tileCoord[2];\n        composeTransform(this.tileTransform_, 0, 0, 2 / (frameState.size[0] * tileScale / tileSize[0]), -2 / (frameState.size[1] * tileScale / tileSize[1]), viewState.rotation, -(centerI - tileCenterI), -(centerJ - tileCenterJ));\n        this.helper.setUniformMatrixValue(Uniforms.TILE_TRANSFORM, mat4FromTransform(this.tempMat4_, this.tileTransform_));\n        this.helper.bindBuffer(tileTexture.coords);\n        this.helper.bindBuffer(this.indices_);\n        this.helper.enableAttributes(attributeDescriptions);\n        var textureSlot = 0;\n\n        while (textureSlot < tileTexture.textures.length) {\n          var textureProperty = 'TEXTURE' + textureSlot;\n          var uniformName = \"\".concat(Uniforms.TILE_TEXTURE_ARRAY, \"[\").concat(textureSlot, \"]\");\n          gl.activeTexture(gl[textureProperty]);\n          gl.bindTexture(gl.TEXTURE_2D, tileTexture.textures[textureSlot]);\n          gl.uniform1i(this.helper.getUniformLocation(uniformName), textureSlot);\n          ++textureSlot;\n        }\n\n        for (var paletteIndex = 0; paletteIndex < this.paletteTextures_.length; ++paletteIndex) {\n          var paletteTexture = this.paletteTextures_[paletteIndex];\n          gl.activeTexture(gl['TEXTURE' + textureSlot]);\n          var texture = paletteTexture.getTexture(gl);\n          gl.bindTexture(gl.TEXTURE_2D, texture);\n          gl.uniform1i(this.helper.getUniformLocation(paletteTexture.name), textureSlot);\n          ++textureSlot;\n        }\n\n        var alpha = tileCoordKey in alphaLookup ? alphaLookup[tileCoordKey] : 1;\n\n        if (alpha < 1) {\n          frameState.animate = true;\n        }\n\n        this.helper.setUniformFloatValue(Uniforms.TRANSITION_ALPHA, alpha);\n        this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\n        this.helper.setUniformFloatValue(Uniforms.TEXTURE_PIXEL_WIDTH, tileSize[0]);\n        this.helper.setUniformFloatValue(Uniforms.TEXTURE_PIXEL_HEIGHT, tileSize[1]);\n        this.helper.setUniformFloatValue(Uniforms.TEXTURE_RESOLUTION, tileResolution);\n        this.helper.setUniformFloatValue(Uniforms.TEXTURE_ORIGIN_X, tileOrigin[0] + tileCenterI * tileSize[0] * tileResolution);\n        this.helper.setUniformFloatValue(Uniforms.TEXTURE_ORIGIN_Y, tileOrigin[1] - tileCenterJ * tileSize[1] * tileResolution);\n        this.helper.setUniformFloatVec4(Uniforms.RENDER_EXTENT, extent);\n        this.helper.setUniformFloatValue(Uniforms.RESOLUTION, viewState.resolution);\n        this.helper.setUniformFloatValue(Uniforms.ZOOM, viewState.zoom);\n        this.helper.drawElements(0, this.indices_.getSize());\n      }\n    }\n\n    this.helper.finalizeDraw(frameState, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);\n    var canvas = this.helper.getCanvas();\n    var tileTextureCache = this.tileTextureCache_;\n\n    while (tileTextureCache.canExpireCache()) {\n      var tileTexture = tileTextureCache.pop();\n      tileTexture.dispose();\n    } // TODO: let the renderers manage their own cache instead of managing the source cache\n\n    /**\n     * Here we unconditionally expire the source cache since the renderer maintains\n     * its own cache.\n     * @param {import(\"../../PluggableMap.js\").default} map Map.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n\n\n    var postRenderFunction = function postRenderFunction(map, frameState) {\n      tileSource.expireCache(frameState.viewState.projection, empty);\n    };\n\n    frameState.postRenderFunctions.push(postRenderFunction);\n    this.postRender(gl, frameState);\n    return canvas;\n  };\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView} Data at the pixel location.\n   */\n\n\n  WebGLTileLayerRenderer.prototype.getData = function (pixel) {\n    var gl = this.helper.getGL();\n\n    if (!gl) {\n      return null;\n    }\n\n    var frameState = this.frameState_;\n\n    if (!frameState) {\n      return null;\n    }\n\n    var layer = this.getLayer();\n    var coordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    var viewState = frameState.viewState;\n    var layerExtent = layer.getExtent();\n\n    if (layerExtent) {\n      if (!containsCoordinate(fromUserExtent(layerExtent, viewState.projection), coordinate)) {\n        return null;\n      }\n    }\n\n    var source = layer.getRenderSource();\n    var tileGrid = source.getTileGridForProjection(viewState.projection);\n\n    if (!source.getWrapX()) {\n      var gridExtent = tileGrid.getExtent();\n\n      if (gridExtent) {\n        if (!containsCoordinate(gridExtent, coordinate)) {\n          return null;\n        }\n      }\n    }\n\n    var tileTextureCache = this.tileTextureCache_;\n\n    for (var z = tileGrid.getZForResolution(viewState.resolution); z >= tileGrid.getMinZoom(); --z) {\n      var tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      var cacheKey = getCacheKey(source, tileCoord);\n\n      if (!tileTextureCache.containsKey(cacheKey)) {\n        continue;\n      }\n\n      var tileTexture = tileTextureCache.get(cacheKey);\n\n      if (!tileTexture.loaded) {\n        continue;\n      }\n\n      var tileOrigin = tileGrid.getOrigin(z);\n      var tileSize = toSize(tileGrid.getTileSize(z));\n      var tileResolution = tileGrid.getResolution(z);\n      var col = (coordinate[0] - tileOrigin[0]) / tileResolution - tileCoord[1] * tileSize[0];\n      var row = (tileOrigin[1] - coordinate[1]) / tileResolution - tileCoord[2] * tileSize[1];\n      return tileTexture.getPixelData(col, row);\n    }\n\n    return null;\n  };\n  /**\n   * Look for tiles covering the provided tile coordinate at an alternate\n   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\n   * @param {number} altZ The alternate zoom level.\n   * @param {Object<number, Array<import(\"../../webgl/TileTexture.js\").default>>} tileTexturesByZ Lookup of\n   * tile textures by zoom level.\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\n   * @private\n   */\n\n\n  WebGLTileLayerRenderer.prototype.findAltTiles_ = function (tileGrid, tileCoord, altZ, tileTexturesByZ) {\n    var tileRange = tileGrid.getTileRangeForTileCoordAndZ(tileCoord, altZ, this.tempTileRange_);\n\n    if (!tileRange) {\n      return false;\n    }\n\n    var covered = true;\n    var tileTextureCache = this.tileTextureCache_;\n    var source = this.getLayer().getRenderSource();\n\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        var cacheKey = getCacheKey(source, [altZ, x, y]);\n        var loaded = false;\n\n        if (tileTextureCache.containsKey(cacheKey)) {\n          var tileTexture = tileTextureCache.get(cacheKey);\n\n          if (tileTexture.loaded) {\n            addTileTextureToLookup(tileTexturesByZ, tileTexture, altZ);\n            loaded = true;\n          }\n        }\n\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n\n    return covered;\n  };\n\n  WebGLTileLayerRenderer.prototype.removeHelper = function () {\n    if (this.helper) {\n      var tileTextureCache = this.tileTextureCache_;\n      tileTextureCache.forEach(function (tileTexture) {\n        return tileTexture.dispose();\n      });\n      tileTextureCache.clear();\n    }\n\n    _super.prototype.removeHelper.call(this);\n  };\n  /**\n   * Clean up.\n   */\n\n\n  WebGLTileLayerRenderer.prototype.disposeInternal = function () {\n    var helper = this.helper;\n\n    if (helper) {\n      var gl = helper.getGL();\n      gl.deleteProgram(this.program_);\n      delete this.program_;\n      helper.deleteBuffer(this.indices_);\n    }\n\n    _super.prototype.disposeInternal.call(this);\n\n    delete this.indices_;\n    delete this.tileTextureCache_;\n    delete this.frameState_;\n  };\n\n  return WebGLTileLayerRenderer;\n}(WebGLLayerRenderer);\n\nexport default WebGLTileLayerRenderer;","/**\n * @module ol/webgl/PaletteTexture\n */\nvar PaletteTexture =\n/** @class */\nfunction () {\n  /**\n   * @param {string} name The name of the texture.\n   * @param {Uint8Array} data The texture data.\n   */\n  function PaletteTexture(name, data) {\n    this.name = name;\n    this.data = data;\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n\n    this.texture_ = null;\n  }\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   * @return {WebGLTexture} The texture.\n   */\n\n\n  PaletteTexture.prototype.getTexture = function (gl) {\n    if (!this.texture_) {\n      var texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.data.length / 4, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\n      this.texture_ = texture;\n    }\n\n    return this.texture_;\n  };\n\n  return PaletteTexture;\n}();\n\nexport default PaletteTexture;","/**\n * Operators and utilities used for style expressions\n * @module ol/style/expressions\n */\nimport PaletteTexture from '../webgl/PaletteTexture.js';\nimport { Uniforms } from '../renderer/webgl/TileLayer.js';\nimport { asArray, fromString, isStringColor } from '../color.js';\nimport { log2 } from '../math.js';\n/**\n * Base type used for literal style parameters; can be a number literal or the output of an operator,\n * which in turns takes {@link import(\"./expressions.js\").ExpressionValue} arguments.\n *\n * The following operators can be used:\n *\n * * Reading operators:\n *   * `['band', bandIndex, xOffset, yOffset]` For tile layers only. Fetches pixel values from band\n *     `bandIndex` of the source's data. The first `bandIndex` of the source data is `1`. Fetched values\n *     are in the 0..1 range. {@link import(\"../source/TileImage.js\").default} sources have 4 bands: red,\n *     green, blue and alpha. {@link import(\"../source/DataTile.js\").default} sources can have any number\n *     of bands, depending on the underlying data source and\n *     {@link import(\"../source/GeoTIFF.js\").Options configuration}. `xOffset` and `yOffset` are optional\n *     and allow specifying pixel offsets for x and y. This is used for sampling data from neighboring pixels.\n *   * `['get', 'attributeName']` fetches a feature attribute (it will be prefixed by `a_` in the shader)\n *     Note: those will be taken from the attributes provided to the renderer\n *   * `['resolution']` returns the current resolution\n *   * `['time']` returns the time in seconds since the creation of the layer\n *   * `['var', 'varName']` fetches a value from the style variables, or 0 if undefined\n *   * `['zoom']` returns the current zoom level\n *\n * * Math operators:\n *   * `['*', value1, value2]` multiplies `value1` by `value2`\n *   * `['/', value1, value2]` divides `value1` by `value2`\n *   * `['+', value1, value2]` adds `value1` and `value2`\n *   * `['-', value1, value2]` subtracts `value2` from `value1`\n *   * `['clamp', value, low, high]` clamps `value` between `low` and `high`\n *   * `['%', value1, value2]` returns the result of `value1 % value2` (modulo)\n *   * `['^', value1, value2]` returns the value of `value1` raised to the `value2` power\n *   * `['abs', value1]` returns the absolute value of `value1`\n *   * `['floor', value1]` returns the nearest integer less than or equal to `value1`\n *   * `['round', value1]` returns the nearest integer to `value1`\n *   * `['ceil', value1]` returns the nearest integer greater than or equal to `value1`\n *   * `['sin', value1]` returns the sine of `value1`\n *   * `['cos', value1]` returns the cosine of `value1`\n *   * `['atan', value1, value2]` returns `atan2(value1, value2)`. If `value2` is not provided, returns `atan(value1)`\n *\n * * Transform operators:\n *   * `['case', condition1, output1, ...conditionN, outputN, fallback]` selects the first output whose corresponding\n *     condition evaluates to `true`. If no match is found, returns the `fallback` value.\n *     All conditions should be `boolean`, output and fallback can be any kind.\n *   * `['match', input, match1, output1, ...matchN, outputN, fallback]` compares the `input` value against all\n *     provided `matchX` values, returning the output associated with the first valid match. If no match is found,\n *     returns the `fallback` value.\n *     `input` and `matchX` values must all be of the same type, and can be `number` or `string`. `outputX` and\n *     `fallback` values must be of the same type, and can be of any kind.\n *   * `['interpolate', interpolation, input, stop1, output1, ...stopN, outputN]` returns a value by interpolating between\n *     pairs of inputs and outputs; `interpolation` can either be `['linear']` or `['exponential', base]` where `base` is\n *     the rate of increase from stop A to stop B (i.e. power to which the interpolation ratio is raised); a value\n *     of 1 is equivalent to `['linear']`.\n *     `input` and `stopX` values must all be of type `number`. `outputX` values can be `number` or `color` values.\n *     Note: `input` will be clamped between `stop1` and `stopN`, meaning that all output values will be comprised\n *     between `output1` and `outputN`.\n *\n * * Logical operators:\n *   * `['<', value1, value2]` returns `true` if `value1` is strictly lower than `value2`, or `false` otherwise.\n *   * `['<=', value1, value2]` returns `true` if `value1` is lower than or equals `value2`, or `false` otherwise.\n *   * `['>', value1, value2]` returns `true` if `value1` is strictly greater than `value2`, or `false` otherwise.\n *   * `['>=', value1, value2]` returns `true` if `value1` is greater than or equals `value2`, or `false` otherwise.\n *   * `['==', value1, value2]` returns `true` if `value1` equals `value2`, or `false` otherwise.\n *   * `['!=', value1, value2]` returns `true` if `value1` does not equal `value2`, or `false` otherwise.\n *   * `['!', value1]` returns `false` if `value1` is `true` or greater than `0`, or `true` otherwise.\n *   * `['all', value1, value2, ...]` returns `true` if all the inputs are `true`, `false` otherwise.\n *   * `['any', value1, value2, ...]` returns `true` if any of the inputs are `true`, `false` otherwise.\n *   * `['between', value1, value2, value3]` returns `true` if `value1` is contained between `value2` and `value3`\n *     (inclusively), or `false` otherwise.\n *\n * * Conversion operators:\n *   * `['array', value1, ...valueN]` creates a numerical array from `number` values; please note that the amount of\n *     values can currently only be 2, 3 or 4.\n *   * `['color', red, green, blue, alpha]` creates a `color` value from `number` values; the `alpha` parameter is\n *     optional; if not specified, it will be set to 1.\n *     Note: `red`, `green` and `blue` components must be values between 0 and 255; `alpha` between 0 and 1.\n *   * `['palette', index, colors]` picks a `color` value from an array of colors using the given index; the `index`\n *     expression must evaluate to a number; the items in the `colors` array must be strings with hex colors\n *     (e.g. `'#86A136'`), colors using the rgba[a] functional notation (e.g. `'rgb(134, 161, 54)'` or `'rgba(134, 161, 54, 1)'`),\n *     named colors (e.g. `'red'`), or array literals with 3 ([r, g, b]) or 4 ([r, g, b, a]) values (with r, g, and b\n *     in the 0-255 range and a in the 0-1 range).\n *\n * Values can either be literals or another operator, as they will be evaluated recursively.\n * Literal values can be of the following types:\n * * `boolean`\n * * `number`\n * * `string`\n * * {@link module:ol/color~Color}\n *\n * @typedef {Array<*>|import(\"../color.js\").Color|string|number|boolean} ExpressionValue\n * @api\n */\n\n/**\n * Possible inferred types from a given value or expression.\n * Note: these are binary flags.\n * @enum {number}\n */\n\nexport var ValueTypes = {\n  NUMBER: 1,\n  STRING: 2,\n  COLOR: 4,\n  BOOLEAN: 8,\n  NUMBER_ARRAY: 16,\n  ANY: 31,\n  NONE: 0\n};\n/**\n * An operator declaration must contain two methods: `getReturnType` which returns a type based on\n * the operator arguments, and `toGlsl` which returns a GLSL-compatible string.\n * Note: both methods can process arguments recursively.\n * @typedef {Object} Operator\n * @property {function(Array<ExpressionValue>): ValueTypes|number} getReturnType Returns one or several types\n * @property {function(ParsingContext, Array<ExpressionValue>, ValueTypes=): string} toGlsl Returns a GLSL-compatible string\n * Note: takes in an optional type hint as 3rd parameter\n */\n\n/**\n * Operator declarations\n * @type {Object<string, Operator>}\n */\n\nexport var Operators = {};\n/**\n * Returns the possible types for a given value (each type being a binary flag)\n * To test a value use e.g. `getValueType(v) & ValueTypes.BOOLEAN`\n * @param {ExpressionValue} value Value\n * @return {ValueTypes|number} Type or types inferred from the value\n */\n\nexport function getValueType(value) {\n  if (typeof value === 'number') {\n    return ValueTypes.NUMBER;\n  }\n\n  if (typeof value === 'boolean') {\n    return ValueTypes.BOOLEAN;\n  }\n\n  if (typeof value === 'string') {\n    if (isStringColor(value)) {\n      return ValueTypes.COLOR | ValueTypes.STRING;\n    }\n\n    return ValueTypes.STRING;\n  }\n\n  if (!Array.isArray(value)) {\n    throw new Error(\"Unhandled value type: \".concat(JSON.stringify(value)));\n  }\n\n  var valueArr =\n  /** @type {Array<*>} */\n  value;\n  var onlyNumbers = valueArr.every(function (v) {\n    return typeof v === 'number';\n  });\n\n  if (onlyNumbers) {\n    if (valueArr.length === 3 || valueArr.length === 4) {\n      return ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY;\n    }\n\n    return ValueTypes.NUMBER_ARRAY;\n  }\n\n  if (typeof valueArr[0] !== 'string') {\n    throw new Error(\"Expected an expression operator but received: \".concat(JSON.stringify(valueArr)));\n  }\n\n  var operator = Operators[valueArr[0]];\n\n  if (operator === undefined) {\n    throw new Error(\"Unrecognized expression operator: \".concat(JSON.stringify(valueArr)));\n  }\n\n  return operator.getReturnType(valueArr.slice(1));\n}\n/**\n * Checks if only one value type is enabled in the input number.\n * @param {ValueTypes|number} valueType Number containing value type binary flags\n * @return {boolean} True if only one type flag is enabled, false if zero or multiple\n */\n\nexport function isTypeUnique(valueType) {\n  return log2(valueType) % 1 === 0;\n}\n/**\n * Context available during the parsing of an expression.\n * @typedef {Object} ParsingContext\n * @property {boolean} [inFragmentShader] If false, means the expression output should be made for a vertex shader\n * @property {Array<string>} variables List of variables used in the expression; contains **unprefixed names**\n * @property {Array<string>} attributes List of attributes used in the expression; contains **unprefixed names**\n * @property {Object<string, number>} stringLiteralsMap This object maps all encountered string values to a number\n * @property {Object<string, string>} functions Lookup of functions used by the style.\n * @property {number} [bandCount] Number of bands per pixel.\n * @property {Array<PaletteTexture>} [paletteTextures] List of palettes used by the style.\n */\n\n/**\n * Will return the number as a float with a dot separator, which is required by GLSL.\n * @param {number} v Numerical value.\n * @return {string} The value as string.\n */\n\nexport function numberToGlsl(v) {\n  var s = v.toString();\n  return s.indexOf('.') === -1 ? s + '.0' : s;\n}\n/**\n * Will return the number array as a float with a dot separator, concatenated with ', '.\n * @param {Array<number>} array Numerical values array.\n * @return {string} The array as a vector, e. g.: `vec3(1.0, 2.0, 3.0)`.\n */\n\nexport function arrayToGlsl(array) {\n  if (array.length < 2 || array.length > 4) {\n    throw new Error('`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.');\n  }\n\n  return \"vec\".concat(array.length, \"(\").concat(array.map(numberToGlsl).join(', '), \")\");\n}\n/**\n * Will normalize and converts to string a `vec4` color array compatible with GLSL.\n * @param {string|import(\"../color.js\").Color} color Color either in string format or [r, g, b, a] array format,\n * with RGB components in the 0..255 range and the alpha component in the 0..1 range.\n * Note that the final array will always have 4 components.\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\n */\n\nexport function colorToGlsl(color) {\n  var array = asArray(color).slice();\n\n  if (array.length < 4) {\n    array.push(1);\n  }\n\n  return arrayToGlsl(array.map(function (c, i) {\n    return i < 3 ? c / 255 : c;\n  }));\n}\n/**\n * Returns a stable equivalent number for the string literal.\n * @param {ParsingContext} context Parsing context\n * @param {string} string String literal value\n * @return {number} Number equivalent\n */\n\nexport function getStringNumberEquivalent(context, string) {\n  if (context.stringLiteralsMap[string] === undefined) {\n    context.stringLiteralsMap[string] = Object.keys(context.stringLiteralsMap).length;\n  }\n\n  return context.stringLiteralsMap[string];\n}\n/**\n * Returns a stable equivalent number for the string literal, for use in shaders. This number is then\n * converted to be a GLSL-compatible string.\n * @param {ParsingContext} context Parsing context\n * @param {string} string String literal value\n * @return {string} GLSL-compatible string containing a number\n */\n\nexport function stringToGlsl(context, string) {\n  return numberToGlsl(getStringNumberEquivalent(context, string));\n}\n/**\n * Recursively parses a style expression and outputs a GLSL-compatible string. Takes in a parsing context that\n * will be read and modified during the parsing operation.\n * @param {ParsingContext} context Parsing context\n * @param {ExpressionValue} value Value\n * @param {ValueTypes|number} [typeHint] Hint for the expected final type (can be several types combined)\n * @return {string} GLSL-compatible output\n */\n\nexport function expressionToGlsl(context, value, typeHint) {\n  // operator\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    var operator = Operators[value[0]];\n\n    if (operator === undefined) {\n      throw new Error(\"Unrecognized expression operator: \".concat(JSON.stringify(value)));\n    }\n\n    return operator.toGlsl(context, value.slice(1), typeHint);\n  }\n\n  var valueType = getValueType(value);\n\n  if ((valueType & ValueTypes.NUMBER) > 0) {\n    return numberToGlsl(\n    /** @type {number} */\n    value);\n  }\n\n  if ((valueType & ValueTypes.BOOLEAN) > 0) {\n    return value.toString();\n  }\n\n  if ((valueType & ValueTypes.STRING) > 0 && (typeHint === undefined || typeHint == ValueTypes.STRING)) {\n    return stringToGlsl(context, value.toString());\n  }\n\n  if ((valueType & ValueTypes.COLOR) > 0 && (typeHint === undefined || typeHint == ValueTypes.COLOR)) {\n    return colorToGlsl(\n    /** @type {Array<number> | string} */\n    value);\n  }\n\n  if ((valueType & ValueTypes.NUMBER_ARRAY) > 0) {\n    return arrayToGlsl(\n    /** @type {Array<number>} */\n    value);\n  }\n\n  throw new Error(\"Unexpected expression \".concat(value, \" (expected type \").concat(typeHint, \")\"));\n}\n\nfunction assertNumber(value) {\n  if (!(getValueType(value) & ValueTypes.NUMBER)) {\n    throw new Error(\"A numeric value was expected, got \".concat(JSON.stringify(value), \" instead\"));\n  }\n}\n\nfunction assertNumbers(values) {\n  for (var i = 0; i < values.length; i++) {\n    assertNumber(values[i]);\n  }\n}\n\nfunction assertString(value) {\n  if (!(getValueType(value) & ValueTypes.STRING)) {\n    throw new Error(\"A string value was expected, got \".concat(JSON.stringify(value), \" instead\"));\n  }\n}\n\nfunction assertBoolean(value) {\n  if (!(getValueType(value) & ValueTypes.BOOLEAN)) {\n    throw new Error(\"A boolean value was expected, got \".concat(JSON.stringify(value), \" instead\"));\n  }\n}\n\nfunction assertArgsCount(args, count) {\n  if (args.length !== count) {\n    throw new Error(\"Exactly \".concat(count, \" arguments were expected, got \").concat(args.length, \" instead\"));\n  }\n}\n\nfunction assertArgsMinCount(args, count) {\n  if (args.length < count) {\n    throw new Error(\"At least \".concat(count, \" arguments were expected, got \").concat(args.length, \" instead\"));\n  }\n}\n\nfunction assertArgsMaxCount(args, count) {\n  if (args.length > count) {\n    throw new Error(\"At most \".concat(count, \" arguments were expected, got \").concat(args.length, \" instead\"));\n  }\n}\n\nfunction assertArgsEven(args) {\n  if (args.length % 2 !== 0) {\n    throw new Error(\"An even amount of arguments was expected, got \".concat(args, \" instead\"));\n  }\n}\n\nfunction assertArgsOdd(args) {\n  if (args.length % 2 === 0) {\n    throw new Error(\"An odd amount of arguments was expected, got \".concat(args, \" instead\"));\n  }\n}\n\nfunction assertUniqueInferredType(args, types) {\n  if (!isTypeUnique(types)) {\n    throw new Error(\"Could not infer only one type from the following expression: \".concat(JSON.stringify(args)));\n  }\n}\n\nOperators['get'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.ANY;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertString(args[0]);\n    var value = args[0].toString();\n\n    if (context.attributes.indexOf(value) === -1) {\n      context.attributes.push(value);\n    }\n\n    var prefix = context.inFragmentShader ? 'v_' : 'a_';\n    return prefix + value;\n  }\n};\n/**\n * Get the uniform name given a variable name.\n * @param {string} variableName The variable name.\n * @return {string} The uniform name.\n */\n\nexport function uniformNameForVariable(variableName) {\n  return 'u_var_' + variableName;\n}\nOperators['var'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.ANY;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertString(args[0]);\n    var value = args[0].toString();\n\n    if (context.variables.indexOf(value) === -1) {\n      context.variables.push(value);\n    }\n\n    return uniformNameForVariable(value);\n  }\n};\nexport var PALETTE_TEXTURE_ARRAY = 'u_paletteTextures'; // ['palette', index, colors]\n\nOperators['palette'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.COLOR;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumber(args[0]);\n    var index = expressionToGlsl(context, args[0]);\n    var colors = args[1];\n\n    if (!Array.isArray(colors)) {\n      throw new Error('The second argument of palette must be an array');\n    }\n\n    var numColors = colors.length;\n    var palette = new Uint8Array(numColors * 4);\n\n    for (var i = 0; i < numColors; i++) {\n      var candidate = colors[i];\n      /**\n       * @type {import('../color.js').Color}\n       */\n\n      var color = void 0;\n\n      if (typeof candidate === 'string') {\n        color = fromString(candidate);\n      } else {\n        if (!Array.isArray(candidate)) {\n          throw new Error('The second argument of palette must be an array of strings or colors');\n        }\n\n        var length_1 = candidate.length;\n\n        if (length_1 === 4) {\n          color = candidate;\n        } else {\n          if (length_1 !== 3) {\n            throw new Error(\"Expected palette color to have 3 or 4 values, got \".concat(length_1));\n          }\n\n          color = [candidate[0], candidate[1], candidate[2], 1];\n        }\n      }\n\n      var offset = i * 4;\n      palette[offset] = color[0];\n      palette[offset + 1] = color[1];\n      palette[offset + 2] = color[2];\n      palette[offset + 3] = color[3] * 255;\n    }\n\n    if (!context.paletteTextures) {\n      context.paletteTextures = [];\n    }\n\n    var paletteName = \"\".concat(PALETTE_TEXTURE_ARRAY, \"[\").concat(context.paletteTextures.length, \"]\");\n    var paletteTexture = new PaletteTexture(paletteName, palette);\n    context.paletteTextures.push(paletteTexture);\n    return \"texture2D(\".concat(paletteName, \", vec2((\").concat(index, \" + 0.5) / \").concat(numColors, \".0, 0.5))\");\n  }\n};\nvar GET_BAND_VALUE_FUNC = 'getBandValue';\nOperators['band'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsMinCount(args, 1);\n    assertArgsMaxCount(args, 3);\n    var band = args[0];\n\n    if (!(GET_BAND_VALUE_FUNC in context.functions)) {\n      var ifBlocks = '';\n      var bandCount = context.bandCount || 1;\n\n      for (var i = 0; i < bandCount; i++) {\n        var colorIndex = Math.floor(i / 4);\n        var bandIndex = i % 4;\n\n        if (bandIndex === bandCount - 1 && bandIndex === 1) {\n          // LUMINANCE_ALPHA - band 1 assigned to rgb and band 2 assigned to alpha\n          bandIndex = 3;\n        }\n\n        var textureName = \"\".concat(Uniforms.TILE_TEXTURE_ARRAY, \"[\").concat(colorIndex, \"]\");\n        ifBlocks += \"\\n          if (band == \".concat(i + 1, \".0) {\\n            return texture2D(\").concat(textureName, \", v_textureCoord + vec2(dx, dy))[\").concat(bandIndex, \"];\\n          }\\n        \");\n      }\n\n      context.functions[GET_BAND_VALUE_FUNC] = \"\\n        float getBandValue(float band, float xOffset, float yOffset) {\\n          float dx = xOffset / \".concat(Uniforms.TEXTURE_PIXEL_WIDTH, \";\\n          float dy = yOffset / \").concat(Uniforms.TEXTURE_PIXEL_HEIGHT, \";\\n          \").concat(ifBlocks, \"\\n        }\\n      \");\n    }\n\n    var bandExpression = expressionToGlsl(context, band);\n    var xOffsetExpression = expressionToGlsl(context, args[1] || 0);\n    var yOffsetExpression = expressionToGlsl(context, args[2] || 0);\n    return \"\".concat(GET_BAND_VALUE_FUNC, \"(\").concat(bandExpression, \", \").concat(xOffsetExpression, \", \").concat(yOffsetExpression, \")\");\n  }\n};\nOperators['time'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 0);\n    return 'u_time';\n  }\n};\nOperators['zoom'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 0);\n    return 'u_zoom';\n  }\n};\nOperators['resolution'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 0);\n    return 'u_resolution';\n  }\n};\nOperators['*'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" * \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['/'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" / \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['+'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" + \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['-'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" - \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['clamp'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 3);\n    assertNumbers(args);\n    var min = expressionToGlsl(context, args[1]);\n    var max = expressionToGlsl(context, args[2]);\n    return \"clamp(\".concat(expressionToGlsl(context, args[0]), \", \").concat(min, \", \").concat(max, \")\");\n  }\n};\nOperators['%'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"mod(\".concat(expressionToGlsl(context, args[0]), \", \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['^'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"pow(\".concat(expressionToGlsl(context, args[0]), \", \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['abs'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"abs(\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\nOperators['floor'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"floor(\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\nOperators['round'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"floor(\".concat(expressionToGlsl(context, args[0]), \" + 0.5)\");\n  }\n};\nOperators['ceil'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"ceil(\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\nOperators['sin'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"sin(\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\nOperators['cos'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"cos(\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\nOperators['atan'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsMinCount(args, 1);\n    assertArgsMaxCount(args, 2);\n    assertNumbers(args);\n    return args.length === 2 ? \"atan(\".concat(expressionToGlsl(context, args[0]), \", \").concat(expressionToGlsl(context, args[1]), \")\") : \"atan(\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\nOperators['>'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" > \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['>='] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" >= \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['<'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" < \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\nOperators['<='] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\".concat(expressionToGlsl(context, args[0]), \" <= \").concat(expressionToGlsl(context, args[1]), \")\");\n  }\n};\n\nfunction getEqualOperator(operator) {\n  return {\n    getReturnType: function getReturnType(args) {\n      return ValueTypes.BOOLEAN;\n    },\n    toGlsl: function toGlsl(context, args) {\n      assertArgsCount(args, 2); // find common type\n\n      var type = ValueTypes.ANY;\n\n      for (var i = 0; i < args.length; i++) {\n        type &= getValueType(args[i]);\n      }\n\n      if (type === ValueTypes.NONE) {\n        throw new Error(\"All arguments should be of compatible type, got \".concat(JSON.stringify(args), \" instead\"));\n      } // Since it's not possible to have color types here, we can leave it out\n      // This fixes issues in case the value type is ambiguously detected as a color (e.g. the string 'red')\n\n\n      type &= ~ValueTypes.COLOR;\n      return \"(\".concat(expressionToGlsl(context, args[0], type), \" \").concat(operator, \" \").concat(expressionToGlsl(context, args[1], type), \")\");\n    }\n  };\n}\n\nOperators['=='] = getEqualOperator('==');\nOperators['!='] = getEqualOperator('!=');\nOperators['!'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertBoolean(args[0]);\n    return \"(!\".concat(expressionToGlsl(context, args[0]), \")\");\n  }\n};\n\nfunction getDecisionOperator(operator) {\n  return {\n    getReturnType: function getReturnType(args) {\n      return ValueTypes.BOOLEAN;\n    },\n    toGlsl: function toGlsl(context, args) {\n      assertArgsMinCount(args, 2);\n\n      for (var i = 0; i < args.length; i++) {\n        assertBoolean(args[i]);\n      }\n\n      var result = '';\n      result = args.map(function (arg) {\n        return expressionToGlsl(context, arg);\n      }).join(\" \".concat(operator, \" \"));\n      result = \"(\".concat(result, \")\");\n      return result;\n    }\n  };\n}\n\nOperators['all'] = getDecisionOperator('&&');\nOperators['any'] = getDecisionOperator('||');\nOperators['between'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 3);\n    assertNumbers(args);\n    var min = expressionToGlsl(context, args[1]);\n    var max = expressionToGlsl(context, args[2]);\n    var value = expressionToGlsl(context, args[0]);\n    return \"(\".concat(value, \" >= \").concat(min, \" && \").concat(value, \" <= \").concat(max, \")\");\n  }\n};\nOperators['array'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER_ARRAY;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsMinCount(args, 2);\n    assertArgsMaxCount(args, 4);\n    assertNumbers(args);\n    var parsedArgs = args.map(function (val) {\n      return expressionToGlsl(context, val, ValueTypes.NUMBER);\n    });\n    return \"vec\".concat(args.length, \"(\").concat(parsedArgs.join(', '), \")\");\n  }\n};\nOperators['color'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.COLOR;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsMinCount(args, 3);\n    assertArgsMaxCount(args, 4);\n    assertNumbers(args);\n    var array =\n    /** @type {Array<number>} */\n    args;\n\n    if (args.length === 3) {\n      array.push(1);\n    }\n\n    var parsedArgs = args.map(function (val, i) {\n      return expressionToGlsl(context, val, ValueTypes.NUMBER) + (i < 3 ? ' / 255.0' : '');\n    });\n    return \"vec\".concat(args.length, \"(\").concat(parsedArgs.join(', '), \")\");\n  }\n};\nOperators['interpolate'] = {\n  getReturnType: function getReturnType(args) {\n    var type = ValueTypes.COLOR | ValueTypes.NUMBER;\n\n    for (var i = 3; i < args.length; i += 2) {\n      type = type & getValueType(args[i]);\n    }\n\n    return type;\n  },\n  toGlsl: function toGlsl(context, args, opt_typeHint) {\n    assertArgsEven(args);\n    assertArgsMinCount(args, 6); // validate interpolation type\n\n    var type = args[0];\n    var interpolation;\n\n    switch (type[0]) {\n      case 'linear':\n        interpolation = 1;\n        break;\n\n      case 'exponential':\n        interpolation = type[1];\n        break;\n\n      default:\n        interpolation = null;\n    }\n\n    if (!interpolation) {\n      throw new Error(\"Invalid interpolation type for \\\"interpolate\\\" operator, received: \".concat(JSON.stringify(type)));\n    } // compute input/output types\n\n\n    var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;\n    var outputType = Operators['interpolate'].getReturnType(args) & typeHint;\n    assertUniqueInferredType(args, outputType);\n    var input = expressionToGlsl(context, args[1]);\n    var exponent = numberToGlsl(interpolation);\n    var result = '';\n\n    for (var i = 2; i < args.length - 2; i += 2) {\n      var stop1 = expressionToGlsl(context, args[i]);\n      var output1 = result || expressionToGlsl(context, args[i + 1], outputType);\n      var stop2 = expressionToGlsl(context, args[i + 2]);\n      var output2 = expressionToGlsl(context, args[i + 3], outputType);\n      result = \"mix(\".concat(output1, \", \").concat(output2, \", pow(clamp((\").concat(input, \" - \").concat(stop1, \") / (\").concat(stop2, \" - \").concat(stop1, \"), 0.0, 1.0), \").concat(exponent, \"))\");\n    }\n\n    return result;\n  }\n};\nOperators['match'] = {\n  getReturnType: function getReturnType(args) {\n    var type = ValueTypes.ANY;\n\n    for (var i = 2; i < args.length; i += 2) {\n      type = type & getValueType(args[i]);\n    }\n\n    type = type & getValueType(args[args.length - 1]);\n    return type;\n  },\n  toGlsl: function toGlsl(context, args, opt_typeHint) {\n    assertArgsEven(args);\n    assertArgsMinCount(args, 4);\n    var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;\n    var outputType = Operators['match'].getReturnType(args) & typeHint;\n    assertUniqueInferredType(args, outputType);\n    var input = expressionToGlsl(context, args[0]);\n    var fallback = expressionToGlsl(context, args[args.length - 1], outputType);\n    var result = null;\n\n    for (var i = args.length - 3; i >= 1; i -= 2) {\n      var match = expressionToGlsl(context, args[i]);\n      var output = expressionToGlsl(context, args[i + 1], outputType);\n      result = \"(\".concat(input, \" == \").concat(match, \" ? \").concat(output, \" : \").concat(result || fallback, \")\");\n    }\n\n    return result;\n  }\n};\nOperators['case'] = {\n  getReturnType: function getReturnType(args) {\n    var type = ValueTypes.ANY;\n\n    for (var i = 1; i < args.length; i += 2) {\n      type = type & getValueType(args[i]);\n    }\n\n    type = type & getValueType(args[args.length - 1]);\n    return type;\n  },\n  toGlsl: function toGlsl(context, args, opt_typeHint) {\n    assertArgsOdd(args);\n    assertArgsMinCount(args, 3);\n    var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;\n    var outputType = Operators['case'].getReturnType(args) & typeHint;\n    assertUniqueInferredType(args, outputType);\n\n    for (var i = 0; i < args.length - 1; i += 2) {\n      assertBoolean(args[i]);\n    }\n\n    var fallback = expressionToGlsl(context, args[args.length - 1], outputType);\n    var result = null;\n\n    for (var i = args.length - 3; i >= 0; i -= 2) {\n      var condition = expressionToGlsl(context, args[i]);\n      var output = expressionToGlsl(context, args[i + 1], outputType);\n      result = \"(\".concat(condition, \" ? \").concat(output, \" : \").concat(result || fallback, \")\");\n    }\n\n    return result;\n  }\n};","var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/WebGLTile\n */\n\n\nimport BaseTileLayer from './BaseTile.js';\nimport LayerProperty from '../layer/Property.js';\nimport SourceState from '../source/State.js';\nimport WebGLTileLayerRenderer, { Attributes, Uniforms } from '../renderer/webgl/TileLayer.js';\nimport { PALETTE_TEXTURE_ARRAY, ValueTypes, expressionToGlsl, getStringNumberEquivalent, uniformNameForVariable } from '../style/expressions.js';\nimport { assign } from '../obj.js';\n/**\n * @typedef {import(\"../source/DataTile.js\").default|import(\"../source/TileImage.js\").default} SourceType\n */\n\n/**\n * @typedef {Object} Style\n * Translates tile data to rendered pixels.\n *\n * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These\n * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`\n * {@link import(\"../style/expressions.js\").ExpressionValue expressions}, using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLTile.js\").default#updateStyleVariables} method.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [color] An expression applied to color values.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [brightness=0] Value used to decrease or increase\n * the layer brightness.  Values range from -1 to 1.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [contrast=0] Value used to decrease or increase\n * the layer contrast.  Values range from -1 to 1.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [exposure=0] Value used to decrease or increase\n * the layer exposure.  Values range from -1 to 1.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [saturation=0] Value used to decrease or increase\n * the layer saturation.  Values range from -1 to 1.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.\n * Values range from 0 to infinity.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Style} [style] Style to apply to the layer.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {SourceType} [source] Source for this layer.\n * @property {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>} [sources] Array\n * of sources for this layer. Takes precedence over `source`. Can either be an array of sources, or a function that\n * expects an extent and a resolution (in view projection units per pixel) and returns an array of sources. See\n * {@link module:ol/source.sourcesFromTileGrid} for a helper function to generate sources that are organized in a\n * pyramid following the same pattern as a tile grid.\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map~Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n */\n\n/**\n * @typedef {Object} ParsedStyle\n * @property {string} vertexShader The vertex shader.\n * @property {string} fragmentShader The fragment shader.\n * @property {Object<string,import(\"../webgl/Helper.js\").UniformValue>} uniforms Uniform definitions.\n * @property {Array<import(\"../webgl/PaletteTexture.js\").default>} paletteTextures Palette textures.\n */\n\n/**\n * @param {Style} style The layer style.\n * @param {number} [bandCount] The number of bands.\n * @return {ParsedStyle} Shaders and uniforms generated from the style.\n */\n\nfunction parseStyle(style, bandCount) {\n  var vertexShader = \"\\n    attribute vec2 \".concat(Attributes.TEXTURE_COORD, \";\\n    uniform mat4 \").concat(Uniforms.TILE_TRANSFORM, \";\\n    uniform float \").concat(Uniforms.TEXTURE_PIXEL_WIDTH, \";\\n    uniform float \").concat(Uniforms.TEXTURE_PIXEL_HEIGHT, \";\\n    uniform float \").concat(Uniforms.TEXTURE_RESOLUTION, \";\\n    uniform float \").concat(Uniforms.TEXTURE_ORIGIN_X, \";\\n    uniform float \").concat(Uniforms.TEXTURE_ORIGIN_Y, \";\\n    uniform float \").concat(Uniforms.DEPTH, \";\\n\\n    varying vec2 v_textureCoord;\\n    varying vec2 v_mapCoord;\\n\\n    void main() {\\n      v_textureCoord = \").concat(Attributes.TEXTURE_COORD, \";\\n      v_mapCoord = vec2(\\n        \").concat(Uniforms.TEXTURE_ORIGIN_X, \" + \").concat(Uniforms.TEXTURE_RESOLUTION, \" * \").concat(Uniforms.TEXTURE_PIXEL_WIDTH, \" * v_textureCoord[0],\\n        \").concat(Uniforms.TEXTURE_ORIGIN_Y, \" - \").concat(Uniforms.TEXTURE_RESOLUTION, \" * \").concat(Uniforms.TEXTURE_PIXEL_HEIGHT, \" * v_textureCoord[1]\\n      );\\n      gl_Position = \").concat(Uniforms.TILE_TRANSFORM, \" * vec4(\").concat(Attributes.TEXTURE_COORD, \", \").concat(Uniforms.DEPTH, \", 1.0);\\n    }\\n  \");\n  /**\n   * @type {import(\"../style/expressions.js\").ParsingContext}\n   */\n\n  var context = {\n    inFragmentShader: true,\n    variables: [],\n    attributes: [],\n    stringLiteralsMap: {},\n    functions: {},\n    bandCount: bandCount\n  };\n  var pipeline = [];\n\n  if (style.color !== undefined) {\n    var color = expressionToGlsl(context, style.color, ValueTypes.COLOR);\n    pipeline.push(\"color = \".concat(color, \";\"));\n  }\n\n  if (style.contrast !== undefined) {\n    var contrast = expressionToGlsl(context, style.contrast, ValueTypes.NUMBER);\n    pipeline.push(\"color.rgb = clamp((\".concat(contrast, \" + 1.0) * color.rgb - (\").concat(contrast, \" / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\"));\n  }\n\n  if (style.exposure !== undefined) {\n    var exposure = expressionToGlsl(context, style.exposure, ValueTypes.NUMBER);\n    pipeline.push(\"color.rgb = clamp((\".concat(exposure, \" + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\"));\n  }\n\n  if (style.saturation !== undefined) {\n    var saturation = expressionToGlsl(context, style.saturation, ValueTypes.NUMBER);\n    pipeline.push(\"\\n      float saturation = \".concat(saturation, \" + 1.0;\\n      float sr = (1.0 - saturation) * 0.2126;\\n      float sg = (1.0 - saturation) * 0.7152;\\n      float sb = (1.0 - saturation) * 0.0722;\\n      mat3 saturationMatrix = mat3(\\n        sr + saturation, sr, sr,\\n        sg, sg + saturation, sg,\\n        sb, sb, sb + saturation\\n      );\\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\\n    \"));\n  }\n\n  if (style.gamma !== undefined) {\n    var gamma = expressionToGlsl(context, style.gamma, ValueTypes.NUMBER);\n    pipeline.push(\"color.rgb = pow(color.rgb, vec3(1.0 / \".concat(gamma, \"));\"));\n  }\n\n  if (style.brightness !== undefined) {\n    var brightness = expressionToGlsl(context, style.brightness, ValueTypes.NUMBER);\n    pipeline.push(\"color.rgb = clamp(color.rgb + \".concat(brightness, \", vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\"));\n  }\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n\n\n  var uniforms = {};\n  var numVariables = context.variables.length;\n\n  if (numVariables > 1 && !style.variables) {\n    throw new Error(\"Missing variables in style (expected \".concat(context.variables, \")\"));\n  }\n\n  var _loop_1 = function _loop_1(i) {\n    var variableName = context.variables[i];\n\n    if (!(variableName in style.variables)) {\n      throw new Error(\"Missing '\".concat(variableName, \"' in style variables\"));\n    }\n\n    var uniformName = uniformNameForVariable(variableName);\n\n    uniforms[uniformName] = function () {\n      var value = style.variables[variableName];\n\n      if (typeof value === 'string') {\n        value = getStringNumberEquivalent(context, value);\n      }\n\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\n    };\n  };\n\n  for (var i = 0; i < numVariables; ++i) {\n    _loop_1(i);\n  }\n\n  var uniformDeclarations = Object.keys(uniforms).map(function (name) {\n    return \"uniform float \".concat(name, \";\");\n  });\n  var textureCount = Math.ceil(bandCount / 4);\n  uniformDeclarations.push(\"uniform sampler2D \".concat(Uniforms.TILE_TEXTURE_ARRAY, \"[\").concat(textureCount, \"];\"));\n\n  if (context.paletteTextures) {\n    uniformDeclarations.push(\"uniform sampler2D \".concat(PALETTE_TEXTURE_ARRAY, \"[\").concat(context.paletteTextures.length, \"];\"));\n  }\n\n  var functionDefintions = Object.keys(context.functions).map(function (name) {\n    return context.functions[name];\n  });\n  var fragmentShader = \"\\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\\n    precision highp float;\\n    #else\\n    precision mediump float;\\n    #endif\\n\\n    varying vec2 v_textureCoord;\\n    varying vec2 v_mapCoord;\\n    uniform vec4 \".concat(Uniforms.RENDER_EXTENT, \";\\n    uniform float \").concat(Uniforms.TRANSITION_ALPHA, \";\\n    uniform float \").concat(Uniforms.TEXTURE_PIXEL_WIDTH, \";\\n    uniform float \").concat(Uniforms.TEXTURE_PIXEL_HEIGHT, \";\\n    uniform float \").concat(Uniforms.RESOLUTION, \";\\n    uniform float \").concat(Uniforms.ZOOM, \";\\n\\n    \").concat(uniformDeclarations.join('\\n'), \"\\n\\n    \").concat(functionDefintions.join('\\n'), \"\\n\\n    void main() {\\n      if (\\n        v_mapCoord[0] < \").concat(Uniforms.RENDER_EXTENT, \"[0] ||\\n        v_mapCoord[1] < \").concat(Uniforms.RENDER_EXTENT, \"[1] ||\\n        v_mapCoord[0] > \").concat(Uniforms.RENDER_EXTENT, \"[2] ||\\n        v_mapCoord[1] > \").concat(Uniforms.RENDER_EXTENT, \"[3]\\n      ) {\\n        discard;\\n      }\\n\\n      vec4 color = texture2D(\").concat(Uniforms.TILE_TEXTURE_ARRAY, \"[0],  v_textureCoord);\\n\\n      \").concat(pipeline.join('\\n'), \"\\n\\n      if (color.a == 0.0) {\\n        discard;\\n      }\\n\\n      gl_FragColor = color;\\n      gl_FragColor.rgb *= gl_FragColor.a;\\n      gl_FragColor *= \").concat(Uniforms.TRANSITION_ALPHA, \";\\n    }\");\n  return {\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    uniforms: uniforms,\n    paletteTextures: context.paletteTextures\n  };\n}\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>\n * @api\n */\n\n\nvar WebGLTileLayer =\n/** @class */\nfunction (_super) {\n  __extends(WebGLTileLayer, _super);\n  /**\n   * @param {Options} opt_options Tile layer options.\n   */\n\n\n  function WebGLTileLayer(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? assign({}, opt_options) : {};\n    var style = options.style || {};\n    delete options.style;\n    var cacheSize = options.cacheSize;\n    delete options.cacheSize;\n    _this = _super.call(this, options) || this;\n    /**\n     * @type {Array<SourceType>|function(import(\"../extent.js\").Extent, number):Array<SourceType>}\n     * @private\n     */\n\n    _this.sources_ = options.sources;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.renderedResolution_ = NaN;\n    /**\n     * @type {Style}\n     * @private\n     */\n\n    _this.style_ = style;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.cacheSize_ = cacheSize;\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n\n    _this.styleVariables_ = _this.style_.variables || {};\n\n    _this.addChangeListener(LayerProperty.SOURCE, _this.handleSourceUpdate_);\n\n    return _this;\n  }\n  /**\n   * Gets the sources for this layer, for a given extent and resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<SourceType>} Sources.\n   */\n\n\n  WebGLTileLayer.prototype.getSources = function (extent, resolution) {\n    var source = this.getSource();\n    return this.sources_ ? typeof this.sources_ === 'function' ? this.sources_(extent, resolution) : this.sources_ : source ? [source] : [];\n  };\n  /**\n   * @return {SourceType} The source being rendered.\n   */\n\n\n  WebGLTileLayer.prototype.getRenderSource = function () {\n    return (\n      /** @type {SourceType} */\n      this.getLayerState().source || this.getSource()\n    );\n  };\n  /**\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n\n\n  WebGLTileLayer.prototype.getSourceState = function () {\n    var source = this.getRenderSource();\n    return source ? source.getState() : SourceState.UNDEFINED;\n  };\n  /**\n   * @private\n   */\n\n\n  WebGLTileLayer.prototype.handleSourceUpdate_ = function () {\n    if (this.getSource()) {\n      this.setStyle(this.style_);\n    }\n  };\n  /**\n   * @private\n   * @return {number} The number of source bands.\n   */\n\n\n  WebGLTileLayer.prototype.getSourceBandCount_ = function () {\n    var source = this.getSource();\n    return source && 'bandCount' in source ? source.bandCount : 4;\n  };\n\n  WebGLTileLayer.prototype.createRenderer = function () {\n    var parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n    return new WebGLTileLayerRenderer(this, {\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      cacheSize: this.cacheSize_,\n      paletteTextures: parsedStyle.paletteTextures\n    });\n  };\n  /**\n   * @param {import(\"../PluggableMap\").FrameState} frameState Frame state.\n   * @param {Array<SourceType>} sources Sources.\n   * @return {HTMLElement} Canvas.\n   */\n\n\n  WebGLTileLayer.prototype.renderSources = function (frameState, sources) {\n    var layerRenderer = this.getRenderer();\n    var canvas;\n\n    for (var i = 0, ii = sources.length; i < ii; ++i) {\n      this.getLayerState().source = sources[i];\n\n      if (layerRenderer.prepareFrame(frameState)) {\n        canvas = layerRenderer.renderFrame(frameState);\n      }\n    }\n\n    return canvas;\n  };\n  /**\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n\n\n  WebGLTileLayer.prototype.render = function (frameState, target) {\n    var _this = this;\n\n    this.rendered = true;\n    var viewState = frameState.viewState;\n    var sources = this.getSources(frameState.extent, viewState.resolution);\n    var ready = true;\n\n    var _loop_2 = function _loop_2(i, ii) {\n      var source = sources[i];\n      var sourceState = source.getState();\n\n      if (sourceState == SourceState.LOADING) {\n        var onChange_1 = function onChange_1() {\n          if (source.getState() == SourceState.READY) {\n            source.removeEventListener('change', onChange_1);\n\n            _this.changed();\n          }\n        };\n\n        source.addEventListener('change', onChange_1);\n      }\n\n      ready = ready && sourceState == SourceState.READY;\n    };\n\n    for (var i = 0, ii = sources.length; i < ii; ++i) {\n      _loop_2(i, ii);\n    }\n\n    var canvas = this.renderSources(frameState, sources);\n\n    if (this.getRenderer().renderComplete && ready) {\n      // Fully rendered, done.\n      this.renderedResolution_ = viewState.resolution;\n      return canvas;\n    } // Render sources from previously fully rendered frames\n\n\n    if (this.renderedResolution_ > 0.5 * viewState.resolution) {\n      var altSources = this.getSources(frameState.extent, this.renderedResolution_).filter(function (source) {\n        return !sources.includes(source);\n      });\n\n      if (altSources.length > 0) {\n        return this.renderSources(frameState, altSources);\n      }\n    }\n\n    return canvas;\n  };\n  /**\n   * Update the layer style.  The `updateStyleVariables` function is a more efficient\n   * way to update layer rendering.  In cases where the whole style needs to be updated,\n   * this method may be called instead.  Note that calling this method will also replace\n   * any previously set variables, so the new style also needs to include new variables,\n   * if needed.\n   * @param {Style} style The new style.\n   */\n\n\n  WebGLTileLayer.prototype.setStyle = function (style) {\n    this.styleVariables_ = style.variables || {};\n    this.style_ = style;\n    var parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n    var renderer = this.getRenderer();\n    renderer.reset({\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      paletteTextures: parsedStyle.paletteTextures\n    });\n    this.changed();\n  };\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   * @api\n   */\n\n\n  WebGLTileLayer.prototype.updateStyleVariables = function (variables) {\n    assign(this.styleVariables_, variables);\n    this.changed();\n  };\n\n  return WebGLTileLayer;\n}(BaseTileLayer);\n/**\n * Clean up underlying WebGL resources.\n * @function\n * @api\n */\n\n\nWebGLTileLayer.prototype.dispose;\nexport default WebGLTileLayer;"],"names":["_extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","this","constructor","create","DataTile","_super","options","_this","state","tileCoord","transition","interpolate","loader_","loader","data_","error_","getData","getError","load","changed","self","then","data","catch","error","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","CONTEXT_IDS","getContext","canvas","opt_attributes","attributes","preserveDrawingBuffer","ii","length","i","context","e","BufferUsage","WebGLArrayBuffer","type","opt_usage","array","usage","undefined","ofSize","size","getArrayClassForType","fromArray","arrayClass","from","fromArrayBuffer","buffer","getType","getArray","getUsage","getSize","Float32Array","Uint32Array","bindAndConfigure","gl","texture","resampleFilter","LINEAR","NEAREST","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","uploadDataTexture","helper","bandCount","getGL","format","textureType","bytesPerRow","byteLength","unpackAlignment","LUMINANCE","LUMINANCE_ALPHA","RGB","RGBA","Error","concat","FLOAT","getExtension","UNSIGNED_BYTE","oldUnpackAlignment","getParameter","UNPACK_ALIGNMENT","pixelStorei","texImage2D","pixelContext","TileTexture","tile","textures","handleTileChange_","bind","grid","getTileSize","tilePixelRatio_","tilePixelRatio","gutter_","gutter","NaN","helper_","coords","flushBufferData","setTile","removeEventListener","EventType","loaded","getState","TileState","uploadTile_","ImageTile","image","getImage","Image","crossOrigin","addEventListener","width","Math","round","height","drawImage","createTexture","push","uploadImageTexture","pixelSize","isFloat","pixelCount","DataType","Uint8Array","bytesPerElement","BYTES_PER_ELEMENT","floor","textureCount","ceil","textureDataArrays","textureIndex","dataIndex","rowOffset","colCount","rowIndex","colIndex","dataValue","pixelIndex","bandIndex","textureData","dispatchEvent","disposeInternal","deleteBuffer","deleteTexture","getPixelData","col","row","data_1","pixelsPerRow","DataView","bytesPerPixel","offset_1","slice","offset","document","createElement","clearRect","getImageData","err","WebGLPostProcessingPass","gl_","webGlContext","scaleRatio_","scaleRatio","renderTargetTexture_","renderTargetTextureSize_","frameBuffer_","createFramebuffer","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","bindBuffer","bufferData","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","uniforms_","uniforms","keys","forEach","name","value","location","init","frameState","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","viewport","internalFormat","framebufferTexture2D","COLOR_ATTACHMENT0","apply","nextPass","preCompose","postCompose","activeTexture","TEXTURE0","canvasId","renderTargets","getContextAttributes","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","useProgram","enableVertexAttribArray","vertexAttribPointer","uniform2f","uniform1i","opacity","layerStatesArray","layerIndex","uniform1f","applyUniforms","drawArrays","TRIANGLES","textureSlot","uniform","HTMLCanvasElement","ImageData","isArray","uniform3f","uniform4f","fromTransform","mat4","transform","DefaultUniform","AttributeType","canvasCache","getSharedCanvasCacheKey","key","uniqueCanvasCacheKeyCount","WebGLHelper","opt_options","boundHandleWebGLContextLost_","handleWebGLContextLost","boundHandleWebGLContextRestored_","handleWebGLContextRestored","canvasCacheKey_","canvasCacheKey","canvas_","cacheItem","style","position","left","users","getCanvas","bufferCache_","extensionCache_","currentProgram_","ContextEventType","offsetRotateMatrix_","offsetScaleMatrix_","tmpMat4_","uniformLocations_","attribLocations_","setUniforms","postProcessPasses_","postProcesses","map","shaderCompileErrors_","startTime_","Date","now","name_1","canvasCacheKeyMatches","extension","bufferKey","bufferCache","webGlBuffer","buf","bufferCacheEntry","isContextLost","loseContext","releaseCanvas","prepareDraw","opt_disableAlphaBlend","pixelRatio","ZERO","applyFrameState","prepareDrawToRenderTarget","renderTarget","getFramebuffer","getTexture","drawElements","start","end","elementType","UNSIGNED_INT","numItems","offsetInBytes","finalizeDraw","rotation","viewState","offsetScaleMatrix","offsetRotateMatrix","setUniformMatrixValue","setUniformFloatValue","zoom","resolution","HTMLImageElement","prevValue","complete","program","source","shader","getProgram","fragmentShaderSource","vertexShaderSource","getShaderParameter","COMPILE_STATUS","message","getShaderInfoLog","deleteShader","getProgramParameter","LINK_STATUS","getAttributeLocation","makeProjectionTransform","center","setUniformFloatVec4","uniform4fv","uniformMatrix4fv","enableAttributeArray_","attribName","stride","enableAttributes","attr","getByteSizeFromType","computeAttributesStride","opt_data","opt_texture","Disposable","Uint16Array","WebGLLayerRenderer","layer","inversePixelTransform_","pixelContext_","postProcesses_","addChangeListener","removeHelper","dispatchPreComposeEvent","dispatchPostComposeEvent","getLayer","hasListener","event_1","event_2","reset","dispose","prepareFrame","getRenderSource","incrementGroup","groupNumber","className","renderer","getRenderer","layerClassName","getClassName","mapId","afterHelperCreated","prepareFrameInternal","dispatchRenderEvent_","event_3","preRender","postRender","getDataAtPixel","pixel","hitTolerance","renderPixel","layerExtent","getExtent","renderCoordinate","pixelToCoordinateTransform","x","y","pixelCanvas","Layer","Uniforms","Attributes","attributeDescriptions","empty","depthForZ","z","addTileTextureToLookup","tileTexturesByZ","tileTexture","getRenderExtent","extent","layerState","projection","getWrapX","gridExtent","getTileGridForProjection","getCacheKey","getKey","WebGLTileLayerRenderer","tileLayer","renderComplete","tileTransform_","tempMat4_","tempTileRange_","TileRange","tempTileCoord_","tempSize_","program_","vertexShader_","fragmentShader_","indices_","cacheSize","tileTextureCache_","LRUCache","paletteTextures_","paletteTextures","frameState_","isDrawableTile_","tileState","useInterimTilesOnError","getUseInterimTilesOnError","State","enqueueTiles","initialZ","tileSource","tileGrid","getTilePixelRatio","getGutterForProjection","tileSourceKey","wantedTiles","tileTextureCache","minZ","max","getPreload","getMinZoom","tileRange","getTileRangeForExtentAndZ","tileResolution","getResolution","minX","maxX","minY","maxY","cacheKey","containsKey","get","getTile","interimTile","getInterimTile","set","tileQueueKey","tileQueue","isKeyQueued","enqueue","getTileCoordCenter","renderFrame","getZForResolution","zDirection","nextExtent","targetZ","nextResolution","alphaLookup","uid","time","blend","tileTextures","alpha","getAlpha","endTransition","tileCoordKey","findAltTiles_","minZoom","parentZ","zs","Number","sort","centerX","centerY","j","jj","tileZ","tileSize","tileOrigin","getOrigin","centerI","centerJ","tileScale","depth","tileTextures_1","tileCenterI","tileCenterJ","textureProperty","uniformName","paletteIndex","paletteTexture","animate","canExpireCache","pop","postRenderFunctions","expireCache","coordinate","getTileCoordForCoordAndZ","altZ","getTileRangeForTileCoordAndZ","covered","deleteProgram","PaletteTexture","texture_","ValueTypes","Operators","getValueType","JSON","stringify","valueArr","every","v","operator","getReturnType","numberToGlsl","s","toString","indexOf","arrayToGlsl","join","getStringNumberEquivalent","string","stringLiteralsMap","expressionToGlsl","typeHint","toGlsl","valueType","stringToGlsl","color","c","colorToGlsl","assertNumber","assertNumbers","values","assertString","assertBoolean","assertArgsCount","args","count","assertArgsMinCount","assertArgsMaxCount","assertArgsEven","assertUniqueInferredType","types","uniformNameForVariable","variableName","inFragmentShader","variables","PALETTE_TEXTURE_ARRAY","index","colors","numColors","palette","candidate","length_1","paletteName","GET_BAND_VALUE_FUNC","getEqualOperator","getDecisionOperator","result","arg","band","functions","ifBlocks","colorIndex","textureName","bandExpression","xOffsetExpression","yOffsetExpression","min","parsedArgs","val","opt_typeHint","interpolation","outputType","input","exponent","stop1","output1","stop2","output2","fallback","match","output","assertArgsOdd","condition","parseStyle","pipeline","contrast","exposure","saturation","gamma","brightness","numVariables","_loop_1","uniformDeclarations","functionDefintions","WebGLTileLayer","sources_","sources","renderedResolution_","style_","cacheSize_","styleVariables_","handleSourceUpdate_","getSources","getSource","getLayerState","getSourceState","setStyle","getSourceBandCount_","createRenderer","parsedStyle","renderSources","layerRenderer","render","target","rendered","ready","_loop_2","sourceState","onChange_1","altSources","filter","includes","updateStyleVariables","BaseTile"],"sourceRoot":""}