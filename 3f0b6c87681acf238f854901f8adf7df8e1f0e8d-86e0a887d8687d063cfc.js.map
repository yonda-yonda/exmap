{"version":3,"file":"3f0b6c87681acf238f854901f8adf7df8e1f0e8d-86e0a887d8687d063cfc.js","mappings":"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","sources":["webpack://exmap/./node_modules/ol/webgl.js","webpack://exmap/./node_modules/ol/webgl/Buffer.js","webpack://exmap/./node_modules/ol/webgl/TileTexture.js","webpack://exmap/./node_modules/ol/webgl/ContextEventType.js","webpack://exmap/./node_modules/ol/webgl/PostProcessingPass.js","webpack://exmap/./node_modules/ol/vec/mat4.js","webpack://exmap/./node_modules/ol/webgl/Helper.js","webpack://exmap/./node_modules/ol/renderer/webgl/Layer.js","webpack://exmap/./node_modules/ol/renderer/webgl/TileLayer.js","webpack://exmap/./node_modules/ol/webgl/PaletteTexture.js","webpack://exmap/./node_modules/ol/style/expressions.js","webpack://exmap/./node_modules/ol/layer/WebGLTile.js"],"sourcesContent":["/**\n * @module ol/webgl\n */\nimport { assign } from './obj.js';\n/**\n * Constants taken from goog.webgl\n */\n\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing vertices data, such as\n * position, color, texture coordinate, etc. These vertices are then referenced by an index buffer\n * to be drawn on screen (see {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER}).\n * @const\n * @type {number}\n * @api\n */\n\nexport var ARRAY_BUFFER = 0x8892;\n/**\n * Used by {@link module:ol/webgl/Helper~WebGLHelper} for buffers containing indices data.\n * Index buffers are essentially lists of references to vertices defined in a vertex buffer\n * (see {@link module:ol/webgl.ARRAY_BUFFER}), and define the primitives (triangles) to be drawn.\n * @const\n * @type {number}\n * @api\n */\n\nexport var ELEMENT_ARRAY_BUFFER = 0x8893;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\n\nexport var STREAM_DRAW = 0x88e0;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\n\nexport var STATIC_DRAW = 0x88e4;\n/**\n * Used by {link module:ol/webgl/Buffer~WebGLArrayBuffer}.\n * @const\n * @type {number}\n * @api\n */\n\nexport var DYNAMIC_DRAW = 0x88e8;\n/**\n * @const\n * @type {number}\n */\n\nexport var UNSIGNED_BYTE = 0x1401;\n/**\n * @const\n * @type {number}\n */\n\nexport var UNSIGNED_SHORT = 0x1403;\n/**\n * @const\n * @type {number}\n */\n\nexport var UNSIGNED_INT = 0x1405;\n/**\n * @const\n * @type {number}\n */\n\nexport var FLOAT = 0x1406;\n/** end of goog.webgl constants\n */\n\n/**\n * @const\n * @type {Array<string>}\n */\n\nvar CONTEXT_IDS = ['experimental-webgl', 'webgl', 'webkit-3d', 'moz-webgl'];\n/**\n * @param {HTMLCanvasElement} canvas Canvas.\n * @param {Object} [opt_attributes] Attributes.\n * @return {WebGLRenderingContext} WebGL rendering context.\n */\n\nexport function getContext(canvas, opt_attributes) {\n  var attributes = assign({\n    preserveDrawingBuffer: true\n  }, opt_attributes);\n  var ii = CONTEXT_IDS.length;\n\n  for (var i = 0; i < ii; ++i) {\n    try {\n      var context = canvas.getContext(CONTEXT_IDS[i], attributes);\n\n      if (context) {\n        return (\n          /** @type {!WebGLRenderingContext} */\n          context\n        );\n      }\n    } catch (e) {// pass\n    }\n  }\n\n  return null;\n}\n/**\n * @type {Array<string>}\n */\n\nvar supportedExtensions;\n/**\n * @return {Array<string>} List of supported WebGL extensions.\n */\n\nexport function getSupportedExtensions() {\n  if (!supportedExtensions) {\n    var canvas = document.createElement('canvas');\n    var gl = getContext(canvas);\n\n    if (gl) {\n      supportedExtensions = gl.getSupportedExtensions();\n    }\n  }\n\n  return supportedExtensions;\n}","/**\n * @module ol/webgl/Buffer\n */\nimport { ARRAY_BUFFER, ELEMENT_ARRAY_BUFFER } from '../webgl.js';\nimport { DYNAMIC_DRAW, STATIC_DRAW, STREAM_DRAW } from '../webgl.js';\nimport { assert } from '../asserts.js';\n/**\n * Used to describe the intended usage for the data: `STATIC_DRAW`, `STREAM_DRAW`\n * or `DYNAMIC_DRAW`.\n * @enum {number}\n */\n\nexport var BufferUsage = {\n  STATIC_DRAW: STATIC_DRAW,\n  STREAM_DRAW: STREAM_DRAW,\n  DYNAMIC_DRAW: DYNAMIC_DRAW\n};\n/**\n * @classdesc\n * Object used to store an array of data as well as usage information for that data.\n * Stores typed arrays internally, either Float32Array or Uint16/32Array depending on\n * the buffer type (ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER) and available extensions.\n *\n * To populate the array, you can either use:\n * * A size using `#ofSize(buffer)`\n * * An `ArrayBuffer` object using `#fromArrayBuffer(buffer)`\n * * A plain array using `#fromArray(array)`\n *\n * Note:\n * See the documentation of [WebGLRenderingContext.bufferData](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData)\n * for more info on buffer usage.\n * @api\n */\n\nvar WebGLArrayBuffer =\n/** @class */\nfunction () {\n  /**\n   * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n   * @param {number} [opt_usage] Intended usage, either `STATIC_DRAW`, `STREAM_DRAW` or `DYNAMIC_DRAW`.\n   * Default is `DYNAMIC_DRAW`.\n   */\n  function WebGLArrayBuffer(type, opt_usage) {\n    /**\n     * @private\n     * @type {Float32Array|Uint32Array}\n     */\n    this.array = null;\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.type = type;\n    assert(type === ARRAY_BUFFER || type === ELEMENT_ARRAY_BUFFER, 62);\n    /**\n     * @private\n     * @type {number}\n     */\n\n    this.usage = opt_usage !== undefined ? opt_usage : BufferUsage.STATIC_DRAW;\n  }\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {number} size Array size\n   */\n\n\n  WebGLArrayBuffer.prototype.ofSize = function (size) {\n    this.array = new (getArrayClassForType(this.type))(size);\n  };\n  /**\n   * Populates the buffer with an array of the given size (all values will be zeroes).\n   * @param {Array<number>} array Numerical array\n   */\n\n\n  WebGLArrayBuffer.prototype.fromArray = function (array) {\n    var arrayClass = getArrayClassForType(this.type);\n    this.array = arrayClass.from ? arrayClass.from(array) : new arrayClass(array);\n  };\n  /**\n   * Populates the buffer with a raw binary array buffer.\n   * @param {ArrayBuffer} buffer Raw binary buffer to populate the array with. Note that this buffer must have been\n   * initialized for the same typed array class.\n   */\n\n\n  WebGLArrayBuffer.prototype.fromArrayBuffer = function (buffer) {\n    this.array = new (getArrayClassForType(this.type))(buffer);\n  };\n  /**\n   * @return {number} Buffer type.\n   */\n\n\n  WebGLArrayBuffer.prototype.getType = function () {\n    return this.type;\n  };\n  /**\n   * Will return null if the buffer was not initialized\n   * @return {Float32Array|Uint32Array} Array.\n   */\n\n\n  WebGLArrayBuffer.prototype.getArray = function () {\n    return this.array;\n  };\n  /**\n   * @return {number} Usage.\n   */\n\n\n  WebGLArrayBuffer.prototype.getUsage = function () {\n    return this.usage;\n  };\n  /**\n   * Will return 0 if the buffer is not initialized\n   * @return {number} Array size\n   */\n\n\n  WebGLArrayBuffer.prototype.getSize = function () {\n    return this.array ? this.array.length : 0;\n  };\n\n  return WebGLArrayBuffer;\n}();\n/**\n * Returns a typed array constructor based on the given buffer type\n * @param {number} type Buffer type, either ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER.\n * @return {Float32ArrayConstructor|Uint32ArrayConstructor} The typed array class to use for this buffer.\n */\n\n\nexport function getArrayClassForType(type) {\n  switch (type) {\n    case ARRAY_BUFFER:\n      return Float32Array;\n\n    case ELEMENT_ARRAY_BUFFER:\n      return Uint32Array;\n\n    default:\n      return Float32Array;\n  }\n}\nexport default WebGLArrayBuffer;","/**\n * @module ol/webgl/TileTexture\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileState from '../TileState.js';\nimport WebGLArrayBuffer from './Buffer.js';\nimport { ARRAY_BUFFER, STATIC_DRAW } from '../webgl.js';\nimport { toSize } from '../size.js';\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {boolean} interpolate Interpolate when resampling.\n */\n\nfunction bindAndConfigure(gl, texture, interpolate) {\n  var resampleFilter = interpolate ? gl.LINEAR : gl.NEAREST;\n  gl.bindTexture(gl.TEXTURE_2D, texture);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, resampleFilter);\n  gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, resampleFilter);\n}\n/**\n * @param {WebGLRenderingContext} gl The WebGL context.\n * @param {WebGLTexture} texture The texture.\n * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} image The image.\n * @param {boolean} interpolate Interpolate when resampling.\n */\n\n\nfunction uploadImageTexture(gl, texture, image, interpolate) {\n  bindAndConfigure(gl, texture, interpolate);\n  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n/**\n * @param {import(\"./Helper.js\").default} helper The WebGL helper.\n * @param {WebGLTexture} texture The texture.\n * @param {import(\"../DataTile.js\").Data} data The pixel data.\n * @param {import(\"../size.js\").Size} size The pixel size.\n * @param {number} bandCount The band count.\n * @param {boolean} interpolate Interpolate when resampling.\n */\n\n\nfunction uploadDataTexture(helper, texture, data, size, bandCount, interpolate) {\n  var gl = helper.getGL();\n  bindAndConfigure(gl, texture, interpolate);\n  var bytesPerRow = data.byteLength / size[1];\n  var unpackAlignment = 1;\n\n  if (bytesPerRow % 8 === 0) {\n    unpackAlignment = 8;\n  } else if (bytesPerRow % 4 === 0) {\n    unpackAlignment = 4;\n  } else if (bytesPerRow % 2 === 0) {\n    unpackAlignment = 2;\n  }\n\n  var format;\n\n  switch (bandCount) {\n    case 1:\n      {\n        format = gl.LUMINANCE;\n        break;\n      }\n\n    case 2:\n      {\n        format = gl.LUMINANCE_ALPHA;\n        break;\n      }\n\n    case 3:\n      {\n        format = gl.RGB;\n        break;\n      }\n\n    case 4:\n      {\n        format = gl.RGBA;\n        break;\n      }\n\n    default:\n      {\n        throw new Error(\"Unsupported number of bands: \" + bandCount);\n      }\n  }\n\n  var textureType;\n\n  if (data instanceof Float32Array) {\n    textureType = gl.FLOAT;\n    helper.getExtension('OES_texture_float');\n    helper.getExtension('OES_texture_float_linear');\n  } else {\n    textureType = gl.UNSIGNED_BYTE;\n  }\n\n  var oldUnpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, unpackAlignment);\n  gl.texImage2D(gl.TEXTURE_2D, 0, format, size[0], size[1], 0, format, textureType, data);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, oldUnpackAlignment);\n}\n/**\n * @typedef {import(\"../DataTile.js\").default|ImageTile|ReprojTile} TileType\n */\n\n\nvar TileTexture =\n/** @class */\nfunction (_super) {\n  __extends(TileTexture, _super);\n  /**\n   * @param {TileType} tile The tile.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} grid Tile grid.\n   * @param {import(\"../webgl/Helper.js\").default} helper WebGL helper.\n   */\n\n\n  function TileTexture(tile, grid, helper) {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {TileType}\n     */\n\n\n    _this.tile;\n    /**\n     * @type {Array<WebGLTexture>}\n     */\n\n    _this.textures = [];\n    _this.handleTileChange_ = _this.handleTileChange_.bind(_this);\n    _this.size = toSize(grid.getTileSize(tile.tileCoord[0]));\n    _this.bandCount = NaN;\n    _this.helper_ = helper;\n    var coords = new WebGLArrayBuffer(ARRAY_BUFFER, STATIC_DRAW);\n    coords.fromArray([0, 1, 1, 1, 1, 0, 0, 0]);\n    helper.flushBufferData(coords);\n    _this.coords = coords;\n\n    _this.setTile(tile);\n\n    return _this;\n  }\n  /**\n   * @param {TileType} tile Tile.\n   */\n\n\n  TileTexture.prototype.setTile = function (tile) {\n    if (tile !== this.tile) {\n      if (this.tile) {\n        this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n\n      this.tile = tile;\n      this.textures.length = 0;\n      this.loaded = tile.getState() === TileState.LOADED;\n\n      if (this.loaded) {\n        this.uploadTile_();\n      } else {\n        tile.addEventListener(EventType.CHANGE, this.handleTileChange_);\n      }\n    }\n  };\n\n  TileTexture.prototype.uploadTile_ = function () {\n    var helper = this.helper_;\n    var gl = helper.getGL();\n    var tile = this.tile;\n\n    if (tile instanceof ImageTile || tile instanceof ReprojTile) {\n      var texture = gl.createTexture();\n      this.textures.push(texture);\n      this.bandCount = 4;\n      uploadImageTexture(gl, texture, tile.getImage(), tile.interpolate);\n      return;\n    }\n\n    var data = tile.getData();\n    var isFloat = data instanceof Float32Array;\n    var pixelCount = this.size[0] * this.size[1];\n    var DataType = isFloat ? Float32Array : Uint8Array;\n    var bytesPerElement = DataType.BYTES_PER_ELEMENT;\n    var bytesPerRow = data.byteLength / this.size[1];\n    this.bandCount = Math.floor(bytesPerRow / bytesPerElement / this.size[0]);\n    var textureCount = Math.ceil(this.bandCount / 4);\n\n    if (textureCount === 1) {\n      var texture = gl.createTexture();\n      this.textures.push(texture);\n      uploadDataTexture(helper, texture, data, this.size, this.bandCount, tile.interpolate);\n      return;\n    }\n\n    var textureDataArrays = new Array(textureCount);\n\n    for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      var texture = gl.createTexture();\n      this.textures.push(texture);\n      var bandCount = textureIndex < textureCount - 1 ? 4 : this.bandCount % 4;\n      textureDataArrays[textureIndex] = new DataType(pixelCount * bandCount);\n    }\n\n    var dataIndex = 0;\n    var rowOffset = 0;\n    var colCount = this.size[0] * this.bandCount;\n\n    for (var rowIndex = 0; rowIndex < this.size[1]; ++rowIndex) {\n      for (var colIndex = 0; colIndex < colCount; ++colIndex) {\n        var dataValue = data[rowOffset + colIndex];\n        var pixelIndex = Math.floor(dataIndex / this.bandCount);\n        var bandIndex = colIndex % this.bandCount;\n        var textureIndex = Math.floor(bandIndex / 4);\n        var textureData = textureDataArrays[textureIndex];\n        var bandCount = textureData.length / pixelCount;\n        var textureBandIndex = bandIndex % 4;\n        textureData[pixelIndex * bandCount + textureBandIndex] = dataValue;\n        ++dataIndex;\n      }\n\n      rowOffset += bytesPerRow / bytesPerElement;\n    }\n\n    for (var textureIndex = 0; textureIndex < textureCount; ++textureIndex) {\n      var texture = this.textures[textureIndex];\n      var textureData = textureDataArrays[textureIndex];\n      var bandCount = textureData.length / pixelCount;\n      uploadDataTexture(helper, texture, textureData, this.size, bandCount, tile.interpolate);\n    }\n  };\n\n  TileTexture.prototype.handleTileChange_ = function () {\n    if (this.tile.getState() === TileState.LOADED) {\n      this.loaded = true;\n      this.uploadTile_();\n      this.dispatchEvent(EventType.CHANGE);\n    }\n  };\n\n  TileTexture.prototype.disposeInternal = function () {\n    var gl = this.helper_.getGL();\n    this.helper_.deleteBuffer(this.coords);\n\n    for (var i = 0; i < this.textures.length; ++i) {\n      gl.deleteTexture(this.textures[i]);\n    }\n\n    this.tile.removeEventListener(EventType.CHANGE, this.handleTileChange_);\n  };\n\n  return TileTexture;\n}(EventTarget);\n\nexport default TileTexture;","/**\n * @module ol/webgl/ContextEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  LOST: 'webglcontextlost',\n  RESTORED: 'webglcontextrestored'\n};","/**\n * @module ol/webgl/PostProcessingPass\n */\nimport { getUid } from '../util.js';\nvar DEFAULT_VERTEX_SHADER = \"\\n  precision mediump float;\\n  \\n  attribute vec2 a_position;\\n  varying vec2 v_texCoord;\\n  varying vec2 v_screenCoord;\\n  \\n  uniform vec2 u_screenSize;\\n   \\n  void main() {\\n    v_texCoord = a_position * 0.5 + 0.5;\\n    v_screenCoord = v_texCoord * u_screenSize;\\n    gl_Position = vec4(a_position, 0.0, 1.0);\\n  }\\n\";\nvar DEFAULT_FRAGMENT_SHADER = \"\\n  precision mediump float;\\n   \\n  uniform sampler2D u_image;\\n  uniform float u_opacity;\\n   \\n  varying vec2 v_texCoord;\\n   \\n  void main() {\\n    gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\\n  }\\n\";\n/**\n * @typedef {Object} Options\n * @property {WebGLRenderingContext} webGlContext WebGL context; mandatory.\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"./Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {import(\"./Helper\").UniformValue} value Value\n * @property {number} location Location\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @classdesc\n * This class is used to define Post Processing passes with custom shaders and uniforms.\n * This is used internally by {@link module:ol/webgl/Helper~WebGLHelper}.\n *\n * Please note that the final output on the DOM canvas is expected to have premultiplied alpha, which means that\n * a pixel which is 100% red with an opacity of 50% must have a color of (r=0.5, g=0, b=0, a=0.5).\n * Failing to provide pixel colors with premultiplied alpha will result in render anomalies.\n *\n * The default post-processing pass does *not* multiply color values with alpha value, it expects color values to be\n * premultiplied.\n *\n * Default shaders are shown hereafter:\n *\n * * Vertex shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   attribute vec2 a_position;\n *   varying vec2 v_texCoord;\n *   varying vec2 v_screenCoord;\n *\n *   uniform vec2 u_screenSize;\n *\n *   void main() {\n *     v_texCoord = a_position * 0.5 + 0.5;\n *     v_screenCoord = v_texCoord * u_screenSize;\n *     gl_Position = vec4(a_position, 0.0, 1.0);\n *   }\n *   ```\n *\n * * Fragment shader:\n *\n *   ```\n *   precision mediump float;\n *\n *   uniform sampler2D u_image;\n *   uniform float u_opacity;\n *\n *   varying vec2 v_texCoord;\n *\n *   void main() {\n *     gl_FragColor = texture2D(u_image, v_texCoord) * u_opacity;\n *   }\n *   ```\n *\n * @api\n */\n\nvar WebGLPostProcessingPass =\n/** @class */\nfunction () {\n  /**\n   * @param {Options} options Options.\n   */\n  function WebGLPostProcessingPass(options) {\n    this.gl_ = options.webGlContext;\n    var gl = this.gl_;\n    this.scaleRatio_ = options.scaleRatio || 1;\n    this.renderTargetTexture_ = gl.createTexture();\n    this.renderTargetTextureSize_ = null;\n    this.frameBuffer_ = gl.createFramebuffer(); // compile the program for the frame buffer\n    // TODO: make compilation errors show up\n\n    var vertexShader = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vertexShader, options.vertexShader || DEFAULT_VERTEX_SHADER);\n    gl.compileShader(vertexShader);\n    var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fragmentShader, options.fragmentShader || DEFAULT_FRAGMENT_SHADER);\n    gl.compileShader(fragmentShader);\n    this.renderTargetProgram_ = gl.createProgram();\n    gl.attachShader(this.renderTargetProgram_, vertexShader);\n    gl.attachShader(this.renderTargetProgram_, fragmentShader);\n    gl.linkProgram(this.renderTargetProgram_); // bind the vertices buffer for the frame buffer\n\n    this.renderTargetVerticesBuffer_ = gl.createBuffer();\n    var verticesArray = [-1, -1, 1, -1, -1, 1, 1, -1, 1, 1, -1, 1];\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(verticesArray), gl.STATIC_DRAW);\n    this.renderTargetAttribLocation_ = gl.getAttribLocation(this.renderTargetProgram_, 'a_position');\n    this.renderTargetUniformLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_screenSize');\n    this.renderTargetOpacityLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_opacity');\n    this.renderTargetTextureLocation_ = gl.getUniformLocation(this.renderTargetProgram_, 'u_image');\n    /**\n     * Holds info about custom uniforms used in the post processing pass\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n\n    this.uniforms_ = [];\n    options.uniforms && Object.keys(options.uniforms).forEach(function (name) {\n      this.uniforms_.push({\n        value: options.uniforms[name],\n        location: gl.getUniformLocation(this.renderTargetProgram_, name)\n      });\n    }.bind(this));\n  }\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   * @api\n   */\n\n\n  WebGLPostProcessingPass.prototype.getGL = function () {\n    return this.gl_;\n  };\n  /**\n   * Initialize the render target texture of the post process, make sure it is at the\n   * right size and bind it as a render target for the next draw calls.\n   * The last step to be initialized will be the one where the primitives are rendered.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n   * @api\n   */\n\n\n  WebGLPostProcessingPass.prototype.init = function (frameState) {\n    var gl = this.getGL();\n    var textureSize = [gl.drawingBufferWidth * this.scaleRatio_, gl.drawingBufferHeight * this.scaleRatio_]; // rendering goes to my buffer\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.getFrameBuffer());\n    gl.viewport(0, 0, textureSize[0], textureSize[1]); // if size has changed: adjust canvas & render target texture\n\n    if (!this.renderTargetTextureSize_ || this.renderTargetTextureSize_[0] !== textureSize[0] || this.renderTargetTextureSize_[1] !== textureSize[1]) {\n      this.renderTargetTextureSize_ = textureSize; // create a new texture\n\n      var level = 0;\n      var internalFormat = gl.RGBA;\n      var border = 0;\n      var format = gl.RGBA;\n      var type = gl.UNSIGNED_BYTE;\n      var data = null;\n      gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, textureSize[0], textureSize[1], border, format, type, data);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE); // bind the texture to the framebuffer\n\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.renderTargetTexture_, 0);\n    }\n  };\n  /**\n   * Render to the next postprocessing pass (or to the canvas if final pass).\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n   * @param {WebGLPostProcessingPass} [nextPass] Next pass, optional\n   * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [postCompose] Called before composing.\n   * @api\n   */\n\n\n  WebGLPostProcessingPass.prototype.apply = function (frameState, nextPass, preCompose, postCompose) {\n    var gl = this.getGL();\n    var size = frameState.size;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, nextPass ? nextPass.getFrameBuffer() : null);\n    gl.activeTexture(gl.TEXTURE0);\n    gl.bindTexture(gl.TEXTURE_2D, this.renderTargetTexture_);\n\n    if (!nextPass) {\n      // clear the canvas if we are the first to render to it\n      // and preserveDrawingBuffer is true\n      var canvasId = getUid(gl.canvas);\n\n      if (!frameState.renderTargets[canvasId]) {\n        var attributes = gl.getContextAttributes();\n\n        if (attributes && attributes.preserveDrawingBuffer) {\n          gl.clearColor(0.0, 0.0, 0.0, 0.0);\n          gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n\n        frameState.renderTargets[canvasId] = true;\n      }\n    }\n\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.renderTargetVerticesBuffer_);\n    gl.useProgram(this.renderTargetProgram_);\n    gl.enableVertexAttribArray(this.renderTargetAttribLocation_);\n    gl.vertexAttribPointer(this.renderTargetAttribLocation_, 2, gl.FLOAT, false, 0, 0);\n    gl.uniform2f(this.renderTargetUniformLocation_, size[0], size[1]);\n    gl.uniform1i(this.renderTargetTextureLocation_, 0);\n    var opacity = frameState.layerStatesArray[frameState.layerIndex].opacity;\n    gl.uniform1f(this.renderTargetOpacityLocation_, opacity);\n    this.applyUniforms(frameState);\n\n    if (preCompose) {\n      preCompose(gl, frameState);\n    }\n\n    gl.drawArrays(gl.TRIANGLES, 0, 6);\n\n    if (postCompose) {\n      postCompose(gl, frameState);\n    }\n  };\n  /**\n   * @return {WebGLFramebuffer} Frame buffer\n   * @api\n   */\n\n\n  WebGLPostProcessingPass.prototype.getFrameBuffer = function () {\n    return this.frameBuffer_;\n  };\n  /**\n   * Sets the custom uniforms based on what was given in the constructor.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  WebGLPostProcessingPass.prototype.applyUniforms = function (frameState) {\n    var gl = this.getGL();\n    var value;\n    var textureSlot = 1;\n    this.uniforms_.forEach(function (uniform) {\n      value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value; // apply value based on type\n\n      if (value instanceof HTMLCanvasElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.texture = gl.createTexture();\n        }\n\n        gl.activeTexture(gl[\"TEXTURE\" + textureSlot]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        if (value instanceof ImageData) {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, value.width, value.height, 0, gl.UNSIGNED_BYTE, new Uint8Array(value.data));\n        } else {\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n        } // fill texture slots\n\n\n        gl.uniform1i(uniform.location, textureSlot++);\n      } else if (Array.isArray(value)) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(uniform.location, value[0], value[1]);\n            return;\n\n          case 3:\n            gl.uniform3f(uniform.location, value[0], value[1], value[2]);\n            return;\n\n          case 4:\n            gl.uniform4f(uniform.location, value[0], value[1], value[2], value[3]);\n            return;\n\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(uniform.location, value);\n      }\n    });\n  };\n\n  return WebGLPostProcessingPass;\n}();\n\nexport default WebGLPostProcessingPass;","/**\n * @module ol/vec/mat4\n */\n\n/**\n * @return {Array<number>} \"4x4 matrix representing a 3D identity transform.\"\n */\nexport function create() {\n  return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n}\n/**\n * @param {Array<number>} mat4 Flattened 4x4 matrix receiving the result.\n * @param {import(\"../transform.js\").Transform} transform Transformation matrix.\n * @return {Array<number>} \"2D transformation matrix as flattened 4x4 matrix.\"\n */\n\nexport function fromTransform(mat4, transform) {\n  mat4[0] = transform[0];\n  mat4[1] = transform[1];\n  mat4[4] = transform[2];\n  mat4[5] = transform[3];\n  mat4[12] = transform[4];\n  mat4[13] = transform[5];\n  return mat4;\n}","var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/webgl/Helper\n */\n\n\nimport ContextEventType from '../webgl/ContextEventType.js';\nimport Disposable from '../Disposable.js';\nimport WebGLPostProcessingPass from './PostProcessingPass.js';\nimport { FLOAT, UNSIGNED_BYTE, UNSIGNED_INT, UNSIGNED_SHORT, getContext } from '../webgl.js';\nimport { clear } from '../obj.js';\nimport { compose as composeTransform, create as createTransform, reset as resetTransform, rotate as rotateTransform, scale as scaleTransform } from '../transform.js';\nimport { create, fromTransform } from '../vec/mat4.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} BufferCacheEntry\n * @property {import(\"./Buffer.js\").default} buffer Buffer.\n * @property {WebGLBuffer} webGlBuffer WebGlBuffer.\n */\n\n/**\n * Shader types, either `FRAGMENT_SHADER` or `VERTEX_SHADER`.\n * @enum {number}\n */\n\nexport var ShaderType = {\n  FRAGMENT_SHADER: 0x8b30,\n  VERTEX_SHADER: 0x8b31\n};\n/**\n * Uniform names used in the default shaders: `PROJECTION_MATRIX`, `OFFSET_SCALE_MATRIX`.\n * and `OFFSET_ROTATION_MATRIX`.\n * @enum {string}\n */\n\nexport var DefaultUniform = {\n  PROJECTION_MATRIX: 'u_projectionMatrix',\n  OFFSET_SCALE_MATRIX: 'u_offsetScaleMatrix',\n  OFFSET_ROTATION_MATRIX: 'u_offsetRotateMatrix',\n  TIME: 'u_time',\n  ZOOM: 'u_zoom',\n  RESOLUTION: 'u_resolution'\n};\n/**\n * Attribute types, either `UNSIGNED_BYTE`, `UNSIGNED_SHORT`, `UNSIGNED_INT` or `FLOAT`\n * Note: an attribute stored in a `Float32Array` should be of type `FLOAT`.\n * @enum {number}\n */\n\nexport var AttributeType = {\n  UNSIGNED_BYTE: UNSIGNED_BYTE,\n  UNSIGNED_SHORT: UNSIGNED_SHORT,\n  UNSIGNED_INT: UNSIGNED_INT,\n  FLOAT: FLOAT\n};\n/**\n * Description of an attribute in a buffer\n * @typedef {Object} AttributeDescription\n * @property {string} name Attribute name to use in shaders\n * @property {number} size Number of components per attributes\n * @property {AttributeType} [type] Attribute type, i.e. number of bytes used to store the value. This is\n * determined by the class of typed array which the buffer uses (eg. `Float32Array` for a `FLOAT` attribute).\n * Default is `FLOAT`.\n */\n\n/**\n * @typedef {number|Array<number>|HTMLCanvasElement|HTMLImageElement|ImageData|import(\"../transform\").Transform} UniformLiteralValue\n */\n\n/**\n * Uniform value can be a number, array of numbers (2 to 4), canvas element or a callback returning\n * one of the previous types.\n * @typedef {UniformLiteralValue|function(import(\"../PluggableMap.js\").FrameState):UniformLiteralValue} UniformValue\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas which will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,UniformValue>} [uniforms] Uniform definitions; property names must match the uniform\n * names in the provided or default shaders.\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n * @property {string} [canvasCacheKey] The cache key for the canvas.\n */\n\n/**\n * @typedef {Object} UniformInternalDescription\n * @property {string} name Name\n * @property {UniformValue} [value] Value\n * @property {WebGLTexture} [texture] Texture\n * @private\n */\n\n/**\n * @typedef {Object} CanvasCacheItem\n * @property {HTMLCanvasElement} canvas Canvas element.\n * @property {number} users The count of users of this canvas.\n */\n\n/**\n * @type {Object<string,CanvasCacheItem>}\n */\n\nvar canvasCache = {};\n/**\n * @param {string} key The cache key for the canvas.\n * @return {string} The shared cache key.\n */\n\nfunction getSharedCanvasCacheKey(key) {\n  return 'shared/' + key;\n}\n\nvar uniqueCanvasCacheKeyCount = 0;\n/**\n * @return {string} The unique cache key.\n */\n\nfunction getUniqueCanvasCacheKey() {\n  var key = 'unique/' + uniqueCanvasCacheKeyCount;\n  uniqueCanvasCacheKeyCount += 1;\n  return key;\n}\n/**\n * @param {string} key The cache key for the canvas.\n * @return {HTMLCanvasElement} The canvas.\n */\n\n\nfunction getCanvas(key) {\n  var cacheItem = canvasCache[key];\n\n  if (!cacheItem) {\n    var canvas = document.createElement('canvas');\n    canvas.style.position = 'absolute';\n    canvas.style.left = '0';\n    cacheItem = {\n      users: 0,\n      canvas: canvas\n    };\n    canvasCache[key] = cacheItem;\n  }\n\n  cacheItem.users += 1;\n  return cacheItem.canvas;\n}\n/**\n * @param {string} key The cache key for the canvas.\n */\n\n\nfunction releaseCanvas(key) {\n  var cacheItem = canvasCache[key];\n\n  if (!cacheItem) {\n    return;\n  }\n\n  cacheItem.users -= 1;\n\n  if (cacheItem.users > 0) {\n    return;\n  }\n\n  var canvas = cacheItem.canvas;\n  var gl = getContext(canvas);\n  var extension = gl.getExtension('WEBGL_lose_context');\n\n  if (extension) {\n    extension.loseContext();\n  }\n\n  delete canvasCache[key];\n}\n/**\n * @classdesc\n * This class is intended to provide low-level functions related to WebGL rendering, so that accessing\n * directly the WebGL API should not be required anymore.\n *\n * Several operations are handled by the `WebGLHelper` class:\n *\n * ### Define custom shaders and uniforms\n *\n *   *Shaders* are low-level programs executed on the GPU and written in GLSL. There are two types of shaders:\n *\n *   Vertex shaders are used to manipulate the position and attribute of *vertices* of rendered primitives (ie. corners of a square).\n *   Outputs are:\n *\n *   * `gl_Position`: position of the vertex in screen space\n *\n *   * Varyings usually prefixed with `v_` are passed on to the fragment shader\n *\n *   Fragment shaders are used to control the actual color of the pixels drawn on screen. Their only output is `gl_FragColor`.\n *\n *   Both shaders can take *uniforms* or *attributes* as input. Attributes are explained later. Uniforms are common, read-only values that\n *   can be changed at every frame and can be of type float, arrays of float or images.\n *\n *   Shaders must be compiled and assembled into a program like so:\n *   ```js\n *   // here we simply create two shaders and assemble them in a program which is then used\n *   // for subsequent rendering calls\n *   const vertexShader = new WebGLVertex(VERTEX_SHADER);\n *   const fragmentShader = new WebGLFragment(FRAGMENT_SHADER);\n *   const program = this.context.getProgram(fragmentShader, vertexShader);\n *   helper.useProgram(this.program);\n *   ```\n *\n *   Uniforms are defined using the `uniforms` option and can either be explicit values or callbacks taking the frame state as argument.\n *   You can also change their value along the way like so:\n *   ```js\n *   helper.setUniformFloatValue('u_value', valueAsNumber);\n *   ```\n *\n * ### Defining post processing passes\n *\n *   *Post processing* describes the act of rendering primitives to a texture, and then rendering this texture to the final canvas\n *   while applying special effects in screen space.\n *   Typical uses are: blurring, color manipulation, depth of field, filtering...\n *\n *   The `WebGLHelper` class offers the possibility to define post processes at creation time using the `postProcesses` option.\n *   A post process step accepts the following options:\n *\n *   * `fragmentShader` and `vertexShader`: text literals in GLSL language that will be compiled and used in the post processing step.\n *   * `uniforms`: uniforms can be defined for the post processing steps just like for the main render.\n *   * `scaleRatio`: allows using an intermediate texture smaller or higher than the final canvas in the post processing step.\n *     This is typically used in blur steps to reduce the performance overhead by using an already downsampled texture as input.\n *\n *   The {@link module:ol/webgl/PostProcessingPass~WebGLPostProcessingPass} class is used internally, refer to its documentation for more info.\n *\n * ### Binding WebGL buffers and flushing data into them\n *\n *   Data that must be passed to the GPU has to be transferred using {@link module:ol/webgl/Buffer~WebGLArrayBuffer} objects.\n *   A buffer has to be created only once, but must be bound every time the buffer content will be used for rendering.\n *   This is done using {@link bindBuffer}.\n *   When the buffer's array content has changed, the new data has to be flushed to the GPU memory; this is done using\n *   {@link flushBufferData}. Note: this operation is expensive and should be done as infrequently as possible.\n *\n *   When binding an array buffer, a `target` parameter must be given: it should be either {@link module:ol/webgl.ARRAY_BUFFER}\n *   (if the buffer contains vertices data) or {@link module:ol/webgl.ELEMENT_ARRAY_BUFFER} (if the buffer contains indices data).\n *\n *   Examples below:\n *   ```js\n *   // at initialization phase\n *   const verticesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *   const indicesBuffer = new WebGLArrayBuffer([], DYNAMIC_DRAW);\n *\n *   // when array values have changed\n *   helper.flushBufferData(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.flushBufferData(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *\n *   // at rendering phase\n *   helper.bindBuffer(ARRAY_BUFFER, this.verticesBuffer);\n *   helper.bindBuffer(ELEMENT_ARRAY_BUFFER, this.indicesBuffer);\n *   ```\n *\n * ### Specifying attributes\n *\n *   The GPU only receives the data as arrays of numbers. These numbers must be handled differently depending on what it describes (position, texture coordinate...).\n *   Attributes are used to specify these uses. Use {@link enableAttributeArray_} and either\n *   the default attribute names in {@link module:ol/webgl/Helper.DefaultAttrib} or custom ones.\n *\n *   Please note that you will have to specify the type and offset of the attributes in the data array. You can refer to the documentation of [WebGLRenderingContext.vertexAttribPointer](https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer) for more explanation.\n *   ```js\n *   // here we indicate that the data array has the following structure:\n *   // [posX, posY, offsetX, offsetY, texCoordU, texCoordV, posX, posY, ...]\n *   helper.enableAttributes([\n *     {\n *        name: 'a_position',\n *        size: 2\n *     },\n *     {\n *       name: 'a_offset',\n *       size: 2\n *     },\n *     {\n *       name: 'a_texCoord',\n *       size: 2\n *     }\n *   ])\n *   ```\n *\n * ### Rendering primitives\n *\n *   Once all the steps above have been achieved, rendering primitives to the screen is done using {@link prepareDraw}, {@link drawElements} and {@link finalizeDraw}.\n *   ```js\n *   // frame preparation step\n *   helper.prepareDraw(frameState);\n *\n *   // call this for every data array that has to be rendered on screen\n *   helper.drawElements(0, this.indicesBuffer.getArray().length);\n *\n *   // finalize the rendering by applying post processes\n *   helper.finalizeDraw(frameState);\n *   ```\n *\n * For an example usage of this class, refer to {@link module:ol/renderer/webgl/PointsLayer~WebGLPointsLayerRenderer}.\n *\n *\n * @api\n */\n\n\nvar WebGLHelper =\n/** @class */\nfunction (_super) {\n  __extends(WebGLHelper, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function WebGLHelper(opt_options) {\n    var _this = _super.call(this) || this;\n\n    var options = opt_options || {};\n    /** @private */\n\n    _this.boundHandleWebGLContextLost_ = _this.handleWebGLContextLost.bind(_this);\n    /** @private */\n\n    _this.boundHandleWebGLContextRestored_ = _this.handleWebGLContextRestored.bind(_this);\n    /**\n     * @private\n     * @type {string}\n     */\n\n    _this.canvasCacheKey_ = options.canvasCacheKey ? getSharedCanvasCacheKey(options.canvasCacheKey) : getUniqueCanvasCacheKey();\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n\n    _this.canvas_ = getCanvas(_this.canvasCacheKey_);\n    /**\n     * @private\n     * @type {WebGLRenderingContext}\n     */\n\n    _this.gl_ = getContext(_this.canvas_);\n    /**\n     * @private\n     * @type {!Object<string, BufferCacheEntry>}\n     */\n\n    _this.bufferCache_ = {};\n    /**\n     * @private\n     * @type {Object<string, Object>}\n     */\n\n    _this.extensionCache_ = {};\n    /**\n     * @private\n     * @type {WebGLProgram}\n     */\n\n    _this.currentProgram_ = null;\n\n    _this.canvas_.addEventListener(ContextEventType.LOST, _this.boundHandleWebGLContextLost_);\n\n    _this.canvas_.addEventListener(ContextEventType.RESTORED, _this.boundHandleWebGLContextRestored_);\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n\n\n    _this.offsetRotateMatrix_ = createTransform();\n    /**\n     * @private\n     * @type {import(\"../transform.js\").Transform}\n     */\n\n    _this.offsetScaleMatrix_ = createTransform();\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n\n    _this.tmpMat4_ = create();\n    /**\n     * @private\n     * @type {Object<string, WebGLUniformLocation>}\n     */\n\n    _this.uniformLocations_ = {};\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n\n    _this.attribLocations_ = {};\n    /**\n     * Holds info about custom uniforms used in the post processing pass.\n     * If the uniform is a texture, the WebGL Texture object will be stored here.\n     * @type {Array<UniformInternalDescription>}\n     * @private\n     */\n\n    _this.uniforms_ = [];\n\n    if (options.uniforms) {\n      _this.setUniforms(options.uniforms);\n    }\n\n    var gl = _this.getGL();\n    /**\n     * An array of PostProcessingPass objects is kept in this variable, built from the steps provided in the\n     * options. If no post process was given, a default one is used (so as not to have to make an exception to\n     * the frame buffer logic).\n     * @type {Array<WebGLPostProcessingPass>}\n     * @private\n     */\n\n\n    _this.postProcessPasses_ = options.postProcesses ? options.postProcesses.map(function (options) {\n      return new WebGLPostProcessingPass({\n        webGlContext: gl,\n        scaleRatio: options.scaleRatio,\n        vertexShader: options.vertexShader,\n        fragmentShader: options.fragmentShader,\n        uniforms: options.uniforms\n      });\n    }) : [new WebGLPostProcessingPass({\n      webGlContext: gl\n    })];\n    /**\n     * @type {string|null}\n     * @private\n     */\n\n    _this.shaderCompileErrors_ = null;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.startTime_ = Date.now();\n    return _this;\n  }\n  /**\n   * @param {Object<string, UniformValue>} uniforms Uniform definitions.\n   */\n\n\n  WebGLHelper.prototype.setUniforms = function (uniforms) {\n    this.uniforms_ = [];\n\n    for (var name_1 in uniforms) {\n      this.uniforms_.push({\n        name: name_1,\n        value: uniforms[name_1]\n      });\n    }\n\n    this.uniformLocations_ = {};\n  };\n  /**\n   * @param {string} canvasCacheKey The canvas cache key.\n   * @return {boolean} The provided key matches the one this helper was constructed with.\n   */\n\n\n  WebGLHelper.prototype.canvasCacheKeyMatches = function (canvasCacheKey) {\n    return this.canvasCacheKey_ === getSharedCanvasCacheKey(canvasCacheKey);\n  };\n  /**\n   * Get a WebGL extension.  If the extension is not supported, null is returned.\n   * Extensions are cached after they are enabled for the first time.\n   * @param {string} name The extension name.\n   * @return {Object} The extension or null if not supported.\n   */\n\n\n  WebGLHelper.prototype.getExtension = function (name) {\n    if (name in this.extensionCache_) {\n      return this.extensionCache_[name];\n    }\n\n    var extension = this.gl_.getExtension(name);\n    this.extensionCache_[name] = extension;\n    return extension;\n  };\n  /**\n   * Just bind the buffer if it's in the cache. Otherwise create\n   * the WebGL buffer, bind it, populate it, and add an entry to\n   * the cache.\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.bindBuffer = function (buffer) {\n    var gl = this.getGL();\n    var bufferKey = getUid(buffer);\n    var bufferCache = this.bufferCache_[bufferKey];\n\n    if (!bufferCache) {\n      var webGlBuffer = gl.createBuffer();\n      bufferCache = {\n        buffer: buffer,\n        webGlBuffer: webGlBuffer\n      };\n      this.bufferCache_[bufferKey] = bufferCache;\n    }\n\n    gl.bindBuffer(buffer.getType(), bufferCache.webGlBuffer);\n  };\n  /**\n   * Update the data contained in the buffer array; this is required for the\n   * new data to be rendered\n   * @param {import(\"./Buffer\").default} buffer Buffer.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.flushBufferData = function (buffer) {\n    var gl = this.getGL();\n    this.bindBuffer(buffer);\n    gl.bufferData(buffer.getType(), buffer.getArray(), buffer.getUsage());\n  };\n  /**\n   * @param {import(\"./Buffer.js\").default} buf Buffer.\n   */\n\n\n  WebGLHelper.prototype.deleteBuffer = function (buf) {\n    var gl = this.getGL();\n    var bufferKey = getUid(buf);\n    var bufferCacheEntry = this.bufferCache_[bufferKey];\n\n    if (bufferCacheEntry && !gl.isContextLost()) {\n      gl.deleteBuffer(bufferCacheEntry.webGlBuffer);\n    }\n\n    delete this.bufferCache_[bufferKey];\n  };\n  /**\n   * Clean up.\n   */\n\n\n  WebGLHelper.prototype.disposeInternal = function () {\n    this.canvas_.removeEventListener(ContextEventType.LOST, this.boundHandleWebGLContextLost_);\n    this.canvas_.removeEventListener(ContextEventType.RESTORED, this.boundHandleWebGLContextRestored_);\n    releaseCanvas(this.canvasCacheKey_);\n    delete this.gl_;\n    delete this.canvas_;\n  };\n  /**\n   * Clear the buffer & set the viewport to draw.\n   * Post process passes will be initialized here, the first one being bound as a render target for\n   * subsequent draw calls.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n   * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.prepareDraw = function (frameState, opt_disableAlphaBlend) {\n    var gl = this.getGL();\n    var canvas = this.getCanvas();\n    var size = frameState.size;\n    var pixelRatio = frameState.pixelRatio;\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n    gl.useProgram(this.currentProgram_); // loop backwards in post processes list\n\n    for (var i = this.postProcessPasses_.length - 1; i >= 0; i--) {\n      this.postProcessPasses_[i].init(frameState);\n    }\n\n    gl.bindTexture(gl.TEXTURE_2D, null);\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    gl.useProgram(this.currentProgram_);\n    this.applyFrameState(frameState);\n    this.applyUniforms(frameState);\n  };\n  /**\n   * Clear the render target & bind it for future draw operations.\n   * This is similar to `prepareDraw`, only post processes will not be applied.\n   * Note: the whole viewport will be drawn to the render target, regardless of its size.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n   * @param {import(\"./RenderTarget.js\").default} renderTarget Render target to draw to\n   * @param {boolean} [opt_disableAlphaBlend] If true, no alpha blending will happen.\n   */\n\n\n  WebGLHelper.prototype.prepareDrawToRenderTarget = function (frameState, renderTarget, opt_disableAlphaBlend) {\n    var gl = this.getGL();\n    var size = renderTarget.getSize();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, renderTarget.getFramebuffer());\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.bindTexture(gl.TEXTURE_2D, renderTarget.getTexture());\n    gl.clearColor(0.0, 0.0, 0.0, 0.0);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.enable(gl.BLEND);\n    gl.blendFunc(gl.ONE, opt_disableAlphaBlend ? gl.ZERO : gl.ONE_MINUS_SRC_ALPHA);\n    gl.useProgram(this.currentProgram_);\n    this.applyFrameState(frameState);\n    this.applyUniforms(frameState);\n  };\n  /**\n   * Execute a draw call based on the currently bound program, texture, buffers, attributes.\n   * @param {number} start Start index.\n   * @param {number} end End index.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.drawElements = function (start, end) {\n    var gl = this.getGL();\n    this.getExtension('OES_element_index_uint');\n    var elementType = gl.UNSIGNED_INT;\n    var elementSize = 4;\n    var numItems = end - start;\n    var offsetInBytes = start * elementSize;\n    gl.drawElements(gl.TRIANGLES, numItems, elementType, offsetInBytes);\n  };\n  /**\n   * Apply the successive post process passes which will eventually render to the actual canvas.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState current frame state\n   * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [preCompose] Called before composing.\n   * @param {function(WebGLRenderingContext, import(\"../PluggableMap.js\").FrameState):void} [postCompose] Called before composing.\n   */\n\n\n  WebGLHelper.prototype.finalizeDraw = function (frameState, preCompose, postCompose) {\n    // apply post processes using the next one as target\n    for (var i = 0, ii = this.postProcessPasses_.length; i < ii; i++) {\n      if (i === ii - 1) {\n        this.postProcessPasses_[i].apply(frameState, null, preCompose, postCompose);\n      } else {\n        this.postProcessPasses_[i].apply(frameState, this.postProcessPasses_[i + 1]);\n      }\n    }\n  };\n  /**\n   * @return {HTMLCanvasElement} Canvas.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.getCanvas = function () {\n    return this.canvas_;\n  };\n  /**\n   * Get the WebGL rendering context\n   * @return {WebGLRenderingContext} The rendering context.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.getGL = function () {\n    return this.gl_;\n  };\n  /**\n   * Sets the default matrix uniforms for a given frame state. This is called internally in `prepareDraw`.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  WebGLHelper.prototype.applyFrameState = function (frameState) {\n    var size = frameState.size;\n    var rotation = frameState.viewState.rotation;\n    var offsetScaleMatrix = resetTransform(this.offsetScaleMatrix_);\n    scaleTransform(offsetScaleMatrix, 2 / size[0], 2 / size[1]);\n    var offsetRotateMatrix = resetTransform(this.offsetRotateMatrix_);\n\n    if (rotation !== 0) {\n      rotateTransform(offsetRotateMatrix, -rotation);\n    }\n\n    this.setUniformMatrixValue(DefaultUniform.OFFSET_SCALE_MATRIX, fromTransform(this.tmpMat4_, offsetScaleMatrix));\n    this.setUniformMatrixValue(DefaultUniform.OFFSET_ROTATION_MATRIX, fromTransform(this.tmpMat4_, offsetRotateMatrix));\n    this.setUniformFloatValue(DefaultUniform.TIME, (Date.now() - this.startTime_) * 0.001);\n    this.setUniformFloatValue(DefaultUniform.ZOOM, frameState.viewState.zoom);\n    this.setUniformFloatValue(DefaultUniform.RESOLUTION, frameState.viewState.resolution);\n  };\n  /**\n   * Sets the custom uniforms based on what was given in the constructor. This is called internally in `prepareDraw`.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  WebGLHelper.prototype.applyUniforms = function (frameState) {\n    var gl = this.getGL();\n    var value;\n    var textureSlot = 0;\n    this.uniforms_.forEach(function (uniform) {\n      value = typeof uniform.value === 'function' ? uniform.value(frameState) : uniform.value; // apply value based on type\n\n      if (value instanceof HTMLCanvasElement || value instanceof HTMLImageElement || value instanceof ImageData) {\n        // create a texture & put data\n        if (!uniform.texture) {\n          uniform.prevValue = undefined;\n          uniform.texture = gl.createTexture();\n        }\n\n        gl.activeTexture(gl[\"TEXTURE\" + textureSlot]);\n        gl.bindTexture(gl.TEXTURE_2D, uniform.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        var imageReady = !(value instanceof HTMLImageElement) ||\n        /** @type {HTMLImageElement} */\n        value.complete;\n\n        if (imageReady && uniform.prevValue !== value) {\n          uniform.prevValue = value;\n          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, value);\n        } // fill texture slots by increasing index\n\n\n        gl.uniform1i(this.getUniformLocation(uniform.name), textureSlot++);\n      } else if (Array.isArray(value) && value.length === 6) {\n        this.setUniformMatrixValue(uniform.name, fromTransform(this.tmpMat4_, value));\n      } else if (Array.isArray(value) && value.length <= 4) {\n        switch (value.length) {\n          case 2:\n            gl.uniform2f(this.getUniformLocation(uniform.name), value[0], value[1]);\n            return;\n\n          case 3:\n            gl.uniform3f(this.getUniformLocation(uniform.name), value[0], value[1], value[2]);\n            return;\n\n          case 4:\n            gl.uniform4f(this.getUniformLocation(uniform.name), value[0], value[1], value[2], value[3]);\n            return;\n\n          default:\n            return;\n        }\n      } else if (typeof value === 'number') {\n        gl.uniform1f(this.getUniformLocation(uniform.name), value);\n      }\n    }.bind(this));\n  };\n  /**\n   * Use a program.  If the program is already in use, this will return `false`.\n   * @param {WebGLProgram} program Program.\n   * @return {boolean} Changed.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.useProgram = function (program) {\n    if (program == this.currentProgram_) {\n      return false;\n    } else {\n      var gl = this.getGL();\n      gl.useProgram(program);\n      this.currentProgram_ = program;\n      this.uniformLocations_ = {};\n      this.attribLocations_ = {};\n      return true;\n    }\n  };\n  /**\n   * Will attempt to compile a vertex or fragment shader based on source\n   * On error, the shader will be returned but\n   * `gl.getShaderParameter(shader, gl.COMPILE_STATUS)` will return `true`\n   * Use `gl.getShaderInfoLog(shader)` to have details\n   * @param {string} source Shader source\n   * @param {ShaderType} type VERTEX_SHADER or FRAGMENT_SHADER\n   * @return {WebGLShader} Shader object\n   */\n\n\n  WebGLHelper.prototype.compileShader = function (source, type) {\n    var gl = this.getGL();\n    var shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    return shader;\n  };\n  /**\n   * Create a program for a vertex and fragment shader.  Throws if shader compilation fails.\n   * @param {string} fragmentShaderSource Fragment shader source.\n   * @param {string} vertexShaderSource Vertex shader source.\n   * @return {WebGLProgram} Program\n   * @api\n   */\n\n\n  WebGLHelper.prototype.getProgram = function (fragmentShaderSource, vertexShaderSource) {\n    var gl = this.getGL();\n    var fragmentShader = this.compileShader(fragmentShaderSource, gl.FRAGMENT_SHADER);\n    var vertexShader = this.compileShader(vertexShaderSource, gl.VERTEX_SHADER);\n    var program = gl.createProgram();\n    gl.attachShader(program, fragmentShader);\n    gl.attachShader(program, vertexShader);\n    gl.linkProgram(program);\n\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      var message = \"Fragment shader compliation failed: \" + gl.getShaderInfoLog(fragmentShader);\n      throw new Error(message);\n    }\n\n    gl.deleteShader(fragmentShader);\n\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      var message = \"Vertex shader compilation failed: \" + gl.getShaderInfoLog(vertexShader);\n      throw new Error(message);\n    }\n\n    gl.deleteShader(vertexShader);\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      var message = \"GL program linking failed: \" + gl.getShaderInfoLog(vertexShader);\n      throw new Error(message);\n    }\n\n    return program;\n  };\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Uniform name\n   * @return {WebGLUniformLocation} uniformLocation\n   * @api\n   */\n\n\n  WebGLHelper.prototype.getUniformLocation = function (name) {\n    if (this.uniformLocations_[name] === undefined) {\n      this.uniformLocations_[name] = this.getGL().getUniformLocation(this.currentProgram_, name);\n    }\n\n    return this.uniformLocations_[name];\n  };\n  /**\n   * Will get the location from the shader or the cache\n   * @param {string} name Attribute name\n   * @return {number} attribLocation\n   * @api\n   */\n\n\n  WebGLHelper.prototype.getAttributeLocation = function (name) {\n    if (this.attribLocations_[name] === undefined) {\n      this.attribLocations_[name] = this.getGL().getAttribLocation(this.currentProgram_, name);\n    }\n\n    return this.attribLocations_[name];\n  };\n  /**\n   * Modifies the given transform to apply the rotation/translation/scaling of the given frame state.\n   * The resulting transform can be used to convert world space coordinates to view coordinates.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../transform\").Transform} transform Transform to update.\n   * @return {import(\"../transform\").Transform} The updated transform object.\n   * @api\n   */\n\n\n  WebGLHelper.prototype.makeProjectionTransform = function (frameState, transform) {\n    var size = frameState.size;\n    var rotation = frameState.viewState.rotation;\n    var resolution = frameState.viewState.resolution;\n    var center = frameState.viewState.center;\n    resetTransform(transform);\n    composeTransform(transform, 0, 0, 2 / (resolution * size[0]), 2 / (resolution * size[1]), -rotation, -center[0], -center[1]);\n    return transform;\n  };\n  /**\n   * Give a value for a standard float uniform\n   * @param {string} uniform Uniform name\n   * @param {number} value Value\n   * @api\n   */\n\n\n  WebGLHelper.prototype.setUniformFloatValue = function (uniform, value) {\n    this.getGL().uniform1f(this.getUniformLocation(uniform), value);\n  };\n  /**\n   * Give a value for a standard matrix4 uniform\n   * @param {string} uniform Uniform name\n   * @param {Array<number>} value Matrix value\n   * @api\n   */\n\n\n  WebGLHelper.prototype.setUniformMatrixValue = function (uniform, value) {\n    this.getGL().uniformMatrix4fv(this.getUniformLocation(uniform), false, value);\n  };\n  /**\n   * Will set the currently bound buffer to an attribute of the shader program. Used by `#enableAttributes`\n   * internally.\n   * @param {string} attribName Attribute name\n   * @param {number} size Number of components per attributes\n   * @param {number} type UNSIGNED_INT, UNSIGNED_BYTE, UNSIGNED_SHORT or FLOAT\n   * @param {number} stride Stride in bytes (0 means attribs are packed)\n   * @param {number} offset Offset in bytes\n   * @private\n   */\n\n\n  WebGLHelper.prototype.enableAttributeArray_ = function (attribName, size, type, stride, offset) {\n    var location = this.getAttributeLocation(attribName); // the attribute has not been found in the shaders; do not enable it\n\n    if (location < 0) {\n      return;\n    }\n\n    this.getGL().enableVertexAttribArray(location);\n    this.getGL().vertexAttribPointer(location, size, type, false, stride, offset);\n  };\n  /**\n   * Will enable the following attributes to be read from the currently bound buffer,\n   * i.e. tell the GPU where to read the different attributes in the buffer. An error in the\n   * size/type/order of attributes will most likely break the rendering and throw a WebGL exception.\n   * @param {Array<AttributeDescription>} attributes Ordered list of attributes to read from the buffer\n   * @api\n   */\n\n\n  WebGLHelper.prototype.enableAttributes = function (attributes) {\n    var stride = computeAttributesStride(attributes);\n    var offset = 0;\n\n    for (var i = 0; i < attributes.length; i++) {\n      var attr = attributes[i];\n      this.enableAttributeArray_(attr.name, attr.size, attr.type || FLOAT, stride, offset);\n      offset += attr.size * getByteSizeFromType(attr.type);\n    }\n  };\n  /**\n   * WebGL context was lost\n   * @private\n   */\n\n\n  WebGLHelper.prototype.handleWebGLContextLost = function () {\n    clear(this.bufferCache_);\n    this.currentProgram_ = null;\n  };\n  /**\n   * WebGL context was restored\n   * @private\n   */\n\n\n  WebGLHelper.prototype.handleWebGLContextRestored = function () {};\n  /**\n   * Will create or reuse a given webgl texture and apply the given size. If no image data\n   * specified, the texture will be empty, otherwise image data will be used and the `size`\n   * parameter will be ignored.\n   * Note: wrap parameters are set to clamp to edge, min filter is set to linear.\n   * @param {Array<number>} size Expected size of the texture\n   * @param {ImageData|HTMLImageElement|HTMLCanvasElement} [opt_data] Image data/object to bind to the texture\n   * @param {WebGLTexture} [opt_texture] Existing texture to reuse\n   * @return {WebGLTexture} The generated texture\n   * @api\n   */\n\n\n  WebGLHelper.prototype.createTexture = function (size, opt_data, opt_texture) {\n    var gl = this.getGL();\n    var texture = opt_texture || gl.createTexture(); // set params & size\n\n    var level = 0;\n    var internalFormat = gl.RGBA;\n    var border = 0;\n    var format = gl.RGBA;\n    var type = gl.UNSIGNED_BYTE;\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n\n    if (opt_data) {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, format, type, opt_data);\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, level, internalFormat, size[0], size[1], border, format, type, null);\n    }\n\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    return texture;\n  };\n\n  return WebGLHelper;\n}(Disposable);\n/**\n * Compute a stride in bytes based on a list of attributes\n * @param {Array<AttributeDescription>} attributes Ordered list of attributes\n * @return {number} Stride, ie amount of values for each vertex in the vertex buffer\n * @api\n */\n\n\nexport function computeAttributesStride(attributes) {\n  var stride = 0;\n\n  for (var i = 0; i < attributes.length; i++) {\n    var attr = attributes[i];\n    stride += attr.size * getByteSizeFromType(attr.type);\n  }\n\n  return stride;\n}\n/**\n * Computes the size in byte of an attribute type.\n * @param {AttributeType} type Attribute type\n * @return {number} The size in bytes\n */\n\nfunction getByteSizeFromType(type) {\n  switch (type) {\n    case AttributeType.UNSIGNED_BYTE:\n      return Uint8Array.BYTES_PER_ELEMENT;\n\n    case AttributeType.UNSIGNED_SHORT:\n      return Uint16Array.BYTES_PER_ELEMENT;\n\n    case AttributeType.UNSIGNED_INT:\n      return Uint32Array.BYTES_PER_ELEMENT;\n\n    case AttributeType.FLOAT:\n    default:\n      return Float32Array.BYTES_PER_ELEMENT;\n  }\n}\n\nexport default WebGLHelper;","var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/webgl/Layer\n */\n\n\nimport LayerProperty from '../../layer/Property.js';\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport WebGLHelper from '../../webgl/Helper.js';\nimport { compose as composeTransform, create as createTransform } from '../../transform.js';\n/**\n * @enum {string}\n */\n\nexport var WebGLWorkerMessageType = {\n  GENERATE_BUFFERS: 'GENERATE_BUFFERS'\n};\n/**\n * @typedef {Object} WebGLWorkerGenerateBuffersMessage\n * This message will trigger the generation of a vertex and an index buffer based on the given render instructions.\n * When the buffers are generated, the worked will send a message of the same type to the main thread, with\n * the generated buffers in it.\n * Note that any addition properties present in the message *will* be sent back to the main thread.\n * @property {WebGLWorkerMessageType} type Message type\n * @property {ArrayBuffer} renderInstructions Render instructions raw binary buffer.\n * @property {ArrayBuffer} [vertexBuffer] Vertices array raw binary buffer (sent by the worker).\n * @property {ArrayBuffer} [indexBuffer] Indices array raw binary buffer (sent by the worker).\n * @property {number} [customAttributesCount] Amount of custom attributes count in the render instructions.\n */\n\n/**\n * @typedef {Object} PostProcessesOptions\n * @property {number} [scaleRatio] Scale ratio; if < 1, the post process will render to a texture smaller than\n * the main canvas that will then be sampled up (useful for saving resource on blur steps).\n * @property {string} [vertexShader] Vertex shader source\n * @property {string} [fragmentShader] Fragment shader source\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process step\n */\n\n/**\n * @typedef {Object} Options\n * @property {Object<string,import(\"../../webgl/Helper\").UniformValue>} [uniforms] Uniform definitions for the post process steps\n * @property {Array<PostProcessesOptions>} [postProcesses] Post-processes definitions\n */\n\n/**\n * @classdesc\n * Base WebGL renderer class.\n * Holds all logic related to data manipulation & some common rendering logic\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\n\nvar WebGLLayerRenderer =\n/** @class */\nfunction (_super) {\n  __extends(WebGLLayerRenderer, _super);\n  /**\n   * @param {LayerType} layer Layer.\n   * @param {Options} [opt_options] Options.\n   */\n\n\n  function WebGLLayerRenderer(layer, opt_options) {\n    var _this = _super.call(this, layer) || this;\n\n    var options = opt_options || {};\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform is only\n     * set before dispatching rendering events.\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n\n    _this.inversePixelTransform_ = createTransform();\n    /**\n     * @private\n     */\n\n    _this.postProcesses_ = options.postProcesses;\n    /**\n     * @private\n     */\n\n    _this.uniforms_ = options.uniforms;\n    /**\n     * @type {WebGLHelper}\n     * @protected\n     */\n\n    _this.helper;\n    layer.addChangeListener(LayerProperty.MAP, _this.removeHelper_.bind(_this));\n    _this.dispatchPreComposeEvent = _this.dispatchPreComposeEvent.bind(_this);\n    _this.dispatchPostComposeEvent = _this.dispatchPostComposeEvent.bind(_this);\n    return _this;\n  }\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.dispatchPreComposeEvent = function (context, frameState) {\n    var layer = this.getLayer();\n\n    if (layer.hasListener(RenderEventType.PRECOMPOSE)) {\n      var event_1 = new RenderEvent(RenderEventType.PRECOMPOSE, undefined, frameState, context);\n      layer.dispatchEvent(event_1);\n    }\n  };\n  /**\n   * @param {WebGLRenderingContext} context The WebGL rendering context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.dispatchPostComposeEvent = function (context, frameState) {\n    var layer = this.getLayer();\n\n    if (layer.hasListener(RenderEventType.POSTCOMPOSE)) {\n      var event_2 = new RenderEvent(RenderEventType.POSTCOMPOSE, undefined, frameState, context);\n      layer.dispatchEvent(event_2);\n    }\n  };\n  /**\n   * Reset options (only handles uniforms).\n   * @param {Options} options Options.\n   */\n\n\n  WebGLLayerRenderer.prototype.reset = function (options) {\n    this.uniforms_ = options.uniforms;\n\n    if (this.helper) {\n      this.helper.setUniforms(this.uniforms_);\n    }\n  };\n\n  WebGLLayerRenderer.prototype.removeHelper_ = function () {\n    if (this.helper) {\n      this.helper.dispose();\n      delete this.helper;\n    }\n  };\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n\n\n  WebGLLayerRenderer.prototype.prepareFrame = function (frameState) {\n    if (this.getLayer().getSource()) {\n      var incrementGroup = true;\n      var groupNumber = -1;\n      var className = void 0;\n\n      for (var i = 0, ii = frameState.layerStatesArray.length; i < ii; i++) {\n        var layer = frameState.layerStatesArray[i].layer;\n        var renderer = layer.getRenderer();\n\n        if (!(renderer instanceof WebGLLayerRenderer)) {\n          incrementGroup = true;\n          continue;\n        }\n\n        var layerClassName = layer.getClassName();\n\n        if (incrementGroup || layerClassName !== className) {\n          groupNumber += 1;\n          incrementGroup = false;\n        }\n\n        className = layerClassName;\n\n        if (renderer === this) {\n          break;\n        }\n      }\n\n      var canvasCacheKey = 'map/' + frameState.mapId + '/group/' + groupNumber;\n\n      if (!this.helper || !this.helper.canvasCacheKeyMatches(canvasCacheKey)) {\n        if (this.helper) {\n          this.helper.dispose();\n        }\n\n        this.helper = new WebGLHelper({\n          postProcesses: this.postProcesses_,\n          uniforms: this.uniforms_,\n          canvasCacheKey: canvasCacheKey\n        });\n\n        if (className) {\n          this.helper.getCanvas().className = className;\n        }\n\n        this.afterHelperCreated();\n      }\n    }\n\n    return this.prepareFrameInternal(frameState);\n  };\n  /**\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.afterHelperCreated = function () {};\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.prepareFrameInternal = function (frameState) {\n    return true;\n  };\n  /**\n   * Clean up.\n   */\n\n\n  WebGLLayerRenderer.prototype.disposeInternal = function () {\n    this.removeHelper_();\n\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n\n\n  WebGLLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n    var layer = this.getLayer();\n\n    if (layer.hasListener(type)) {\n      composeTransform(this.inversePixelTransform_, 0, 0, frameState.pixelRatio, -frameState.pixelRatio, 0, 0, -frameState.size[1]);\n      var event_3 = new RenderEvent(type, this.inversePixelTransform_, frameState, context);\n      layer.dispatchEvent(event_3);\n    }\n  };\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.preRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  };\n  /**\n   * @param {WebGLRenderingContext} context The rendering context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n\n\n  WebGLLayerRenderer.prototype.postRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  };\n\n  return WebGLLayerRenderer;\n}(LayerRenderer);\n\nvar tmpArray_ = [];\nvar bufferPositions_ = {\n  vertexPosition: 0,\n  indexPosition: 0\n};\n\nfunction writePointVertex(buffer, pos, x, y, index) {\n  buffer[pos + 0] = x;\n  buffer[pos + 1] = y;\n  buffer[pos + 2] = index;\n}\n/**\n * An object holding positions both in an index and a vertex buffer.\n * @typedef {Object} BufferPositions\n * @property {number} vertexPosition Position in the vertex buffer\n * @property {number} indexPosition Position in the index buffer\n */\n\n/**\n * Pushes a quad (two triangles) based on a point geometry\n * @param {Float32Array} instructions Array of render instructions for points.\n * @param {number} elementIndex Index from which render instructions will be read.\n * @param {Float32Array} vertexBuffer Buffer in the form of a typed array.\n * @param {Uint32Array} indexBuffer Buffer in the form of a typed array.\n * @param {number} customAttributesCount Amount of custom attributes for each element.\n * @param {BufferPositions} [bufferPositions] Buffer write positions; if not specified, positions will be set at 0.\n * @return {BufferPositions} New buffer positions where to write next\n * @property {number} vertexPosition New position in the vertex buffer where future writes should start.\n * @property {number} indexPosition New position in the index buffer where future writes should start.\n * @private\n */\n\n\nexport function writePointFeatureToBuffers(instructions, elementIndex, vertexBuffer, indexBuffer, customAttributesCount, bufferPositions) {\n  // This is for x, y and index\n  var baseVertexAttrsCount = 3;\n  var baseInstructionsCount = 2;\n  var stride = baseVertexAttrsCount + customAttributesCount;\n  var x = instructions[elementIndex + 0];\n  var y = instructions[elementIndex + 1]; // read custom numerical attributes on the feature\n\n  var customAttrs = tmpArray_;\n  customAttrs.length = customAttributesCount;\n\n  for (var i = 0; i < customAttrs.length; i++) {\n    customAttrs[i] = instructions[elementIndex + baseInstructionsCount + i];\n  }\n\n  var vPos = bufferPositions ? bufferPositions.vertexPosition : 0;\n  var iPos = bufferPositions ? bufferPositions.indexPosition : 0;\n  var baseIndex = vPos / stride; // push vertices for each of the four quad corners (first standard then custom attributes)\n\n  writePointVertex(vertexBuffer, vPos, x, y, 0);\n  customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n  writePointVertex(vertexBuffer, vPos, x, y, 1);\n  customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n  writePointVertex(vertexBuffer, vPos, x, y, 2);\n  customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n  writePointVertex(vertexBuffer, vPos, x, y, 3);\n  customAttrs.length && vertexBuffer.set(customAttrs, vPos + baseVertexAttrsCount);\n  vPos += stride;\n  indexBuffer[iPos++] = baseIndex;\n  indexBuffer[iPos++] = baseIndex + 1;\n  indexBuffer[iPos++] = baseIndex + 3;\n  indexBuffer[iPos++] = baseIndex + 1;\n  indexBuffer[iPos++] = baseIndex + 2;\n  indexBuffer[iPos++] = baseIndex + 3;\n  bufferPositions_.vertexPosition = vPos;\n  bufferPositions_.indexPosition = iPos;\n  return bufferPositions_;\n}\n/**\n * Returns a texture of 1x1 pixel, white\n * @private\n * @return {ImageData} Image data.\n */\n\nexport function getBlankImageData() {\n  var canvas = document.createElement('canvas');\n  var image = canvas.getContext('2d').createImageData(1, 1);\n  image.data[0] = 255;\n  image.data[1] = 255;\n  image.data[2] = 255;\n  image.data[3] = 255;\n  return image;\n}\n/**\n * Generates a color array based on a numerical id\n * Note: the range for each component is 0 to 1 with 256 steps\n * @param {number} id Id\n * @param {Array<number>} [opt_array] Reusable array\n * @return {Array<number>} Color array containing the encoded id\n */\n\nexport function colorEncodeId(id, opt_array) {\n  var array = opt_array || [];\n  var radix = 256;\n  var divide = radix - 1;\n  array[0] = Math.floor(id / radix / radix / radix) / divide;\n  array[1] = Math.floor(id / radix / radix) % radix / divide;\n  array[2] = Math.floor(id / radix) % radix / divide;\n  array[3] = id % radix / divide;\n  return array;\n}\n/**\n * Reads an id from a color-encoded array\n * Note: the expected range for each component is 0 to 1 with 256 steps.\n * @param {Array<number>} color Color array containing the encoded id\n * @return {number} Decoded id\n */\n\nexport function colorDecodeId(color) {\n  var id = 0;\n  var radix = 256;\n  var mult = radix - 1;\n  id += Math.round(color[0] * radix * radix * radix * mult);\n  id += Math.round(color[1] * radix * radix * mult);\n  id += Math.round(color[2] * radix * mult);\n  id += Math.round(color[3] * mult);\n  return id;\n}\nexport default WebGLLayerRenderer;","var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/webgl/TileLayer\n */\n\n\nimport LRUCache from '../../structs/LRUCache.js';\nimport State from '../../source/State.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport TileTexture from '../../webgl/TileTexture.js';\nimport WebGLArrayBuffer from '../../webgl/Buffer.js';\nimport WebGLLayerRenderer from './Layer.js';\nimport { AttributeType } from '../../webgl/Helper.js';\nimport { ELEMENT_ARRAY_BUFFER, STATIC_DRAW } from '../../webgl.js';\nimport { compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { create as createMat4, fromTransform as mat4FromTransform } from '../../vec/mat4.js';\nimport { createOrUpdate as createTileCoord, getKeyZXY, getKey as getTileCoordKey } from '../../tilecoord.js';\nimport { fromUserExtent } from '../../proj.js';\nimport { getIntersection } from '../../extent.js';\nimport { getUid } from '../../util.js';\nimport { isEmpty } from '../../extent.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nimport { toSize } from '../../size.js';\nexport var Uniforms = {\n  TILE_TEXTURE_ARRAY: 'u_tileTextures',\n  TILE_TRANSFORM: 'u_tileTransform',\n  TRANSITION_ALPHA: 'u_transitionAlpha',\n  DEPTH: 'u_depth',\n  TEXTURE_PIXEL_WIDTH: 'u_texturePixelWidth',\n  TEXTURE_PIXEL_HEIGHT: 'u_texturePixelHeight',\n  RESOLUTION: 'u_resolution',\n  ZOOM: 'u_zoom'\n};\nexport var Attributes = {\n  TEXTURE_COORD: 'a_textureCoord'\n};\n/**\n * @type {Array<import('../../webgl/Helper.js').AttributeDescription>}\n */\n\nvar attributeDescriptions = [{\n  name: Attributes.TEXTURE_COORD,\n  size: 2,\n  type: AttributeType.FLOAT\n}];\n/**\n * @type {Object<string, boolean>}\n */\n\nvar empty = {};\n/**\n * Transform a zoom level into a depth value ranging from -1 to 1.\n * @param {number} z A zoom level.\n * @return {number} A depth value.\n */\n\nfunction depthForZ(z) {\n  return 2 * (1 - 1 / (z + 1)) - 1;\n}\n/**\n * Add a tile texture to the lookup.\n * @param {Object<number, Array<import(\"../../webgl/TileTexture.js\").default>>} tileTexturesByZ Lookup of\n * tile textures by zoom level.\n * @param {import(\"../../webgl/TileTexture.js\").default} tileTexture A tile texture.\n * @param {number} z The zoom level.\n */\n\n\nfunction addTileTextureToLookup(tileTexturesByZ, tileTexture, z) {\n  if (!(z in tileTexturesByZ)) {\n    tileTexturesByZ[z] = [];\n  }\n\n  tileTexturesByZ[z].push(tileTexture);\n}\n/**\n * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n * @param {import(\"../../extent.js\").Extent} extent The frame extent.\n * @return {import(\"../../extent.js\").Extent} Frame extent intersected with layer extents.\n */\n\n\nfunction getRenderExtent(frameState, extent) {\n  var layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n  if (layerState.extent) {\n    extent = getIntersection(extent, fromUserExtent(layerState.extent, frameState.viewState.projection));\n  }\n\n  var source =\n  /** {import(\"../../source/Tile.js\").default} */\n  layerState.layer.getSource();\n\n  if (!source.getWrapX()) {\n    var gridExtent = source.tileGrid.getExtent();\n\n    if (gridExtent) {\n      extent = getIntersection(extent, gridExtent);\n    }\n  }\n\n  return extent;\n}\n/**\n * @typedef {Object} Options\n * @property {string} vertexShader Vertex shader source.\n * @property {string} fragmentShader Fragment shader source.\n * @property {Object<string, import(\"../../webgl/Helper\").UniformValue>} [uniforms] Additional uniforms\n * made available to shaders.\n * @property {Array<import(\"../../webgl/PaletteTexture.js\").default>} [paletteTextures] Palette textures.\n * @property {number} [cacheSize=512] The texture cache size.\n */\n\n/**\n * @typedef {import(\"../../layer/WebGLTile.js\").default} LayerType\n */\n\n/**\n * @classdesc\n * WebGL renderer for tile layers.\n * @extends {WebGLLayerRenderer<LayerType>}\n * @api\n */\n\n\nvar WebGLTileLayerRenderer =\n/** @class */\nfunction (_super) {\n  __extends(WebGLTileLayerRenderer, _super);\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   * @param {Options} options Options.\n   */\n\n\n  function WebGLTileLayerRenderer(tileLayer, options) {\n    var _this = _super.call(this, tileLayer, {\n      uniforms: options.uniforms\n    }) || this;\n    /**\n     * This transform converts tile i, j coordinates to screen coordinates.\n     * @type {import(\"../../transform.js\").Transform}\n     * @private\n     */\n\n\n    _this.tileTransform_ = createTransform();\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n\n    _this.tempMat4_ = createMat4();\n    /**\n     * @type {import(\"../../TileRange.js\").default}\n     * @private\n     */\n\n    _this.tempTileRange_ = new TileRange(0, 0, 0, 0);\n    /**\n     * @type {import(\"../../tilecoord.js\").TileCoord}\n     * @private\n     */\n\n    _this.tempTileCoord_ = createTileCoord(0, 0, 0);\n    /**\n     * @type {import(\"../../size.js\").Size}\n     * @private\n     */\n\n    _this.tempSize_ = [0, 0];\n    /**\n     * @type {WebGLProgram}\n     * @private\n     */\n\n    _this.program_;\n    /**\n     * @private\n     */\n\n    _this.vertexShader_ = options.vertexShader;\n    /**\n     * @private\n     */\n\n    _this.fragmentShader_ = options.fragmentShader;\n    /**\n     * Tiles are rendered as a quad with the following structure:\n     *\n     *  [P3]---------[P2]\n     *   |`           |\n     *   |  `     B   |\n     *   |    `       |\n     *   |      `     |\n     *   |   A    `   |\n     *   |          ` |\n     *  [P0]---------[P1]\n     *\n     * Triangle A: P0, P1, P3\n     * Triangle B: P1, P2, P3\n     *\n     * @private\n     */\n\n    _this.indices_ = new WebGLArrayBuffer(ELEMENT_ARRAY_BUFFER, STATIC_DRAW);\n\n    _this.indices_.fromArray([0, 1, 3, 1, 2, 3]);\n\n    var cacheSize = options.cacheSize !== undefined ? options.cacheSize : 512;\n    /**\n     * @type {import(\"../../structs/LRUCache.js\").default<import(\"../../webgl/TileTexture.js\").default>}\n     * @private\n     */\n\n    _this.tileTextureCache_ = new LRUCache(cacheSize);\n    /**\n     * @type {Array<import(\"../../webgl/PaletteTexture.js\").default>}\n     * @private\n     */\n\n    _this.paletteTextures_ = options.paletteTextures || [];\n    return _this;\n  }\n  /**\n   * @param {Options} options Options.\n   */\n\n\n  WebGLTileLayerRenderer.prototype.reset = function (options) {\n    _super.prototype.reset.call(this, {\n      uniforms: options.uniforms\n    });\n\n    this.vertexShader_ = options.vertexShader;\n    this.fragmentShader_ = options.fragmentShader;\n    this.paletteTextures_ = options.paletteTextures || [];\n\n    if (this.helper) {\n      this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n    }\n  };\n\n  WebGLTileLayerRenderer.prototype.afterHelperCreated = function () {\n    this.program_ = this.helper.getProgram(this.fragmentShader_, this.vertexShader_);\n    this.helper.flushBufferData(this.indices_);\n  };\n  /**\n   * @param {import(\"../../webgl/TileTexture\").TileType} tile Tile.\n   * @return {boolean} Tile is drawable.\n   * @private\n   */\n\n\n  WebGLTileLayerRenderer.prototype.isDrawableTile_ = function (tile) {\n    var tileLayer = this.getLayer();\n    var tileState = tile.getState();\n    var useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n    return tileState == TileState.LOADED || tileState == TileState.EMPTY || tileState == TileState.ERROR && !useInterimTilesOnError;\n  };\n  /**\n   * Determine whether renderFrame should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n\n\n  WebGLTileLayerRenderer.prototype.prepareFrameInternal = function (frameState) {\n    var layer = this.getLayer();\n    var source = layer.getSource();\n\n    if (!source) {\n      return false;\n    }\n\n    if (isEmpty(getRenderExtent(frameState, frameState.extent))) {\n      return false;\n    }\n\n    return source.getState() === State.READY;\n  };\n  /**\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent The extent to be rendered.\n   * @param {number} z The zoom level.\n   * @param {Object<number, Array<TileTexture>>} tileTexturesByZ The zoom level.\n   */\n\n\n  WebGLTileLayerRenderer.prototype.enqueueTiles = function (frameState, extent, z, tileTexturesByZ) {\n    var viewState = frameState.viewState;\n    var tileLayer = this.getLayer();\n    var tileSource = tileLayer.getSource();\n    var tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    var tileTextureCache = this.tileTextureCache_;\n    var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, this.tempTileRange_);\n    var tileSourceKey = getUid(tileSource);\n\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n\n    var wantedTiles = frameState.wantedTiles[tileSourceKey];\n    var tileResolution = tileGrid.getResolution(z);\n\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        var tileCoord = createTileCoord(z, x, y, this.tempTileCoord_);\n        var tileCoordKey = getTileCoordKey(tileCoord);\n        /**\n         * @type {TileTexture}\n         */\n\n        var tileTexture = void 0;\n        /**\n         * @type {import(\"../../webgl/TileTexture\").TileType}\n         */\n\n        var tile = void 0;\n\n        if (tileTextureCache.containsKey(tileCoordKey)) {\n          tileTexture = tileTextureCache.get(tileCoordKey);\n          tile = tileTexture.tile;\n        }\n\n        if (!tileTexture || tileTexture.tile.key !== tileSource.getKey()) {\n          tile = tileSource.getTile(z, x, y, frameState.pixelRatio, viewState.projection);\n\n          if (!tileTexture) {\n            tileTexture = new TileTexture(tile, tileGrid, this.helper);\n            tileTextureCache.set(tileCoordKey, tileTexture);\n          } else {\n            if (this.isDrawableTile_(tile)) {\n              tileTexture.setTile(tile);\n            } else {\n              var interimTile =\n              /** @type {import(\"../../webgl/TileTexture\").TileType} */\n              tile.getInterimTile();\n              tileTexture.setTile(interimTile);\n            }\n          }\n        }\n\n        addTileTextureToLookup(tileTexturesByZ, tileTexture, z);\n        var tileQueueKey = tile.getKey();\n        wantedTiles[tileQueueKey] = true;\n\n        if (tile.getState() === TileState.IDLE) {\n          if (!frameState.tileQueue.isKeyQueued(tileQueueKey)) {\n            frameState.tileQueue.enqueue([tile, tileSourceKey, tileGrid.getTileCoordCenter(tileCoord), tileResolution]);\n          }\n        }\n      }\n    }\n  };\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {HTMLElement} The rendered element.\n   */\n\n\n  WebGLTileLayerRenderer.prototype.renderFrame = function (frameState) {\n    var gl = this.helper.getGL();\n    this.preRender(gl, frameState);\n    var viewState = frameState.viewState;\n    var tileLayer = this.getLayer();\n    var tileSource = tileLayer.getSource();\n    var tileGrid = tileSource.getTileGridForProjection(viewState.projection);\n    var extent = getRenderExtent(frameState, frameState.extent);\n    var z = tileGrid.getZForResolution(viewState.resolution, tileSource.zDirection);\n    /**\n     * @type {Object<number, Array<import(\"../../webgl/TileTexture.js\").default>>}\n     */\n\n    var tileTexturesByZ = {};\n\n    if (frameState.nextExtent) {\n      var targetZ = tileGrid.getZForResolution(viewState.nextResolution, tileSource.zDirection);\n      var nextExtent = getRenderExtent(frameState, frameState.nextExtent);\n      this.enqueueTiles(frameState, nextExtent, targetZ, tileTexturesByZ);\n    }\n\n    this.enqueueTiles(frameState, extent, z, tileTexturesByZ);\n    /**\n     * A lookup of alpha values for tiles at the target rendering resolution\n     * for tiles that are in transition.  If a tile coord key is absent from\n     * this lookup, the tile should be rendered at alpha 1.\n     * @type {Object<string, number>}\n     */\n\n    var alphaLookup = {};\n    var uid = getUid(this);\n    var time = frameState.time;\n    var blend = false; // look for cached tiles to use if a target tile is not ready\n\n    var tileTextures = tileTexturesByZ[z];\n\n    for (var i = 0, ii = tileTextures.length; i < ii; ++i) {\n      var tileTexture = tileTextures[i];\n      var tile = tileTexture.tile;\n      var tileCoord = tile.tileCoord;\n\n      if (tileTexture.loaded) {\n        var alpha = tile.getAlpha(uid, time);\n\n        if (alpha === 1) {\n          // no need to look for alt tiles\n          tile.endTransition(uid);\n          continue;\n        }\n\n        blend = true;\n        var tileCoordKey = getTileCoordKey(tileCoord);\n        alphaLookup[tileCoordKey] = alpha;\n      } // first look for child tiles (at z + 1)\n\n\n      var coveredByChildren = this.findAltTiles_(tileGrid, tileCoord, z + 1, tileTexturesByZ);\n\n      if (coveredByChildren) {\n        continue;\n      } // next look for parent tiles\n\n\n      var minZoom = tileGrid.getMinZoom();\n\n      for (var parentZ = z - 1; parentZ >= minZoom; --parentZ) {\n        var coveredByParent = this.findAltTiles_(tileGrid, tileCoord, parentZ, tileTexturesByZ);\n\n        if (coveredByParent) {\n          break;\n        }\n      }\n    }\n\n    this.helper.useProgram(this.program_);\n    this.helper.prepareDraw(frameState, !blend);\n    var zs = Object.keys(tileTexturesByZ).map(Number).sort(numberSafeCompareFunction);\n    var centerX = viewState.center[0];\n    var centerY = viewState.center[1];\n\n    for (var j = 0, jj = zs.length; j < jj; ++j) {\n      var tileZ = zs[j];\n      var tileResolution = tileGrid.getResolution(tileZ);\n      var tileSize = toSize(tileGrid.getTileSize(tileZ), this.tempSize_);\n      var tileOrigin = tileGrid.getOrigin(tileZ);\n      var centerI = (centerX - tileOrigin[0]) / (tileSize[0] * tileResolution);\n      var centerJ = (tileOrigin[1] - centerY) / (tileSize[1] * tileResolution);\n      var tileScale = viewState.resolution / tileResolution;\n      var depth = depthForZ(tileZ);\n      var tileTextures_1 = tileTexturesByZ[tileZ];\n\n      for (var i = 0, ii = tileTextures_1.length; i < ii; ++i) {\n        var tileTexture = tileTextures_1[i];\n\n        if (!tileTexture.loaded) {\n          continue;\n        }\n\n        var tile = tileTexture.tile;\n        var tileCoord = tile.tileCoord;\n        var tileCoordKey = getTileCoordKey(tileCoord);\n        var tileCenterI = tileCoord[1];\n        var tileCenterJ = tileCoord[2];\n        composeTransform(this.tileTransform_, 0, 0, 2 / (frameState.size[0] * tileScale / tileSize[0]), -2 / (frameState.size[1] * tileScale / tileSize[1]), viewState.rotation, -(centerI - tileCenterI), -(centerJ - tileCenterJ));\n        this.helper.setUniformMatrixValue(Uniforms.TILE_TRANSFORM, mat4FromTransform(this.tempMat4_, this.tileTransform_));\n        this.helper.bindBuffer(tileTexture.coords);\n        this.helper.bindBuffer(this.indices_);\n        this.helper.enableAttributes(attributeDescriptions);\n        var textureSlot = 0;\n\n        while (textureSlot < tileTexture.textures.length) {\n          var textureProperty = 'TEXTURE' + textureSlot;\n          var uniformName = Uniforms.TILE_TEXTURE_ARRAY + \"[\" + textureSlot + \"]\";\n          gl.activeTexture(gl[textureProperty]);\n          gl.bindTexture(gl.TEXTURE_2D, tileTexture.textures[textureSlot]);\n          gl.uniform1i(this.helper.getUniformLocation(uniformName), textureSlot);\n          ++textureSlot;\n        }\n\n        for (var paletteIndex = 0; paletteIndex < this.paletteTextures_.length; ++paletteIndex) {\n          var paletteTexture = this.paletteTextures_[paletteIndex];\n          gl.activeTexture(gl['TEXTURE' + textureSlot]);\n          var texture = paletteTexture.getTexture(gl);\n          gl.bindTexture(gl.TEXTURE_2D, texture);\n          gl.uniform1i(this.helper.getUniformLocation(paletteTexture.name), textureSlot);\n          ++textureSlot;\n        }\n\n        var alpha = tileCoordKey in alphaLookup ? alphaLookup[tileCoordKey] : 1;\n\n        if (alpha < 1) {\n          frameState.animate = true;\n        }\n\n        this.helper.setUniformFloatValue(Uniforms.TRANSITION_ALPHA, alpha);\n        this.helper.setUniformFloatValue(Uniforms.DEPTH, depth);\n        this.helper.setUniformFloatValue(Uniforms.TEXTURE_PIXEL_WIDTH, tileSize[0]);\n        this.helper.setUniformFloatValue(Uniforms.TEXTURE_PIXEL_HEIGHT, tileSize[1]);\n        this.helper.setUniformFloatValue(Uniforms.RESOLUTION, viewState.resolution);\n        this.helper.setUniformFloatValue(Uniforms.ZOOM, viewState.zoom);\n        this.helper.drawElements(0, this.indices_.getSize());\n      }\n    }\n\n    this.helper.finalizeDraw(frameState, this.dispatchPreComposeEvent, this.dispatchPostComposeEvent);\n    var canvas = this.helper.getCanvas();\n    var tileTextureCache = this.tileTextureCache_;\n\n    while (tileTextureCache.canExpireCache()) {\n      var tileTexture = tileTextureCache.pop();\n      tileTexture.dispose();\n    } // TODO: let the renderers manage their own cache instead of managing the source cache\n\n    /**\n     * Here we unconditionally expire the source cache since the renderer maintains\n     * its own cache.\n     * @param {import(\"../../PluggableMap.js\").default} map Map.\n     * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n     */\n\n\n    var postRenderFunction = function postRenderFunction(map, frameState) {\n      tileSource.expireCache(frameState.viewState.projection, empty);\n    };\n\n    frameState.postRenderFunctions.push(postRenderFunction);\n    this.postRender(gl, frameState);\n    return canvas;\n  };\n  /**\n   * Look for tiles covering the provided tile coordinate at an alternate\n   * zoom level.  Loaded tiles will be added to the provided tile texture lookup.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid The tile grid.\n   * @param {import(\"../../tilecoord.js\").TileCoord} tileCoord The target tile coordinate.\n   * @param {number} altZ The alternate zoom level.\n   * @param {Object<number, Array<import(\"../../webgl/TileTexture.js\").default>>} tileTexturesByZ Lookup of\n   * tile textures by zoom level.\n   * @return {boolean} The tile coordinate is covered by loaded tiles at the alternate zoom level.\n   * @private\n   */\n\n\n  WebGLTileLayerRenderer.prototype.findAltTiles_ = function (tileGrid, tileCoord, altZ, tileTexturesByZ) {\n    var tileRange = tileGrid.getTileRangeForTileCoordAndZ(tileCoord, altZ, this.tempTileRange_);\n\n    if (!tileRange) {\n      return false;\n    }\n\n    var covered = true;\n    var tileTextureCache = this.tileTextureCache_;\n\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        var cacheKey = getKeyZXY(altZ, x, y);\n        var loaded = false;\n\n        if (tileTextureCache.containsKey(cacheKey)) {\n          var tileTexture = tileTextureCache.get(cacheKey);\n\n          if (tileTexture.loaded) {\n            addTileTextureToLookup(tileTexturesByZ, tileTexture, altZ);\n            loaded = true;\n          }\n        }\n\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n\n    return covered;\n  };\n  /**\n   * Clean up.\n   */\n\n\n  WebGLTileLayerRenderer.prototype.disposeInternal = function () {\n    var helper = this.helper;\n    var gl = helper.getGL();\n    helper.deleteBuffer(this.indices_);\n    delete this.indices_;\n    gl.deleteProgram(this.program_);\n    delete this.program_;\n    var tileTextureCache = this.tileTextureCache_;\n    tileTextureCache.forEach(function (tileTexture) {\n      tileTexture.dispose();\n    });\n    tileTextureCache.clear();\n    delete this.tileTextureCache_;\n\n    _super.prototype.disposeInternal.call(this);\n  };\n\n  return WebGLTileLayerRenderer;\n}(WebGLLayerRenderer);\n/**\n * @function\n * @return {import(\"../../layer/WebGLTile.js\").default}\n */\n\n\nWebGLTileLayerRenderer.prototype.getLayer;\nexport default WebGLTileLayerRenderer;","/**\n * @module ol/webgl/PaletteTexture\n */\nvar PaletteTexture =\n/** @class */\nfunction () {\n  /**\n   * @param {string} name The name of the texture.\n   * @param {Uint8Array} data The texture data.\n   */\n  function PaletteTexture(name, data) {\n    this.name = name;\n    this.data = data;\n    /**\n     * @type {WebGLTexture}\n     * @private\n     */\n\n    this.texture_ = null;\n  }\n  /**\n   * @param {WebGLRenderingContext} gl Rendering context.\n   * @return {WebGLTexture} The texture.\n   */\n\n\n  PaletteTexture.prototype.getTexture = function (gl) {\n    if (!this.texture_) {\n      var texture = gl.createTexture();\n      gl.bindTexture(gl.TEXTURE_2D, texture);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.data.length / 4, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, this.data);\n      this.texture_ = texture;\n    }\n\n    return this.texture_;\n  };\n\n  return PaletteTexture;\n}();\n\nexport default PaletteTexture;","/**\n * Operators and utilities used for style expressions\n * @module ol/style/expressions\n */\nimport PaletteTexture from '../webgl/PaletteTexture.js';\nimport { Uniforms } from '../renderer/webgl/TileLayer.js';\nimport { asArray, fromString, isStringColor } from '../color.js';\nimport { log2 } from '../math.js';\n/**\n * Base type used for literal style parameters; can be a number literal or the output of an operator,\n * which in turns takes {@link import(\"./expressions.js\").ExpressionValue} arguments.\n *\n * The following operators can be used:\n *\n * * Reading operators:\n *   * `['band', bandIndex, xOffset, yOffset]` For tile layers only. Fetches pixel values from band\n *     `bandIndex` of the source's data. The first `bandIndex` of the source data is `1`. Fetched values\n *     are in the 0..1 range. {@link import(\"../source/TileImage.js\").default} sources have 4 bands: red,\n *     green, blue and alpha. {@link import(\"../source/DataTile.js\").default} sources can have any number\n *     of bands, depending on the underlying data source and\n *     {@link import(\"../source/GeoTIFF.js\").Options configuration}. `xOffset` and `yOffset` are optional\n *     and allow specifying pixel offsets for x and y. This is used for sampling data from neighboring pixels.\n *   * `['get', 'attributeName']` fetches a feature attribute (it will be prefixed by `a_` in the shader)\n *     Note: those will be taken from the attributes provided to the renderer\n *   * `['resolution']` returns the current resolution\n *   * `['time']` returns the time in seconds since the creation of the layer\n *   * `['var', 'varName']` fetches a value from the style variables, or 0 if undefined\n *   * `['zoom']` returns the current zoom level\n *\n * * Math operators:\n *   * `['*', value1, value2]` multiplies `value1` by `value2`\n *   * `['/', value1, value2]` divides `value1` by `value2`\n *   * `['+', value1, value2]` adds `value1` and `value2`\n *   * `['-', value1, value2]` subtracts `value2` from `value1`\n *   * `['clamp', value, low, high]` clamps `value` between `low` and `high`\n *   * `['%', value1, value2]` returns the result of `value1 % value2` (modulo)\n *   * `['^', value1, value2]` returns the value of `value1` raised to the `value2` power\n *   * `['abs', value1]` returns the absolute value of `value1`\n *   * `['sin', value1]` returns the sine of `value1`\n *   * `['cos', value1]` returns the cosine of `value1`\n *   * `['atan', value1, value2]` returns `atan2(value1, value2)`. If `value2` is not provided, returns `atan(value1)`\n *\n * * Transform operators:\n *   * `['case', condition1, output1, ...conditionN, outputN, fallback]` selects the first output whose corresponding\n *     condition evaluates to `true`. If no match is found, returns the `fallback` value.\n *     All conditions should be `boolean`, output and fallback can be any kind.\n *   * `['match', input, match1, output1, ...matchN, outputN, fallback]` compares the `input` value against all\n *     provided `matchX` values, returning the output associated with the first valid match. If no match is found,\n *     returns the `fallback` value.\n *     `input` and `matchX` values must all be of the same type, and can be `number` or `string`. `outputX` and\n *     `fallback` values must be of the same type, and can be of any kind.\n *   * `['interpolate', interpolation, input, stop1, output1, ...stopN, outputN]` returns a value by interpolating between\n *     pairs of inputs and outputs; `interpolation` can either be `['linear']` or `['exponential', base]` where `base` is\n *     the rate of increase from stop A to stop B (i.e. power to which the interpolation ratio is raised); a value\n *     of 1 is equivalent to `['linear']`.\n *     `input` and `stopX` values must all be of type `number`. `outputX` values can be `number` or `color` values.\n *     Note: `input` will be clamped between `stop1` and `stopN`, meaning that all output values will be comprised\n *     between `output1` and `outputN`.\n *\n * * Logical operators:\n *   * `['<', value1, value2]` returns `true` if `value1` is strictly lower than `value2`, or `false` otherwise.\n *   * `['<=', value1, value2]` returns `true` if `value1` is lower than or equals `value2`, or `false` otherwise.\n *   * `['>', value1, value2]` returns `true` if `value1` is strictly greater than `value2`, or `false` otherwise.\n *   * `['>=', value1, value2]` returns `true` if `value1` is greater than or equals `value2`, or `false` otherwise.\n *   * `['==', value1, value2]` returns `true` if `value1` equals `value2`, or `false` otherwise.\n *   * `['!=', value1, value2]` returns `true` if `value1` does not equal `value2`, or `false` otherwise.\n *   * `['!', value1]` returns `false` if `value1` is `true` or greater than `0`, or `true` otherwise.\n *   * `['all', value1, value2, ...]` returns `true` if all the inputs are `true`, `false` otherwise.\n *   * `['any', value1, value2, ...]` returns `true` if any of the inputs are `true`, `false` otherwise.\n *   * `['between', value1, value2, value3]` returns `true` if `value1` is contained between `value2` and `value3`\n *     (inclusively), or `false` otherwise.\n *\n * * Conversion operators:\n *   * `['array', value1, ...valueN]` creates a numerical array from `number` values; please note that the amount of\n *     values can currently only be 2, 3 or 4.\n *   * `['color', red, green, blue, alpha]` creates a `color` value from `number` values; the `alpha` parameter is\n *     optional; if not specified, it will be set to 1.\n *     Note: `red`, `green` and `blue` components must be values between 0 and 255; `alpha` between 0 and 1.\n *   * `['palette', index, colors]` picks a `color` value from an array of colors using the given index; the `index`\n *     expression must evaluate to a number; the items in the `colors` array must be strings with hex colors\n *     (e.g. `'#86A136'`), colors using the rgba[a] functional notation (e.g. `'rgb(134, 161, 54)'` or `'rgba(134, 161, 54, 1)'`),\n *     named colors (e.g. `'red'`), or array literals with 3 ([r, g, b]) or 4 ([r, g, b, a]) values (with r, g, and b\n *     in the 0-255 range and a in the 0-1 range).\n *\n * Values can either be literals or another operator, as they will be evaluated recursively.\n * Literal values can be of the following types:\n * * `boolean`\n * * `number`\n * * `string`\n * * {@link module:ol/color~Color}\n *\n * @typedef {Array<*>|import(\"../color.js\").Color|string|number|boolean} ExpressionValue\n * @api\n */\n\n/**\n * Possible inferred types from a given value or expression.\n * Note: these are binary flags.\n * @enum {number}\n */\n\nexport var ValueTypes = {\n  NUMBER: 1,\n  STRING: 2,\n  COLOR: 4,\n  BOOLEAN: 8,\n  NUMBER_ARRAY: 16,\n  ANY: 31,\n  NONE: 0\n};\n/**\n * An operator declaration must contain two methods: `getReturnType` which returns a type based on\n * the operator arguments, and `toGlsl` which returns a GLSL-compatible string.\n * Note: both methods can process arguments recursively.\n * @typedef {Object} Operator\n * @property {function(Array<ExpressionValue>): ValueTypes|number} getReturnType Returns one or several types\n * @property {function(ParsingContext, Array<ExpressionValue>, ValueTypes=): string} toGlsl Returns a GLSL-compatible string\n * Note: takes in an optional type hint as 3rd parameter\n */\n\n/**\n * Operator declarations\n * @type {Object<string, Operator>}\n */\n\nexport var Operators = {};\n/**\n * Returns the possible types for a given value (each type being a binary flag)\n * To test a value use e.g. `getValueType(v) & ValueTypes.BOOLEAN`\n * @param {ExpressionValue} value Value\n * @return {ValueTypes|number} Type or types inferred from the value\n */\n\nexport function getValueType(value) {\n  if (typeof value === 'number') {\n    return ValueTypes.NUMBER;\n  }\n\n  if (typeof value === 'boolean') {\n    return ValueTypes.BOOLEAN;\n  }\n\n  if (typeof value === 'string') {\n    if (isStringColor(value)) {\n      return ValueTypes.COLOR | ValueTypes.STRING;\n    }\n\n    return ValueTypes.STRING;\n  }\n\n  if (!Array.isArray(value)) {\n    throw new Error(\"Unhandled value type: \" + JSON.stringify(value));\n  }\n\n  var valueArr =\n  /** @type {Array<*>} */\n  value;\n  var onlyNumbers = valueArr.every(function (v) {\n    return typeof v === 'number';\n  });\n\n  if (onlyNumbers) {\n    if (valueArr.length === 3 || valueArr.length === 4) {\n      return ValueTypes.COLOR | ValueTypes.NUMBER_ARRAY;\n    }\n\n    return ValueTypes.NUMBER_ARRAY;\n  }\n\n  if (typeof valueArr[0] !== 'string') {\n    throw new Error(\"Expected an expression operator but received: \" + JSON.stringify(valueArr));\n  }\n\n  var operator = Operators[valueArr[0]];\n\n  if (operator === undefined) {\n    throw new Error(\"Unrecognized expression operator: \" + JSON.stringify(valueArr));\n  }\n\n  return operator.getReturnType(valueArr.slice(1));\n}\n/**\n * Checks if only one value type is enabled in the input number.\n * @param {ValueTypes|number} valueType Number containing value type binary flags\n * @return {boolean} True if only one type flag is enabled, false if zero or multiple\n */\n\nexport function isTypeUnique(valueType) {\n  return log2(valueType) % 1 === 0;\n}\n/**\n * Context available during the parsing of an expression.\n * @typedef {Object} ParsingContext\n * @property {boolean} [inFragmentShader] If false, means the expression output should be made for a vertex shader\n * @property {Array<string>} variables List of variables used in the expression; contains **unprefixed names**\n * @property {Array<string>} attributes List of attributes used in the expression; contains **unprefixed names**\n * @property {Object<string, number>} stringLiteralsMap This object maps all encountered string values to a number\n * @property {Object<string, string>} functions Lookup of functions used by the style.\n * @property {number} [bandCount] Number of bands per pixel.\n * @property {Array<PaletteTexture>} [paletteTextures] List of palettes used by the style.\n */\n\n/**\n * Will return the number as a float with a dot separator, which is required by GLSL.\n * @param {number} v Numerical value.\n * @return {string} The value as string.\n */\n\nexport function numberToGlsl(v) {\n  var s = v.toString();\n  return s.indexOf('.') === -1 ? s + '.0' : s;\n}\n/**\n * Will return the number array as a float with a dot separator, concatenated with ', '.\n * @param {Array<number>} array Numerical values array.\n * @return {string} The array as a vector, e. g.: `vec3(1.0, 2.0, 3.0)`.\n */\n\nexport function arrayToGlsl(array) {\n  if (array.length < 2 || array.length > 4) {\n    throw new Error('`formatArray` can only output `vec2`, `vec3` or `vec4` arrays.');\n  }\n\n  return \"vec\" + array.length + \"(\" + array.map(numberToGlsl).join(', ') + \")\";\n}\n/**\n * Will normalize and converts to string a `vec4` color array compatible with GLSL.\n * @param {string|import(\"../color.js\").Color} color Color either in string format or [r, g, b, a] array format,\n * with RGB components in the 0..255 range and the alpha component in the 0..1 range.\n * Note that the final array will always have 4 components.\n * @return {string} The color expressed in the `vec4(1.0, 1.0, 1.0, 1.0)` form.\n */\n\nexport function colorToGlsl(color) {\n  var array = asArray(color).slice();\n\n  if (array.length < 4) {\n    array.push(1);\n  }\n\n  return arrayToGlsl(array.map(function (c, i) {\n    return i < 3 ? c / 255 : c;\n  }));\n}\n/**\n * Returns a stable equivalent number for the string literal.\n * @param {ParsingContext} context Parsing context\n * @param {string} string String literal value\n * @return {number} Number equivalent\n */\n\nexport function getStringNumberEquivalent(context, string) {\n  if (context.stringLiteralsMap[string] === undefined) {\n    context.stringLiteralsMap[string] = Object.keys(context.stringLiteralsMap).length;\n  }\n\n  return context.stringLiteralsMap[string];\n}\n/**\n * Returns a stable equivalent number for the string literal, for use in shaders. This number is then\n * converted to be a GLSL-compatible string.\n * @param {ParsingContext} context Parsing context\n * @param {string} string String literal value\n * @return {string} GLSL-compatible string containing a number\n */\n\nexport function stringToGlsl(context, string) {\n  return numberToGlsl(getStringNumberEquivalent(context, string));\n}\n/**\n * Recursively parses a style expression and outputs a GLSL-compatible string. Takes in a parsing context that\n * will be read and modified during the parsing operation.\n * @param {ParsingContext} context Parsing context\n * @param {ExpressionValue} value Value\n * @param {ValueTypes|number} [typeHint] Hint for the expected final type (can be several types combined)\n * @return {string} GLSL-compatible output\n */\n\nexport function expressionToGlsl(context, value, typeHint) {\n  // operator\n  if (Array.isArray(value) && typeof value[0] === 'string') {\n    var operator = Operators[value[0]];\n\n    if (operator === undefined) {\n      throw new Error(\"Unrecognized expression operator: \" + JSON.stringify(value));\n    }\n\n    return operator.toGlsl(context, value.slice(1), typeHint);\n  }\n\n  var valueType = getValueType(value);\n\n  if ((valueType & ValueTypes.NUMBER) > 0) {\n    return numberToGlsl(\n    /** @type {number} */\n    value);\n  }\n\n  if ((valueType & ValueTypes.BOOLEAN) > 0) {\n    return value.toString();\n  }\n\n  if ((valueType & ValueTypes.STRING) > 0 && (typeHint === undefined || typeHint == ValueTypes.STRING)) {\n    return stringToGlsl(context, value.toString());\n  }\n\n  if ((valueType & ValueTypes.COLOR) > 0 && (typeHint === undefined || typeHint == ValueTypes.COLOR)) {\n    return colorToGlsl(\n    /** @type {Array<number> | string} */\n    value);\n  }\n\n  if ((valueType & ValueTypes.NUMBER_ARRAY) > 0) {\n    return arrayToGlsl(\n    /** @type {Array<number>} */\n    value);\n  }\n\n  throw new Error(\"Unexpected expression \" + value + \" (expected type \" + typeHint + \")\");\n}\n\nfunction assertNumber(value) {\n  if (!(getValueType(value) & ValueTypes.NUMBER)) {\n    throw new Error(\"A numeric value was expected, got \" + JSON.stringify(value) + \" instead\");\n  }\n}\n\nfunction assertNumbers(values) {\n  for (var i = 0; i < values.length; i++) {\n    assertNumber(values[i]);\n  }\n}\n\nfunction assertString(value) {\n  if (!(getValueType(value) & ValueTypes.STRING)) {\n    throw new Error(\"A string value was expected, got \" + JSON.stringify(value) + \" instead\");\n  }\n}\n\nfunction assertBoolean(value) {\n  if (!(getValueType(value) & ValueTypes.BOOLEAN)) {\n    throw new Error(\"A boolean value was expected, got \" + JSON.stringify(value) + \" instead\");\n  }\n}\n\nfunction assertArgsCount(args, count) {\n  if (args.length !== count) {\n    throw new Error(\"Exactly \" + count + \" arguments were expected, got \" + args.length + \" instead\");\n  }\n}\n\nfunction assertArgsMinCount(args, count) {\n  if (args.length < count) {\n    throw new Error(\"At least \" + count + \" arguments were expected, got \" + args.length + \" instead\");\n  }\n}\n\nfunction assertArgsMaxCount(args, count) {\n  if (args.length > count) {\n    throw new Error(\"At most \" + count + \" arguments were expected, got \" + args.length + \" instead\");\n  }\n}\n\nfunction assertArgsEven(args) {\n  if (args.length % 2 !== 0) {\n    throw new Error(\"An even amount of arguments was expected, got \" + args + \" instead\");\n  }\n}\n\nfunction assertArgsOdd(args) {\n  if (args.length % 2 === 0) {\n    throw new Error(\"An odd amount of arguments was expected, got \" + args + \" instead\");\n  }\n}\n\nfunction assertUniqueInferredType(args, types) {\n  if (!isTypeUnique(types)) {\n    throw new Error(\"Could not infer only one type from the following expression: \" + JSON.stringify(args));\n  }\n}\n\nOperators['get'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.ANY;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertString(args[0]);\n    var value = args[0].toString();\n\n    if (context.attributes.indexOf(value) === -1) {\n      context.attributes.push(value);\n    }\n\n    var prefix = context.inFragmentShader ? 'v_' : 'a_';\n    return prefix + value;\n  }\n};\n/**\n * Get the uniform name given a variable name.\n * @param {string} variableName The variable name.\n * @return {string} The uniform name.\n */\n\nexport function uniformNameForVariable(variableName) {\n  return 'u_var_' + variableName;\n}\nOperators['var'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.ANY;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertString(args[0]);\n    var value = args[0].toString();\n\n    if (context.variables.indexOf(value) === -1) {\n      context.variables.push(value);\n    }\n\n    return uniformNameForVariable(value);\n  }\n};\nexport var PALETTE_TEXTURE_ARRAY = 'u_paletteTextures'; // ['palette', index, colors]\n\nOperators['palette'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.COLOR;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumber(args[0]);\n    var index = expressionToGlsl(context, args[0]);\n    var colors = args[1];\n\n    if (!Array.isArray(colors)) {\n      throw new Error('The second argument of palette must be an array');\n    }\n\n    var numColors = colors.length;\n    var palette = new Uint8Array(numColors * 4);\n\n    for (var i = 0; i < numColors; i++) {\n      var candidate = colors[i];\n      /**\n       * @type {import('../color.js').Color}\n       */\n\n      var color = void 0;\n\n      if (typeof candidate === 'string') {\n        color = fromString(candidate);\n      } else {\n        if (!Array.isArray(candidate)) {\n          throw new Error('The second argument of palette must be an array of strings or colors');\n        }\n\n        var length_1 = candidate.length;\n\n        if (length_1 === 4) {\n          color = candidate;\n        } else {\n          if (length_1 !== 3) {\n            throw new Error(\"Expected palette color to have 3 or 4 values, got \" + length_1);\n          }\n\n          color = [candidate[0], candidate[1], candidate[2], 1];\n        }\n      }\n\n      var offset = i * 4;\n      palette[offset] = color[0];\n      palette[offset + 1] = color[1];\n      palette[offset + 2] = color[2];\n      palette[offset + 3] = color[3] * 255;\n    }\n\n    if (!context.paletteTextures) {\n      context.paletteTextures = [];\n    }\n\n    var paletteName = PALETTE_TEXTURE_ARRAY + \"[\" + context.paletteTextures.length + \"]\";\n    var paletteTexture = new PaletteTexture(paletteName, palette);\n    context.paletteTextures.push(paletteTexture);\n    return \"texture2D(\" + paletteName + \", vec2((\" + index + \" + 0.5) / \" + numColors + \".0, 0.5))\";\n  }\n};\nvar GET_BAND_VALUE_FUNC = 'getBandValue';\nOperators['band'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsMinCount(args, 1);\n    assertArgsMaxCount(args, 3);\n    var band = args[0];\n\n    if (!(GET_BAND_VALUE_FUNC in context.functions)) {\n      var ifBlocks = '';\n      var bandCount = context.bandCount || 1;\n\n      for (var i = 0; i < bandCount; i++) {\n        var colorIndex = Math.floor(i / 4);\n        var bandIndex = i % 4;\n\n        if (bandIndex === bandCount - 1 && bandIndex === 1) {\n          // LUMINANCE_ALPHA - band 1 assigned to rgb and band 2 assigned to alpha\n          bandIndex = 3;\n        }\n\n        var textureName = Uniforms.TILE_TEXTURE_ARRAY + \"[\" + colorIndex + \"]\";\n        ifBlocks += \"\\n          if (band == \" + (i + 1) + \".0) {\\n            return texture2D(\" + textureName + \", v_textureCoord + vec2(dx, dy))[\" + bandIndex + \"];\\n          }\\n        \";\n      }\n\n      context.functions[GET_BAND_VALUE_FUNC] = \"\\n        float getBandValue(float band, float xOffset, float yOffset) {\\n          float dx = xOffset / \" + Uniforms.TEXTURE_PIXEL_WIDTH + \";\\n          float dy = yOffset / \" + Uniforms.TEXTURE_PIXEL_HEIGHT + \";\\n          \" + ifBlocks + \"\\n        }\\n      \";\n    }\n\n    var bandExpression = expressionToGlsl(context, band);\n    var xOffsetExpression = expressionToGlsl(context, args[1] || 0);\n    var yOffsetExpression = expressionToGlsl(context, args[2] || 0);\n    return GET_BAND_VALUE_FUNC + \"(\" + bandExpression + \", \" + xOffsetExpression + \", \" + yOffsetExpression + \")\";\n  }\n};\nOperators['time'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 0);\n    return 'u_time';\n  }\n};\nOperators['zoom'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 0);\n    return 'u_zoom';\n  }\n};\nOperators['resolution'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 0);\n    return 'u_resolution';\n  }\n};\nOperators['*'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\" + expressionToGlsl(context, args[0]) + \" * \" + expressionToGlsl(context, args[1]) + \")\";\n  }\n};\nOperators['/'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\" + expressionToGlsl(context, args[0]) + \" / \" + expressionToGlsl(context, args[1]) + \")\";\n  }\n};\nOperators['+'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\" + expressionToGlsl(context, args[0]) + \" + \" + expressionToGlsl(context, args[1]) + \")\";\n  }\n};\nOperators['-'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\" + expressionToGlsl(context, args[0]) + \" - \" + expressionToGlsl(context, args[1]) + \")\";\n  }\n};\nOperators['clamp'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 3);\n    assertNumbers(args);\n    var min = expressionToGlsl(context, args[1]);\n    var max = expressionToGlsl(context, args[2]);\n    return \"clamp(\" + expressionToGlsl(context, args[0]) + \", \" + min + \", \" + max + \")\";\n  }\n};\nOperators['%'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"mod(\" + expressionToGlsl(context, args[0]) + \", \" + expressionToGlsl(context, args[1]) + \")\";\n  }\n};\nOperators['^'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"pow(\" + expressionToGlsl(context, args[0]) + \", \" + expressionToGlsl(context, args[1]) + \")\";\n  }\n};\nOperators['abs'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"abs(\" + expressionToGlsl(context, args[0]) + \")\";\n  }\n};\nOperators['sin'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"sin(\" + expressionToGlsl(context, args[0]) + \")\";\n  }\n};\nOperators['cos'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertNumbers(args);\n    return \"cos(\" + expressionToGlsl(context, args[0]) + \")\";\n  }\n};\nOperators['atan'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsMinCount(args, 1);\n    assertArgsMaxCount(args, 2);\n    assertNumbers(args);\n    return args.length === 2 ? \"atan(\" + expressionToGlsl(context, args[0]) + \", \" + expressionToGlsl(context, args[1]) + \")\" : \"atan(\" + expressionToGlsl(context, args[0]) + \")\";\n  }\n};\nOperators['>'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\" + expressionToGlsl(context, args[0]) + \" > \" + expressionToGlsl(context, args[1]) + \")\";\n  }\n};\nOperators['>='] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\" + expressionToGlsl(context, args[0]) + \" >= \" + expressionToGlsl(context, args[1]) + \")\";\n  }\n};\nOperators['<'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\" + expressionToGlsl(context, args[0]) + \" < \" + expressionToGlsl(context, args[1]) + \")\";\n  }\n};\nOperators['<='] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 2);\n    assertNumbers(args);\n    return \"(\" + expressionToGlsl(context, args[0]) + \" <= \" + expressionToGlsl(context, args[1]) + \")\";\n  }\n};\n\nfunction getEqualOperator(operator) {\n  return {\n    getReturnType: function getReturnType(args) {\n      return ValueTypes.BOOLEAN;\n    },\n    toGlsl: function toGlsl(context, args) {\n      assertArgsCount(args, 2); // find common type\n\n      var type = ValueTypes.ANY;\n\n      for (var i = 0; i < args.length; i++) {\n        type &= getValueType(args[i]);\n      }\n\n      if (type === ValueTypes.NONE) {\n        throw new Error(\"All arguments should be of compatible type, got \" + JSON.stringify(args) + \" instead\");\n      } // Since it's not possible to have color types here, we can leave it out\n      // This fixes issues in case the value type is ambiguously detected as a color (e.g. the string 'red')\n\n\n      type &= ~ValueTypes.COLOR;\n      return \"(\" + expressionToGlsl(context, args[0], type) + \" \" + operator + \" \" + expressionToGlsl(context, args[1], type) + \")\";\n    }\n  };\n}\n\nOperators['=='] = getEqualOperator('==');\nOperators['!='] = getEqualOperator('!=');\nOperators['!'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 1);\n    assertBoolean(args[0]);\n    return \"(!\" + expressionToGlsl(context, args[0]) + \")\";\n  }\n};\n\nfunction getDecisionOperator(operator) {\n  return {\n    getReturnType: function getReturnType(args) {\n      return ValueTypes.BOOLEAN;\n    },\n    toGlsl: function toGlsl(context, args) {\n      assertArgsMinCount(args, 2);\n\n      for (var i = 0; i < args.length; i++) {\n        assertBoolean(args[i]);\n      }\n\n      var result = '';\n      result = args.map(function (arg) {\n        return expressionToGlsl(context, arg);\n      }).join(\" \" + operator + \" \");\n      result = \"(\" + result + \")\";\n      return result;\n    }\n  };\n}\n\nOperators['all'] = getDecisionOperator('&&');\nOperators['any'] = getDecisionOperator('||');\nOperators['between'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.BOOLEAN;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsCount(args, 3);\n    assertNumbers(args);\n    var min = expressionToGlsl(context, args[1]);\n    var max = expressionToGlsl(context, args[2]);\n    var value = expressionToGlsl(context, args[0]);\n    return \"(\" + value + \" >= \" + min + \" && \" + value + \" <= \" + max + \")\";\n  }\n};\nOperators['array'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.NUMBER_ARRAY;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsMinCount(args, 2);\n    assertArgsMaxCount(args, 4);\n    assertNumbers(args);\n    var parsedArgs = args.map(function (val) {\n      return expressionToGlsl(context, val, ValueTypes.NUMBER);\n    });\n    return \"vec\" + args.length + \"(\" + parsedArgs.join(', ') + \")\";\n  }\n};\nOperators['color'] = {\n  getReturnType: function getReturnType(args) {\n    return ValueTypes.COLOR;\n  },\n  toGlsl: function toGlsl(context, args) {\n    assertArgsMinCount(args, 3);\n    assertArgsMaxCount(args, 4);\n    assertNumbers(args);\n    var array =\n    /** @type {Array<number>} */\n    args;\n\n    if (args.length === 3) {\n      array.push(1);\n    }\n\n    var parsedArgs = args.map(function (val, i) {\n      return expressionToGlsl(context, val, ValueTypes.NUMBER) + (i < 3 ? ' / 255.0' : '');\n    });\n    return \"vec\" + args.length + \"(\" + parsedArgs.join(', ') + \")\";\n  }\n};\nOperators['interpolate'] = {\n  getReturnType: function getReturnType(args) {\n    var type = ValueTypes.COLOR | ValueTypes.NUMBER;\n\n    for (var i = 3; i < args.length; i += 2) {\n      type = type & getValueType(args[i]);\n    }\n\n    return type;\n  },\n  toGlsl: function toGlsl(context, args, opt_typeHint) {\n    assertArgsEven(args);\n    assertArgsMinCount(args, 6); // validate interpolation type\n\n    var type = args[0];\n    var interpolation;\n\n    switch (type[0]) {\n      case 'linear':\n        interpolation = 1;\n        break;\n\n      case 'exponential':\n        interpolation = type[1];\n        break;\n\n      default:\n        interpolation = null;\n    }\n\n    if (!interpolation) {\n      throw new Error(\"Invalid interpolation type for \\\"interpolate\\\" operator, received: \" + JSON.stringify(type));\n    } // compute input/output types\n\n\n    var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;\n    var outputType = Operators['interpolate'].getReturnType(args) & typeHint;\n    assertUniqueInferredType(args, outputType);\n    var input = expressionToGlsl(context, args[1]);\n    var exponent = numberToGlsl(interpolation);\n    var result = '';\n\n    for (var i = 2; i < args.length - 2; i += 2) {\n      var stop1 = expressionToGlsl(context, args[i]);\n      var output1 = result || expressionToGlsl(context, args[i + 1], outputType);\n      var stop2 = expressionToGlsl(context, args[i + 2]);\n      var output2 = expressionToGlsl(context, args[i + 3], outputType);\n      result = \"mix(\" + output1 + \", \" + output2 + \", pow(clamp((\" + input + \" - \" + stop1 + \") / (\" + stop2 + \" - \" + stop1 + \"), 0.0, 1.0), \" + exponent + \"))\";\n    }\n\n    return result;\n  }\n};\nOperators['match'] = {\n  getReturnType: function getReturnType(args) {\n    var type = ValueTypes.ANY;\n\n    for (var i = 2; i < args.length; i += 2) {\n      type = type & getValueType(args[i]);\n    }\n\n    type = type & getValueType(args[args.length - 1]);\n    return type;\n  },\n  toGlsl: function toGlsl(context, args, opt_typeHint) {\n    assertArgsEven(args);\n    assertArgsMinCount(args, 4);\n    var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;\n    var outputType = Operators['match'].getReturnType(args) & typeHint;\n    assertUniqueInferredType(args, outputType);\n    var input = expressionToGlsl(context, args[0]);\n    var fallback = expressionToGlsl(context, args[args.length - 1], outputType);\n    var result = null;\n\n    for (var i = args.length - 3; i >= 1; i -= 2) {\n      var match = expressionToGlsl(context, args[i]);\n      var output = expressionToGlsl(context, args[i + 1], outputType);\n      result = \"(\" + input + \" == \" + match + \" ? \" + output + \" : \" + (result || fallback) + \")\";\n    }\n\n    return result;\n  }\n};\nOperators['case'] = {\n  getReturnType: function getReturnType(args) {\n    var type = ValueTypes.ANY;\n\n    for (var i = 1; i < args.length; i += 2) {\n      type = type & getValueType(args[i]);\n    }\n\n    type = type & getValueType(args[args.length - 1]);\n    return type;\n  },\n  toGlsl: function toGlsl(context, args, opt_typeHint) {\n    assertArgsOdd(args);\n    assertArgsMinCount(args, 3);\n    var typeHint = opt_typeHint !== undefined ? opt_typeHint : ValueTypes.ANY;\n    var outputType = Operators['case'].getReturnType(args) & typeHint;\n    assertUniqueInferredType(args, outputType);\n\n    for (var i = 0; i < args.length - 1; i += 2) {\n      assertBoolean(args[i]);\n    }\n\n    var fallback = expressionToGlsl(context, args[args.length - 1], outputType);\n    var result = null;\n\n    for (var i = args.length - 3; i >= 0; i -= 2) {\n      var condition = expressionToGlsl(context, args[i]);\n      var output = expressionToGlsl(context, args[i + 1], outputType);\n      result = \"(\" + condition + \" ? \" + output + \" : \" + (result || fallback) + \")\";\n    }\n\n    return result;\n  }\n};","var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/WebGLTile\n */\n\n\nimport BaseTileLayer from './BaseTile.js';\nimport LayerProperty from '../layer/Property.js';\nimport WebGLTileLayerRenderer, { Attributes, Uniforms } from '../renderer/webgl/TileLayer.js';\nimport { PALETTE_TEXTURE_ARRAY, ValueTypes, expressionToGlsl, getStringNumberEquivalent, uniformNameForVariable } from '../style/expressions.js';\nimport { assign } from '../obj.js';\n/**\n * @typedef {import(\"../source/DataTile.js\").default|import(\"../source/TileImage.js\").default} SourceType\n */\n\n/**\n * @typedef {Object} Style\n * Translates tile data to rendered pixels.\n *\n * @property {Object<string, (string|number)>} [variables] Style variables.  Each variable must hold a number or string.  These\n * variables can be used in the `color`, `brightness`, `contrast`, `exposure`, `saturation` and `gamma`\n * {@link import(\"../style/expressions.js\").ExpressionValue expressions}, using the `['var', 'varName']` operator.\n * To update style variables, use the {@link import(\"./WebGLTile.js\").default#updateStyleVariables} method.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [color] An expression applied to color values.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [brightness=0] Value used to decrease or increase\n * the layer brightness.  Values range from -1 to 1.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [contrast=0] Value used to decrease or increase\n * the layer contrast.  Values range from -1 to 1.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [exposure=0] Value used to decrease or increase\n * the layer exposure.  Values range from -1 to 1.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [saturation=0] Value used to decrease or increase\n * the layer saturation.  Values range from -1 to 1.\n * @property {import(\"../style/expressions.js\").ExpressionValue} [gamma=1] Apply a gamma correction to the layer.\n * Values range from 0 to infinity.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Style} [style] Style to apply to the layer.\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {SourceType} [source] Source for this layer.\n * @property {import(\"../PluggableMap.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link module:ol/Map#addLayer}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {number} [cacheSize=512] The internal texture cache size.  This needs to be large enough to render\n * two zoom levels worth of tiles.\n */\n\n/**\n * @typedef {Object} ParsedStyle\n * @property {string} vertexShader The vertex shader.\n * @property {string} fragmentShader The fragment shader.\n * @property {Object<string,import(\"../webgl/Helper.js\").UniformValue>} uniforms Uniform definitions.\n * @property {Array<import(\"../webgl/PaletteTexture.js\").default>} paletteTextures Palette textures.\n */\n\n/**\n * @param {Style} style The layer style.\n * @param {number} [bandCount] The number of bands.\n * @return {ParsedStyle} Shaders and uniforms generated from the style.\n */\n\nfunction parseStyle(style, bandCount) {\n  var vertexShader = \"\\n    attribute vec2 \" + Attributes.TEXTURE_COORD + \";\\n    uniform mat4 \" + Uniforms.TILE_TRANSFORM + \";\\n    uniform float \" + Uniforms.DEPTH + \";\\n\\n    varying vec2 v_textureCoord;\\n\\n    void main() {\\n      v_textureCoord = \" + Attributes.TEXTURE_COORD + \";\\n      gl_Position = \" + Uniforms.TILE_TRANSFORM + \" * vec4(\" + Attributes.TEXTURE_COORD + \", \" + Uniforms.DEPTH + \", 1.0);\\n    }\\n  \";\n  /**\n   * @type {import(\"../style/expressions.js\").ParsingContext}\n   */\n\n  var context = {\n    inFragmentShader: true,\n    variables: [],\n    attributes: [],\n    stringLiteralsMap: {},\n    functions: {},\n    bandCount: bandCount\n  };\n  var pipeline = [];\n\n  if (style.color !== undefined) {\n    var color = expressionToGlsl(context, style.color, ValueTypes.COLOR);\n    pipeline.push(\"color = \" + color + \";\");\n  }\n\n  if (style.contrast !== undefined) {\n    var contrast = expressionToGlsl(context, style.contrast, ValueTypes.NUMBER);\n    pipeline.push(\"color.rgb = clamp((\" + contrast + \" + 1.0) * color.rgb - (\" + contrast + \" / 2.0), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\");\n  }\n\n  if (style.exposure !== undefined) {\n    var exposure = expressionToGlsl(context, style.exposure, ValueTypes.NUMBER);\n    pipeline.push(\"color.rgb = clamp((\" + exposure + \" + 1.0) * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\");\n  }\n\n  if (style.saturation !== undefined) {\n    var saturation = expressionToGlsl(context, style.saturation, ValueTypes.NUMBER);\n    pipeline.push(\"\\n      float saturation = \" + saturation + \" + 1.0;\\n      float sr = (1.0 - saturation) * 0.2126;\\n      float sg = (1.0 - saturation) * 0.7152;\\n      float sb = (1.0 - saturation) * 0.0722;\\n      mat3 saturationMatrix = mat3(\\n        sr + saturation, sr, sr,\\n        sg, sg + saturation, sg,\\n        sb, sb, sb + saturation\\n      );\\n      color.rgb = clamp(saturationMatrix * color.rgb, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\\n    \");\n  }\n\n  if (style.gamma !== undefined) {\n    var gamma = expressionToGlsl(context, style.gamma, ValueTypes.NUMBER);\n    pipeline.push(\"color.rgb = pow(color.rgb, vec3(1.0 / \" + gamma + \"));\");\n  }\n\n  if (style.brightness !== undefined) {\n    var brightness = expressionToGlsl(context, style.brightness, ValueTypes.NUMBER);\n    pipeline.push(\"color.rgb = clamp(color.rgb + \" + brightness + \", vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0));\");\n  }\n  /** @type {Object<string,import(\"../webgl/Helper\").UniformValue>} */\n\n\n  var uniforms = {};\n  var numVariables = context.variables.length;\n\n  if (numVariables > 1 && !style.variables) {\n    throw new Error(\"Missing variables in style (expected \" + context.variables + \")\");\n  }\n\n  var _loop_1 = function _loop_1(i) {\n    var variableName = context.variables[i];\n\n    if (!(variableName in style.variables)) {\n      throw new Error(\"Missing '\" + variableName + \"' in style variables\");\n    }\n\n    var uniformName = uniformNameForVariable(variableName);\n\n    uniforms[uniformName] = function () {\n      var value = style.variables[variableName];\n\n      if (typeof value === 'string') {\n        value = getStringNumberEquivalent(context, value);\n      }\n\n      return value !== undefined ? value : -9999999; // to avoid matching with the first string literal\n    };\n  };\n\n  for (var i = 0; i < numVariables; ++i) {\n    _loop_1(i);\n  }\n\n  var uniformDeclarations = Object.keys(uniforms).map(function (name) {\n    return \"uniform float \" + name + \";\";\n  });\n  var textureCount = Math.ceil(bandCount / 4);\n  uniformDeclarations.push(\"uniform sampler2D \" + Uniforms.TILE_TEXTURE_ARRAY + \"[\" + textureCount + \"];\");\n\n  if (context.paletteTextures) {\n    uniformDeclarations.push(\"uniform sampler2D \" + PALETTE_TEXTURE_ARRAY + \"[\" + context.paletteTextures.length + \"];\");\n  }\n\n  var functionDefintions = Object.keys(context.functions).map(function (name) {\n    return context.functions[name];\n  });\n  var fragmentShader = \"\\n    #ifdef GL_FRAGMENT_PRECISION_HIGH\\n    precision highp float;\\n    #else\\n    precision mediump float;\\n    #endif\\n\\n    varying vec2 v_textureCoord;\\n    uniform float \" + Uniforms.TRANSITION_ALPHA + \";\\n    uniform float \" + Uniforms.TEXTURE_PIXEL_WIDTH + \";\\n    uniform float \" + Uniforms.TEXTURE_PIXEL_HEIGHT + \";\\n    uniform float \" + Uniforms.RESOLUTION + \";\\n    uniform float \" + Uniforms.ZOOM + \";\\n\\n    \" + uniformDeclarations.join('\\n') + \"\\n\\n    \" + functionDefintions.join('\\n') + \"\\n\\n    void main() {\\n      vec4 color = texture2D(\" + Uniforms.TILE_TEXTURE_ARRAY + \"[0],  v_textureCoord);\\n\\n      \" + pipeline.join('\\n') + \"\\n\\n      if (color.a == 0.0) {\\n        discard;\\n      }\\n\\n      gl_FragColor = color;\\n      gl_FragColor.rgb *= gl_FragColor.a;\\n      gl_FragColor *= \" + Uniforms.TRANSITION_ALPHA + \";\\n    }\";\n  return {\n    vertexShader: vertexShader,\n    fragmentShader: fragmentShader,\n    uniforms: uniforms,\n    paletteTextures: context.paletteTextures\n  };\n}\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @extends BaseTileLayer<SourceType, WebGLTileLayerRenderer>\n * @api\n */\n\n\nvar WebGLTileLayer =\n/** @class */\nfunction (_super) {\n  __extends(WebGLTileLayer, _super);\n  /**\n   * @param {Options} opt_options Tile layer options.\n   */\n\n\n  function WebGLTileLayer(opt_options) {\n    var _this = this;\n\n    var options = opt_options ? assign({}, opt_options) : {};\n    var style = options.style || {};\n    delete options.style;\n    var cacheSize = options.cacheSize;\n    delete options.cacheSize;\n    _this = _super.call(this, options) || this;\n    /**\n     * @type {Style}\n     * @private\n     */\n\n    _this.style_ = style;\n    /**\n     * @type {number}\n     * @private\n     */\n\n    _this.cacheSize_ = cacheSize;\n    /**\n     * @type {Object<string, (string|number)>}\n     * @private\n     */\n\n    _this.styleVariables_ = _this.style_.variables || {};\n\n    _this.addChangeListener(LayerProperty.SOURCE, _this.handleSourceUpdate_);\n\n    return _this;\n  }\n  /**\n   * @private\n   */\n\n\n  WebGLTileLayer.prototype.handleSourceUpdate_ = function () {\n    this.setStyle(this.style_);\n  };\n  /**\n   * @private\n   * @return {number} The number of source bands.\n   */\n\n\n  WebGLTileLayer.prototype.getSourceBandCount_ = function () {\n    var source = this.getSource();\n    return source && 'bandCount' in source ? source.bandCount : 4;\n  };\n\n  WebGLTileLayer.prototype.createRenderer = function () {\n    var parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n    return new WebGLTileLayerRenderer(this, {\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      cacheSize: this.cacheSize_,\n      paletteTextures: parsedStyle.paletteTextures\n    });\n  };\n  /**\n   * Update the layer style.  The `updateStyleVariables` function is a more efficient\n   * way to update layer rendering.  In cases where the whole style needs to be updated,\n   * this method may be called instead.\n   * @param {Style} style The new style.\n   */\n\n\n  WebGLTileLayer.prototype.setStyle = function (style) {\n    this.style_ = style;\n    var parsedStyle = parseStyle(this.style_, this.getSourceBandCount_());\n    var renderer = this.getRenderer();\n    renderer.reset({\n      vertexShader: parsedStyle.vertexShader,\n      fragmentShader: parsedStyle.fragmentShader,\n      uniforms: parsedStyle.uniforms,\n      paletteTextures: parsedStyle.paletteTextures\n    });\n    this.changed();\n  };\n  /**\n   * Update any variables used by the layer style and trigger a re-render.\n   * @param {Object<string, number>} variables Variables to update.\n   * @api\n   */\n\n\n  WebGLTileLayer.prototype.updateStyleVariables = function (variables) {\n    assign(this.styleVariables_, variables);\n    this.changed();\n  };\n\n  return WebGLTileLayer;\n}(BaseTileLayer);\n/**\n * Clean up underlying WebGL resources.\n * @function\n * @api\n */\n\n\nWebGLTileLayer.prototype.dispose;\nexport default WebGLTileLayer;"],"names":["ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","CONTEXT_IDS","getContext","canvas","opt_attributes","attributes","preserveDrawingBuffer","ii","length","i","context","e","BufferUsage","WebGLArrayBuffer","type","opt_usage","this","array","usage","undefined","prototype","ofSize","size","getArrayClassForType","fromArray","arrayClass","from","fromArrayBuffer","buffer","getType","getArray","getUsage","getSize","Float32Array","Uint32Array","_extendStatics","__extends","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","TypeError","String","__","constructor","create","bindAndConfigure","gl","texture","interpolate","resampleFilter","LINEAR","NEAREST","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","uploadDataTexture","helper","data","bandCount","getGL","format","textureType","bytesPerRow","byteLength","unpackAlignment","LUMINANCE","LUMINANCE_ALPHA","RGB","RGBA","Error","FLOAT","getExtension","UNSIGNED_BYTE","oldUnpackAlignment","getParameter","UNPACK_ALIGNMENT","pixelStorei","texImage2D","_super","TileTexture","tile","grid","_this","textures","handleTileChange_","bind","getTileSize","tileCoord","NaN","helper_","coords","flushBufferData","setTile","removeEventListener","EventType","loaded","getState","TileState","uploadTile_","addEventListener","ImageTile","createTexture","push","image","uploadImageTexture","getImage","getData","isFloat","pixelCount","DataType","Uint8Array","bytesPerElement","BYTES_PER_ELEMENT","Math","floor","textureCount","ceil","textureDataArrays","textureIndex","dataIndex","rowOffset","colCount","rowIndex","colIndex","dataValue","pixelIndex","bandIndex","textureData","dispatchEvent","disposeInternal","deleteBuffer","deleteTexture","WebGLPostProcessingPass","options","gl_","webGlContext","scaleRatio_","scaleRatio","renderTargetTexture_","renderTargetTextureSize_","frameBuffer_","createFramebuffer","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","renderTargetProgram_","createProgram","attachShader","linkProgram","renderTargetVerticesBuffer_","createBuffer","bindBuffer","bufferData","renderTargetAttribLocation_","getAttribLocation","renderTargetUniformLocation_","getUniformLocation","renderTargetOpacityLocation_","renderTargetTextureLocation_","uniforms_","uniforms","keys","forEach","name","value","location","init","frameState","textureSize","drawingBufferWidth","drawingBufferHeight","bindFramebuffer","FRAMEBUFFER","getFrameBuffer","viewport","internalFormat","framebufferTexture2D","COLOR_ATTACHMENT0","apply","nextPass","preCompose","postCompose","activeTexture","TEXTURE0","canvasId","renderTargets","getContextAttributes","clearColor","clear","COLOR_BUFFER_BIT","enable","BLEND","blendFunc","ONE","ONE_MINUS_SRC_ALPHA","useProgram","enableVertexAttribArray","vertexAttribPointer","uniform2f","uniform1i","opacity","layerStatesArray","layerIndex","uniform1f","applyUniforms","drawArrays","TRIANGLES","textureSlot","uniform","HTMLCanvasElement","ImageData","width","height","isArray","uniform3f","uniform4f","fromTransform","mat4","transform","DefaultUniform","AttributeType","canvasCache","getSharedCanvasCacheKey","key","uniqueCanvasCacheKeyCount","WebGLHelper","opt_options","boundHandleWebGLContextLost_","handleWebGLContextLost","boundHandleWebGLContextRestored_","handleWebGLContextRestored","canvasCacheKey_","canvasCacheKey","canvas_","cacheItem","document","createElement","style","position","left","users","getCanvas","bufferCache_","extensionCache_","currentProgram_","ContextEventType","offsetRotateMatrix_","offsetScaleMatrix_","tmpMat4_","uniformLocations_","attribLocations_","setUniforms","postProcessPasses_","postProcesses","map","shaderCompileErrors_","startTime_","Date","now","name_1","canvasCacheKeyMatches","extension","bufferKey","bufferCache","webGlBuffer","buf","bufferCacheEntry","isContextLost","loseContext","releaseCanvas","prepareDraw","opt_disableAlphaBlend","pixelRatio","ZERO","applyFrameState","prepareDrawToRenderTarget","renderTarget","getFramebuffer","getTexture","drawElements","start","end","elementType","UNSIGNED_INT","numItems","offsetInBytes","finalizeDraw","rotation","viewState","offsetScaleMatrix","offsetRotateMatrix","setUniformMatrixValue","setUniformFloatValue","zoom","resolution","HTMLImageElement","prevValue","complete","program","source","shader","getProgram","fragmentShaderSource","vertexShaderSource","getShaderParameter","COMPILE_STATUS","message","getShaderInfoLog","deleteShader","getProgramParameter","LINK_STATUS","getAttributeLocation","makeProjectionTransform","center","uniformMatrix4fv","enableAttributeArray_","attribName","stride","offset","enableAttributes","attr","getByteSizeFromType","computeAttributesStride","opt_data","opt_texture","Disposable","Uint16Array","WebGLLayerRenderer","layer","inversePixelTransform_","postProcesses_","addChangeListener","removeHelper_","dispatchPreComposeEvent","dispatchPostComposeEvent","getLayer","hasListener","event_1","event_2","reset","dispose","prepareFrame","getSource","incrementGroup","groupNumber","className","renderer","getRenderer","layerClassName","getClassName","mapId","afterHelperCreated","prepareFrameInternal","dispatchRenderEvent_","event_3","preRender","postRender","Layer","Uniforms","Attributes","attributeDescriptions","empty","depthForZ","z","addTileTextureToLookup","tileTexturesByZ","tileTexture","getRenderExtent","extent","layerState","projection","getWrapX","gridExtent","tileGrid","getExtent","WebGLTileLayerRenderer","tileLayer","tileTransform_","tempMat4_","tempTileRange_","TileRange","tempTileCoord_","tempSize_","program_","vertexShader_","fragmentShader_","indices_","cacheSize","tileTextureCache_","LRUCache","paletteTextures_","paletteTextures","isDrawableTile_","tileState","useInterimTilesOnError","getUseInterimTilesOnError","State","enqueueTiles","tileSource","getTileGridForProjection","tileTextureCache","tileRange","getTileRangeForExtentAndZ","tileSourceKey","wantedTiles","tileResolution","getResolution","x","minX","maxX","y","minY","maxY","tileCoordKey","containsKey","get","getKey","getTile","interimTile","getInterimTile","set","tileQueueKey","tileQueue","isKeyQueued","enqueue","getTileCoordCenter","renderFrame","getZForResolution","zDirection","nextExtent","targetZ","nextResolution","alphaLookup","uid","time","blend","tileTextures","alpha","getAlpha","endTransition","findAltTiles_","minZoom","getMinZoom","parentZ","zs","Number","sort","centerX","centerY","j","jj","tileZ","tileSize","tileOrigin","getOrigin","centerI","centerJ","tileScale","depth","tileTextures_1","tileCenterI","tileCenterJ","textureProperty","uniformName","paletteIndex","paletteTexture","animate","canExpireCache","pop","postRenderFunctions","expireCache","altZ","getTileRangeForTileCoordAndZ","covered","cacheKey","deleteProgram","PaletteTexture","texture_","ValueTypes","Operators","getValueType","JSON","stringify","valueArr","every","v","operator","getReturnType","slice","numberToGlsl","s","toString","indexOf","arrayToGlsl","join","getStringNumberEquivalent","string","stringLiteralsMap","expressionToGlsl","typeHint","toGlsl","valueType","stringToGlsl","color","c","colorToGlsl","assertNumber","assertNumbers","values","assertString","assertBoolean","assertArgsCount","args","count","assertArgsMinCount","assertArgsMaxCount","assertArgsEven","assertUniqueInferredType","types","uniformNameForVariable","variableName","inFragmentShader","variables","index","colors","numColors","palette","candidate","length_1","paletteName","PALETTE_TEXTURE_ARRAY","GET_BAND_VALUE_FUNC","getEqualOperator","getDecisionOperator","arg","band","functions","ifBlocks","colorIndex","min","max","parsedArgs","val","opt_typeHint","interpolation","outputType","input","exponent","result","stop1","output1","stop2","fallback","assertArgsOdd","parseStyle","pipeline","contrast","exposure","saturation","gamma","brightness","numVariables","_loop_1","uniformDeclarations","functionDefintions","WebGLTileLayer","style_","cacheSize_","styleVariables_","handleSourceUpdate_","setStyle","getSourceBandCount_","createRenderer","parsedStyle","changed","updateStyleVariables","BaseTile"],"sourceRoot":""}