{"version":3,"file":"component---src-pages-grid-index-tsx-c7d8cf1183068945b66e.js","mappings":"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","sources":["webpack://exmap/./node_modules/ol/proj/proj4.js","webpack://exmap/./src/pages/grid/index.tsx"],"sourcesContent":["/**\n * @module ol/proj/proj4\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport { addCoordinateTransforms, addEquivalentProjections, addProjection, createSafeCoordinateTransform, get } from '../proj.js';\nimport { get as getTransform } from './transforms.js';\n/**\n * Make projections defined in proj4 (with `proj4.defs()`) available in\n * OpenLayers.\n *\n * This function should be called whenever changes are made to the proj4\n * registry, e.g. after calling `proj4.defs()`. Existing transforms will not be\n * modified by this function.\n *\n * @param {?} proj4 Proj4.\n * @api\n */\n\nexport function register(proj4) {\n  var projCodes = Object.keys(proj4.defs);\n  var len = projCodes.length;\n  var i, j;\n\n  for (i = 0; i < len; ++i) {\n    var code = projCodes[i];\n\n    if (!get(code)) {\n      var def = proj4.defs(code);\n      var units = def.units;\n\n      if (!units && def.projName === 'longlat') {\n        units = Units.DEGREES;\n      }\n\n      addProjection(new Projection({\n        code: code,\n        axisOrientation: def.axis,\n        metersPerUnit: def.to_meter,\n        units: units\n      }));\n    }\n  }\n\n  for (i = 0; i < len; ++i) {\n    var code1 = projCodes[i];\n    var proj1 = get(code1);\n\n    for (j = 0; j < len; ++j) {\n      var code2 = projCodes[j];\n      var proj2 = get(code2);\n\n      if (!getTransform(code1, code2)) {\n        if (proj4.defs[code1] === proj4.defs[code2]) {\n          addEquivalentProjections([proj1, proj2]);\n        } else {\n          var transform = proj4(code1, code2);\n          addCoordinateTransforms(proj1, proj2, createSafeCoordinateTransform(proj1, proj2, transform.forward), createSafeCoordinateTransform(proj2, proj1, transform.inverse));\n        }\n      }\n    }\n  }\n}","import * as React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport TileGrid from \"ol/tilegrid/TileGrid\";\nimport Tile from \"ol/Tile\";\nimport { XYZ } from \"ol/source\";\nimport TileLayer from \"ol/layer/WebGLTile\";\nimport ImageTile from \"ol/ImageTile\";\n\nimport proj4 from \"proj4\";\nimport { register } from \"ol/proj/proj4\";\nimport { useOl } from \"~/hooks/useOl\";\nproj4.defs(\n  \"EPSG:3995\",\n  \"+proj=stere +lat_0=90 +lat_ts=71 +lon_0=0 +k=1 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs\"\n);\nregister(proj4);\n\nconst maxResolution = 360 / 512;\nconst defaultResolutions: number[] = [];\nfor (let i = 0; i < 14; ++i) {\n  defaultResolutions[i] = maxResolution / Math.pow(2, i + 1);\n}\n\nconst Grid = (): React.ReactElement => {\n  const view4326_1 = useOl({\n    projection: \"EPSG:4326\",\n  });\n  const view4326_2 = useOl({\n    projection: \"EPSG:4326\",\n  });\n  const view3857 = useOl();\n  const view3995 = useOl({\n    projection: \"EPSG:3995\",\n  });\n\n  const size = 512;\n\n  const tileLoadFunction = React.useCallback(\n    (imageTile: Tile, coordString: string) => {\n      const [z, x, y] = coordString.split(\",\").map(Number);\n\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = size;\n      canvas.height = size;\n      const context = canvas.getContext(\"2d\");\n      if (!context) return;\n      const half = size / 2;\n      const lineHeight = 80;\n      context.strokeStyle = \"white\";\n      context.textAlign = \"center\";\n      context.font = \"72px sans-serif\";\n      context.clearRect(0, 0, size, size);\n      context.fillStyle = \"rgba(100, 100, 100, 0.5)\";\n      context.fillRect(0, 0, size, size);\n      context.fillStyle = \"black\";\n      context.fillText(`z: ${z}`, half, half - lineHeight);\n      context.fillText(`x: ${x}`, half, half);\n      context.fillText(`y: ${y}`, half, half + lineHeight);\n      context.strokeRect(0, 0, size, size);\n\n      ((imageTile as ImageTile).getImage() as HTMLImageElement).src =\n        canvas.toDataURL();\n    },\n    []\n  );\n\n  React.useEffect(() => {\n    if (view4326_1.map) {\n      const tileGrid = new TileGrid({\n        extent: [-180, -90, 180, 90],\n        tileSize: size,\n        resolutions: defaultResolutions,\n      });\n      const layer = new TileLayer({\n        source: new XYZ({\n          projection: \"EPSG:4326\",\n          url: \"{z},{x},{y}\",\n          tileGrid,\n          tileLoadFunction,\n          transition: 0,\n        }),\n      });\n      view4326_1.map.addLayer(layer);\n    }\n  }, [view4326_1.map, tileLoadFunction]);\n\n  React.useEffect(() => {\n    if (view4326_2.map) {\n      const layer = new TileLayer({\n        source: new XYZ({\n          url: \"{z},{x},{y}\",\n          tileLoadFunction,\n          transition: 0,\n        }),\n      });\n      view4326_2.map.addLayer(layer);\n    }\n  }, [view4326_2.map, tileLoadFunction]);\n\n  React.useEffect(() => {\n    if (view3857.map) {\n      const tileGrid = new TileGrid({\n        extent: [-180, -90, 180, 90],\n        tileSize: size,\n        resolutions: defaultResolutions,\n      });\n      const layer = new TileLayer({\n        source: new XYZ({\n          projection: \"EPSG:4326\",\n          url: \"{z},{x},{y}\",\n          tileGrid,\n          tileLoadFunction,\n          transition: 0,\n        }),\n      });\n      view3857.map.addLayer(layer);\n    }\n  }, [view3857.map, tileLoadFunction]);\n\n  React.useEffect(() => {\n    if (view3995.map) {\n      const tileGrid = new TileGrid({\n        extent: [-180, -90, 180, 90],\n        tileSize: size,\n        resolutions: defaultResolutions,\n      });\n      const layer = new TileLayer({\n        source: new XYZ({\n          projection: \"EPSG:4326\",\n          url: \"{z},{x},{y}\",\n          tileGrid,\n          tileLoadFunction,\n          transition: 0,\n        }),\n      });\n      view3995.map.addLayer(layer);\n    }\n  }, [view3995.map, tileLoadFunction]);\n\n  return (\n    <>\n      <CssBaseline />\n      <Helmet>\n        <title>Show Grid</title>\n        <meta name=\"description\" content=\"Show Tile Grid.\" />\n        <link rel=\"canonical\" href=\"https://yonda-yonda.github.io/exmap/grid\" />\n        <link\n          rel=\"icon\"\n          type=\"image/x-icon\"\n          href=\"https://github.githubassets.com/favicon.ico\"\n        />\n        <link\n          rel=\"stylesheet\"\n          href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n        />\n      </Helmet>\n      <h1>view EPSG:4326, grid EPSG:4326</h1>\n      <div\n        ref={view4326_1.ref}\n        style={{\n          width: \"720px\",\n          height: \"360px\",\n          border: \"solid 1px\",\n        }}\n      />\n      <h1>view EPSG:4326, grid EPSG:3857</h1>\n      <div\n        ref={view4326_2.ref}\n        style={{\n          width: \"720px\",\n          height: \"360px\",\n          border: \"solid 1px\",\n        }}\n      />\n      <h1>view EPSG:3857, grid EPSG:4326</h1>\n      <div\n        ref={view3857.ref}\n        style={{\n          width: \"720px\",\n          height: \"360px\",\n          border: \"solid 1px\",\n        }}\n      />\n      <h1>view EPSG:3995, grid EPSG:4326</h1>\n      <div\n        ref={view3995.ref}\n        style={{\n          width: \"720px\",\n          height: \"360px\",\n          border: \"solid 1px\",\n        }}\n      />\n    </>\n  );\n};\nexport default Grid;\n"],"names":["register","proj4","i","j","projCodes","Object","keys","defs","len","length","code","def","units","projName","axisOrientation","axis","metersPerUnit","to_meter","code1","proj1","code2","proj2","transform","forward","inverse","defaultResolutions","Math","pow","view4326_1","useOl","projection","view4326_2","view3857","view3995","size","tileLoadFunction","React","imageTile","coordString","split","map","Number","z","x","y","canvas","document","createElement","width","height","context","getContext","half","strokeStyle","textAlign","font","clearRect","fillStyle","fillRect","fillText","strokeRect","getImage","src","toDataURL","tileGrid","TileGrid","extent","tileSize","resolutions","layer","TileLayer","source","XYZ","url","transition","addLayer","Helmet","name","content","rel","href","type","ref","style","border"],"sourceRoot":""}