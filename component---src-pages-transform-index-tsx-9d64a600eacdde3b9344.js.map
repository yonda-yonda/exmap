{"version":3,"file":"component---src-pages-transform-index-tsx-9d64a600eacdde3b9344.js","mappings":"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","sources":["webpack://exmap/./src/pages/transform/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport {\n  Container,\n  Typography,\n  Stack,\n  Grid,\n  TextField,\n  Button,\n  Switch,\n  Tooltip,\n  FormControl,\n  FormControlLabel,\n  FormHelperText,\n  InputAdornment,\n} from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport FileDownloadIcon from \"@mui/icons-material/FileDownload\";\nimport { useForm, SubmitHandler, Controller } from \"react-hook-form\";\nimport { scroller } from \"react-scroll\";\nimport { View } from \"ol\";\nimport OlGeoJSON from \"ol/format/GeoJSON\";\nimport VectorLayer from \"ol/layer/Vector\";\nimport VectorSource from \"ol/source/Vector\";\nimport { get as getProjection } from \"ol/proj\";\nimport { register } from \"ol/proj/proj4\";\nimport proj4 from \"proj4\";\nimport { utils, transform } from \"geo4326\";\nimport type { Feature } from \"geojson\";\n\nimport { useOl } from \"~/hooks/useOl\";\nimport {\n  parsedLinearRing,\n  getPolygon,\n  getEPSGcode,\n  GeoJSONWithCRS,\n} from \"~/scripts/geojson\";\nimport { download } from \"~/scripts/file\";\nimport sampleGeoJSON from \"~/assets/transform_sample.json\";\n\ntype Input = {\n  code: string;\n  coordinates: string;\n  partition: string;\n  split: boolean;\n};\n\ntype TransformError = {\n  type: \"code\" | \"coordinates\" | \"transform\" | \"display\";\n};\n\nconst Transform = (): React.ReactElement => {\n  const theme = useTheme();\n  const middle = useMediaQuery(theme.breakpoints.up(\"md\"));\n\n  const preview = useOl();\n  const result = useOl();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const inputLayer = React.useRef<VectorLayer<any>>();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const distLayer = React.useRef<VectorLayer<any>>();\n  // https://github.com/openlayers/openlayers/issues/12497\n\n  const { control, watch, handleSubmit, setValue } = useForm<Input>({\n    mode: \"onSubmit\",\n    criteriaMode: \"all\",\n    defaultValues: {\n      code: \"\",\n      coordinates: \"\",\n      partition: \"0\",\n      split: false,\n    },\n  });\n\n  const rawInput = watch();\n  const prevInput = React.useRef<string>();\n  const [transformError, setTransformError] =\n    React.useState<TransformError | null>(null);\n  const [transformed, setTransformed] = React.useState<Feature | null>();\n\n  React.useEffect(() => {\n    if (preview.map) {\n      if (!inputLayer.current) {\n        inputLayer.current = new VectorLayer({\n          source: new VectorSource({}),\n        });\n\n        preview.map.addLayer(inputLayer.current);\n      }\n    }\n  }, [preview.map]);\n\n  React.useEffect(() => {\n    if (result.map) {\n      const projection = getProjection(\"EPSG:4326\");\n      if (!distLayer.current && projection) {\n        distLayer.current = new VectorLayer({\n          source: new VectorSource({}),\n        });\n\n        result.map.addLayer(distLayer.current);\n        result.map.setView(\n          new View({\n            projection,\n            center: [0, 0],\n            zoom: 1,\n          })\n        );\n      }\n    }\n  }, [result.map]);\n\n  React.useEffect(() => {\n    if (\n      preview.map &&\n      inputLayer.current &&\n      prevInput.current !== JSON.stringify(rawInput)\n    ) {\n      if (rawInput.code.length === 0 || rawInput.coordinates.length === 0)\n        return;\n\n      const coordinates = parsedLinearRing(rawInput.coordinates);\n      if (!rawInput.code.match(/^[0-9]{1,}$/) || !coordinates) return;\n      prevInput.current = JSON.stringify(rawInput);\n      const code = `EPSG:${rawInput.code}`;\n      const currentCode = preview.map.getView().getProjection().getCode();\n\n      try {\n        if (code !== currentCode) {\n          if (!getProjection(code)) {\n            const crs = utils.getCrs(code);\n\n            proj4.defs(code, crs);\n            register(proj4);\n          }\n\n          const projection = getProjection(code);\n          if (projection)\n            preview.map.setView(\n              new View({\n                projection,\n                center: [0, 0],\n                zoom: 1,\n              })\n            );\n        }\n      } catch {\n        return;\n      }\n\n      try {\n        const source = inputLayer.current.getSource();\n        source.clear();\n\n        const feature = new OlGeoJSON({\n          dataProjection: code,\n          featureProjection: code,\n        }).readFeature({\n          type: \"Polygon\",\n          coordinates: [coordinates],\n        });\n        source.addFeature(feature);\n        const polygon = feature.getGeometry()?.getExtent();\n        polygon &&\n          preview.map.getView().fit(polygon, {\n            padding: [40, 20, 40, 20],\n            maxZoom: 20,\n          });\n      } catch {\n        return;\n      }\n    }\n  }, [rawInput, preview.map]);\n\n  const onSubmit: SubmitHandler<Input> = React.useCallback(\n    data => {\n      if (distLayer.current) {\n        const source = distLayer.current.getSource();\n        source.clear();\n      }\n\n      const code = `EPSG:${data.code}`;\n\n      let crs: string;\n      try {\n        crs = utils.getCrs(code);\n      } catch {\n        setTransformError({ type: \"code\" });\n        return;\n      }\n\n      const coordinates = parsedLinearRing(data.coordinates);\n      if (!coordinates) {\n        setTransformError({ type: \"coordinates\" });\n        return;\n      }\n      try {\n        const feature = transform.geojsonFromLinearRing(coordinates, crs, {\n          partition: parseInt(data.partition, 10),\n          expand: !data.split,\n        });\n        setTransformed(feature);\n        scroller.scrollTo(\"result\", {\n          duration: 1500,\n          delay: 300,\n          smooth: \"easeInOutQuart\",\n        });\n      } catch {\n        setTransformError({ type: \"transform\" });\n        return;\n      }\n      setTransformError(null);\n    },\n    [setTransformError, setTransformed]\n  );\n\n  React.useEffect(() => {\n    if (result.map && distLayer.current) {\n      try {\n        const source = distLayer.current.getSource();\n        source.clear();\n\n        const feature = new OlGeoJSON({\n          dataProjection: \"EPSG:4326\",\n          featureProjection: \"EPSG:4326\",\n        }).readFeature(transformed);\n        source.addFeature(feature);\n\n        const extent = transformed?.bbox\n          ? transformed.bbox\n          : [-180, -90, 180, 90];\n        if (extent[0] > extent[2]) extent[2] += 360;\n\n        result.map.getView().fit(extent, {\n          padding: [40, 20, 40, 20],\n          maxZoom: 20,\n        });\n      } catch {\n        setTransformError({\n          type: \"display\",\n        });\n      }\n    }\n  }, [result.map, transformed, setTransformError]);\n\n  const exportFile = React.useCallback(() => {\n    if (!transformed) return;\n    download(JSON.stringify(transformed), \"transformed.geojson\", \"text/json\");\n  }, [transformed]);\n\n  const sample = React.useCallback(() => {\n    const code = getEPSGcode(sampleGeoJSON as GeoJSONWithCRS, [\n      \"Polygon\",\n      \"MultiPolygon\",\n    ]);\n    const coordinates = getPolygon(\n      sampleGeoJSON as GeoJSONWithCRS\n    )?.coordinates;\n\n    if (code && Array.isArray(coordinates)) {\n      setValue(\"code\", String(code));\n      setValue(\"coordinates\", JSON.stringify(coordinates[0]));\n    }\n  }, [setValue]);\n\n  return (\n    <>\n      <CssBaseline />\n      <Helmet>\n        <title>Transform to EPSG:4326</title>\n        <meta\n          name=\"description\"\n          content=\"Transform Polygon and export GeoJSON.\"\n        />\n        <link\n          rel=\"canonical\"\n          href=\"https://yonda-yonda.github.io/exmap/transform\"\n        />\n        <link\n          rel=\"icon\"\n          type=\"image/x-icon\"\n          href=\"https://github.githubassets.com/favicon.ico\"\n        />\n        <link\n          rel=\"stylesheet\"\n          href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n        />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content=\"Transform to EPSG:4326\" />\n        <meta\n          name=\"twitter:description\"\n          content=\"様々な投影座標系のポリゴンをEPSG:4326のGeoJSONに変換します。\"\n        />\n        <meta\n          property=\"og:url\"\n          content=\"https://yonda-yonda.github.io/exmap/transform\"\n        />\n        <meta\n          name=\"twitter:image\"\n          content=\"https://yonda-yonda.github.io/exmap/image/twitter_transform.png\"\n        />\n      </Helmet>\n      <Container>\n        <Typography variant=\"h2\" component=\"h1\">\n          Transform to EPSG:4326\n        </Typography>\n        <Stack my={4} spacing={8}>\n          <section>\n            <Typography variant=\"h4\" component=\"h2\" sx={{ mb: 2 }}>\n              Input\n            </Typography>\n\n            <form onSubmit={handleSubmit(onSubmit)}>\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={5}>\n                  <Stack spacing={3}>\n                    <Controller\n                      control={control}\n                      name=\"code\"\n                      render={({ field, fieldState: { invalid, error } }) => (\n                        <FormControl error={invalid} fullWidth>\n                          <TextField\n                            {...field}\n                            label=\"Projection Code\"\n                            error={invalid}\n                            InputProps={{\n                              startAdornment: (\n                                <InputAdornment position=\"start\">\n                                  EPSG:\n                                </InputAdornment>\n                              ),\n                            }}\n                          />\n                          {error?.type === \"required\" && (\n                            <FormHelperText>\n                              Required. <br />\n                              必須です。入力してください。\n                            </FormHelperText>\n                          )}\n                          {error?.type === \"pattern\" && (\n                            <FormHelperText>\n                              Must be number. <br />\n                              数値を入力してください。\n                            </FormHelperText>\n                          )}\n                        </FormControl>\n                      )}\n                      rules={{\n                        required: true,\n                        pattern: /^[0-9]{1,}$/,\n                      }}\n                    />\n                    <Controller\n                      control={control}\n                      name=\"coordinates\"\n                      render={({ field, fieldState: { invalid, error } }) => (\n                        <div>\n                          <FormControl error={invalid} fullWidth>\n                            <TextField\n                              {...field}\n                              error={invalid}\n                              label=\"Coordinates\"\n                              fullWidth\n                              multiline\n                              rows={4}\n                              placeholder=\"[[0,0],[1,0],[1,1],[0,1],[0,0]]\"\n                            />\n                            {error?.type === \"required\" && (\n                              <FormHelperText>\n                                Required. <br />\n                                必須です。入力してください。\n                              </FormHelperText>\n                            )}\n                            {error?.type === \"parse\" && (\n                              <FormHelperText>\n                                Wrong format. <br />\n                                座標の配列(3点以上)を入力してください。\n                              </FormHelperText>\n                            )}\n                            {error?.type === \"selfintersection\" && (\n                              <FormHelperText>\n                                not allow self-intersection. <br />\n                                自己交差しています。\n                              </FormHelperText>\n                            )}\n                          </FormControl>\n                          <Button\n                            variant=\"outlined\"\n                            onClick={sample}\n                            size=\"small\"\n                            sx={{ mt: 1 }}\n                          >\n                            set sample\n                          </Button>\n                        </div>\n                      )}\n                      rules={{\n                        required: true,\n                        validate: {\n                          parse: data => !!parsedLinearRing(data),\n                          selfintersection: data => {\n                            const points = parsedLinearRing(data);\n                            return points\n                              ? !utils.selfintersection(points)\n                              : true;\n                          },\n                        },\n                      }}\n                    />\n                    <Controller\n                      control={control}\n                      name=\"partition\"\n                      render={({ field, fieldState: { invalid, error } }) => (\n                        <Tooltip\n                          title={\n                            <span>\n                              The number of points to be inserted between\n                              vertices during the transformation.\n                              <br />\n                              変換時に頂点間に挿入する点の数を指定します。\n                            </span>\n                          }\n                          arrow\n                          placement={middle ? \"right\" : \"top\"}\n                        >\n                          <FormControl error fullWidth sx={{ mb: 2 }}>\n                            <TextField\n                              {...field}\n                              label=\"Insertion Points\"\n                              type=\"number\"\n                              size=\"small\"\n                              error={invalid}\n                              InputProps={{\n                                inputProps: {\n                                  max: 20,\n                                  min: 0,\n                                },\n                              }}\n                            />\n                            {error?.type === \"min\" && (\n                              <FormHelperText>\n                                Must be gte 0. <br />\n                                0以上の値を入力してください。\n                              </FormHelperText>\n                            )}\n                            {error?.type === \"max\" && (\n                              <FormHelperText>\n                                Must be lte 20. <br />\n                                20以下の値を入力してください。\n                              </FormHelperText>\n                            )}\n                          </FormControl>\n                        </Tooltip>\n                      )}\n                      rules={{\n                        min: 0,\n                        max: 20,\n                      }}\n                    />\n                    <Controller\n                      control={control}\n                      name=\"split\"\n                      render={({ field }) => (\n                        <Tooltip\n                          title={\n                            <span>\n                              Polygon crossing the antemerdian will be split.\n                              <br />\n                              180度線をまたぐ図形ではポリゴンを分割します。\n                            </span>\n                          }\n                          arrow\n                          placement={middle ? \"right\" : \"top\"}\n                        >\n                          <FormControl fullWidth sx={{ ml: 1 }}>\n                            <FormControlLabel\n                              {...field}\n                              control={<Switch size=\"small\" />}\n                              label=\"Split when crossing the antemerdian.\"\n                            />\n                          </FormControl>\n                        </Tooltip>\n                      )}\n                    />\n                  </Stack>\n                </Grid>\n                <Grid item xs={12} md={7}>\n                  <div\n                    ref={preview.ref}\n                    style={{\n                      width: \"100%\",\n                      height: \"340px\",\n                    }}\n                  />\n                </Grid>\n\n                <Grid item xs={12} sx={{ mt: 1 }}>\n                  <FormControl\n                    error={!!transformError}\n                    fullWidth\n                    sx={{ mb: 2 }}\n                  >\n                    <Button variant=\"contained\" type=\"submit\">\n                      Transform\n                    </Button>\n                    {transformError?.type === \"code\" && (\n                      <FormHelperText>\n                        Nonexistent Projection Code. <br />\n                        存在しないEPSGコードです。\n                      </FormHelperText>\n                    )}\n                    {transformError?.type === \"coordinates\" && (\n                      <FormHelperText>\n                        Invalid Coordinates. <br />\n                        無効なポリゴンです。\n                      </FormHelperText>\n                    )}\n                    {transformError?.type === \"transform\" && (\n                      <FormHelperText>\n                        Failed Transform. <br />\n                        変換に失敗しました。\n                      </FormHelperText>\n                    )}\n                    {transformError?.type === \"display\" && (\n                      <FormHelperText>\n                        Failed Display. <br />\n                        地図への表示に失敗しました。\n                      </FormHelperText>\n                    )}\n                  </FormControl>\n                </Grid>\n              </Grid>\n            </form>\n          </section>\n\n          {transformed && (\n            <section id=\"result\">\n              <Typography variant=\"h4\" component=\"h2\" sx={{ mb: 2 }}>\n                Output\n              </Typography>\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={5}>\n                  <TextField\n                    fullWidth\n                    multiline\n                    label=\"GeoJSON of EPSG:4326\"\n                    rows={12}\n                    value={JSON.stringify(transformed, null, 2)}\n                  />\n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<FileDownloadIcon />}\n                    onClick={exportFile}\n                    size=\"small\"\n                    sx={{ mt: 1 }}\n                  >\n                    Export\n                  </Button>\n                </Grid>\n                <Grid item xs={12} md={7}>\n                  <div\n                    ref={result.ref}\n                    style={{\n                      width: \"100%\",\n                      height: \"340px\",\n                    }}\n                  />\n                </Grid>\n              </Grid>\n            </section>\n          )}\n        </Stack>\n      </Container>\n    </>\n  );\n};\nexport default Transform;\n"],"names":["theme","useTheme","middle","useMediaQuery","breakpoints","up","preview","useOl","result","inputLayer","React","distLayer","useForm","mode","criteriaMode","defaultValues","code","coordinates","partition","split","control","watch","handleSubmit","setValue","rawInput","prevInput","transformError","setTransformError","transformed","setTransformed","map","current","VectorLayer","source","VectorSource","addLayer","projection","getProjection","setView","View","center","zoom","JSON","stringify","length","parsedLinearRing","match","currentCode","getView","getCode","crs","utils","proj4","register","getSource","clear","feature","OlGeoJSON","dataProjection","featureProjection","readFeature","type","addFeature","polygon","getGeometry","getExtent","fit","padding","maxZoom","onSubmit","data","transform","parseInt","expand","scroller","duration","delay","smooth","extent","bbox","exportFile","download","sample","getEPSGcode","sampleGeoJSON","getPolygon","Array","isArray","String","CssBaseline","Helmet","name","content","rel","href","property","Container","Typography","variant","component","Stack","my","spacing","sx","mb","Grid","container","item","xs","md","render","field","fieldState","invalid","error","FormControl","fullWidth","TextField","label","InputProps","startAdornment","InputAdornment","position","FormHelperText","rules","required","pattern","multiline","rows","placeholder","Button","onClick","size","mt","validate","parse","selfintersection","points","Tooltip","title","arrow","placement","inputProps","max","min","ml","FormControlLabel","Switch","ref","style","width","height","id","value","startIcon","FileDownload"],"sourceRoot":""}